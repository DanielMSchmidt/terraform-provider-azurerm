---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_app_redis_association"
description: |-
  Associates a [Spring Cloud Application](spring_cloud_app.html) with a [Redis Cache](redis_cache.html).
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_app_redis_association

Associates a [Spring Cloud Application](spring_cloud_app.html) with a [Redis Cache](redis_cache.html).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-springcloud",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermRedisCacheExample = new azurerm.redisCache.RedisCache(
      this,
      "example_3",
      {
        capacity: 0,
        enableNonSslPort: true,
        family: "C",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-cache",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "Basic",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRedisCacheExample.overrideLogicalId("example");
    const azurermSpringCloudAppExample =
      new azurerm.springCloudApp.SpringCloudApp(this, "example_4", {
        name: "example-springcloudapp",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serviceName: cdktf.Token.asString(
          azurermSpringCloudServiceExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppExample.overrideLogicalId("example");
    const azurermSpringCloudAppRedisAssociationExample =
      new azurerm.springCloudAppRedisAssociation.SpringCloudAppRedisAssociation(
        this,
        "example_5",
        {
          name: "example-bind",
          redisAccessKey: cdktf.Token.asString(
            azurermRedisCacheExample.primaryAccessKey
          ),
          redisCacheId: cdktf.Token.asString(azurermRedisCacheExample.id),
          springCloudAppId: cdktf.Token.asString(
            azurermSpringCloudAppExample.id
          ),
          sslEnabled: true,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppRedisAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.

* `springCloudAppId` - (Required) Specifies the Spring Cloud Application resource ID in which the Association is created. Changing this forces a new resource to be created.

* `redisCacheId` - (Required) Specifies the Redis Cache resource ID. Changing this forces a new resource to be created.

* `redisAccessKey` - (Required) Specifies the Redis Cache access key.

* `sslEnabled` - (Optional) Should SSL be used when connecting to Redis? Defaults to `true`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Application Redis Association.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Application Redis Association.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Application Redis Association.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Application Redis Association.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Application Redis Association.

## Import

Spring Cloud Application Redis Association can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_app_redis_association.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.AppPlatform/spring/myservice/apps/myapp/bindings/bind1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-eeeed759f1d9f42e2d4248b4ef022974085ed80c981f46e73c82f76dc9347404 -->