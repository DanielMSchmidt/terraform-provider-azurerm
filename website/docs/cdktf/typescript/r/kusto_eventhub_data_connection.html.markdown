---
subcategory: "Data Explorer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_kusto_eventhub_data_connection"
description: |-
  Manages Kusto / Data Explorer EventHub Data Connection
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_kusto_eventhub_data_connection

Manages a Kusto (also known as Azure Data Explorer) EventHub Data Connection

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "my-kusto-rg",
      }
    );
    const azurermEventhubNamespaceEventhubNs =
      new azurerm.eventhubNamespace.EventhubNamespace(this, "eventhub_ns", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "my-eventhub-ns",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
      });
    const azurermKustoClusterCluster = new azurerm.kustoCluster.KustoCluster(
      this,
      "cluster",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "kustocluster",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          capacity: 2,
          name: "Standard_D13_v2",
        },
      }
    );
    const azurermKustoDatabaseDatabase =
      new azurerm.kustoDatabase.KustoDatabase(this, "database", {
        clusterName: cdktf.Token.asString(azurermKustoClusterCluster.name),
        hotCachePeriod: "P7D",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "my-kusto-database",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        softDeletePeriod: "P31D",
      });
    const azurermEventhubEventhub = new azurerm.eventhub.Eventhub(
      this,
      "eventhub",
      {
        messageRetention: 1,
        name: "my-eventhub",
        namespaceName: cdktf.Token.asString(
          azurermEventhubNamespaceEventhubNs.name
        ),
        partitionCount: 1,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    const azurermEventhubConsumerGroupConsumerGroup =
      new azurerm.eventhubConsumerGroup.EventhubConsumerGroup(
        this,
        "consumer_group",
        {
          eventhubName: cdktf.Token.asString(azurermEventhubEventhub.name),
          name: "my-eventhub-consumergroup",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceEventhubNs.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    new azurerm.kustoEventhubDataConnection.KustoEventhubDataConnection(
      this,
      "eventhub_connection",
      {
        clusterName: cdktf.Token.asString(azurermKustoClusterCluster.name),
        consumerGroup: cdktf.Token.asString(
          azurermEventhubConsumerGroupConsumerGroup.name
        ),
        dataFormat: "JSON",
        databaseName: cdktf.Token.asString(azurermKustoDatabaseDatabase.name),
        eventhubId: cdktf.Token.asString(azurermEventhubEventhub.id),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        mappingRuleName: "my-table-mapping",
        name: "my-kusto-eventhub-data-connection",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        tableName: "my-table",
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.

* `location` - (Required) The location where the Kusto Database should be created. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.

* `clusterName` - (Required) Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.

* `compression` - (Optional) Specifies compression type for the connection. Allowed values: `gZip` and `none`. Defaults to `none`. Changing this forces a new resource to be created.

* `databaseName` - (Required) Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.

* `eventhubId` - (Required) Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.

* `eventSystemProperties` - (Optional) Specifies a list of system properties for the Event Hub.

* `consumerGroup` - (Required) Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.

* `tableName` - (Optional) Specifies the target table name used for the message ingestion. Table must exist before resource is created.

* `identityId` - (Optional) The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.

* `mappingRuleName` - (Optional) Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.

* `dataFormat` - (Optional) Specifies the data format of the EventHub messages. Allowed values: `apacheavro`, `avro`, `csv`, `json`, `multijson`, `orc`, `parquet`, `psv`, `raw`, `scsv`, `singlejson`, `sohsv`, `tsve`, `tsv`, `txt`, and `w3Clogfile`.

* `databaseRoutingType` - (Optional) Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `single`, `multi`. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Kusto EventHub Data Connection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Kusto EventHub Data Connection.
* `update` - (Defaults to 60 minutes) Used when updating the Kusto EventHub Data Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Kusto EventHub Data Connection.
* `delete` - (Defaults to 60 minutes) Used when deleting the Kusto EventHub Data Connection.

## Import

Kusto EventHub Data Connections can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_kusto_eventhub_data_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/eventHubConnection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-19e8a486d7d7250077fa407d5c5bebd7379cb76862f223f663f226d2ab75116b -->