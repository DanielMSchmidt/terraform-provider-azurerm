---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_postgresql_database"
description: |-
  Manages a PostgreSQL Database within a PostgreSQL Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_postgresql_database

Manages a PostgreSQL Database within a PostgreSQL Server

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "api-rg-pro",
      }
    );
    const azurermPostgresqlServerExample =
      new azurerm.postgresqlServer.PostgresqlServer(this, "example_1", {
        administratorLogin: "psqladmin",
        administratorLoginPassword: "H@Sh1CoR3!",
        autoGrowEnabled: true,
        backupRetentionDays: 7,
        geoRedundantBackupEnabled: false,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "postgresql-server-1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "B_Gen5_2",
        sslEnforcementEnabled: true,
        storageMb: 5120,
        version: "9.5",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlServerExample.overrideLogicalId("example");
    const azurermPostgresqlDatabaseExample =
      new azurerm.postgresqlDatabase.PostgresqlDatabase(this, "example_2", {
        charset: "UTF8",
        collation: "English_United States.1252",
        name: "exampledb",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermPostgresqlServerExample.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlDatabaseExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the PostgreSQL Database, which needs [to be a valid PostgreSQL identifier](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS). Changing this forces a new resource to be created.

* `serverName` - (Required) Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which the PostgreSQL Server exists. Changing this forces a new resource to be created.

* `charset` - (Required) Specifies the Charset for the PostgreSQL Database, which needs [to be a valid PostgreSQL Charset](https://www.postgresql.org/docs/current/static/multibyte.html). Changing this forces a new resource to be created.

* `collation` - (Required) Specifies the Collation for the PostgreSQL Database, which needs [to be a valid PostgreSQL Collation](https://www.postgresql.org/docs/current/static/collation.html). Note that Microsoft uses different [notation](https://msdn.microsoft.com/library/windows/desktop/dd373814.aspx) - en-US instead of en_US. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the PostgreSQL Database.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the PostgreSQL Database.
* `update` - (Defaults to 60 minutes) Used when updating the PostgreSQL Database.
* `read` - (Defaults to 5 minutes) Used when retrieving the PostgreSQL Database.
* `delete` - (Defaults to 60 minutes) Used when deleting the PostgreSQL Database.

## Import

PostgreSQL Database's can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_postgresql_database.database1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/databases/database1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ed6c6d1ad0a1f8e118ba6900a8cc373acb946c0573fe70d71f4596d74633367b -->