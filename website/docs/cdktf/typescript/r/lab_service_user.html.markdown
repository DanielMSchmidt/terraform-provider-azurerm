---
subcategory: "Lab Service"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_lab_service_user"
description: |-
  Manages a Lab Service User.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_lab_service_user

Manages a Lab Service User.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermLabServiceLabExample = new azurerm.labServiceLab.LabServiceLab(
      this,
      "example_1",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-lab",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        security: {
          openAccessEnabled: false,
        },
        title: "Test Title",
        virtualMachine: {
          adminUser: {
            password: "Password1234!",
            username: "testadmin",
          },
          imageReference: {
            offer: "0001-com-ubuntu-server-focal",
            publisher: "canonical",
            sku: "20_04-lts",
            version: "latest",
          },
          sku: {
            capacity: 1,
            name: "Classic_Fsv2_2_4GB_128_S_SSD",
          },
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLabServiceLabExample.overrideLogicalId("example");
    const azurermLabServiceUserExample =
      new azurerm.labServiceUser.LabServiceUser(this, "example_2", {
        email: "terraform-acctest@hashicorp.com",
        labId: cdktf.Token.asString(azurermLabServiceLabExample.id),
        name: "example-labuser",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLabServiceUserExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Lab Service User. Changing this forces a new resource to be created.

* `labId` - (Required) The resource ID of the Lab Service Lab. Changing this forces a new resource to be created.

* `email` - (Required) The email address of the Lab Service User. Changing this forces a new resource to be created.

* `additionalUsageQuota` - (Optional) The amount of usage quota time the Lab Service User gets in addition to the lab usage quota. Defaults to `pt0S`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Lab Service User.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Lab Service User.
* `read` - (Defaults to 5 minutes) Used when retrieving the Lab Service User.
* `update` - (Defaults to 30 minutes) Used when updating the Lab Service User.
* `delete` - (Defaults to 30 minutes) Used when deleting the Lab Service User.

## Import

Lab Service Users can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_lab_service_user.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.LabServices/labs/lab1/users/user1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5fcff083e2ee947dbaca762a17b93b3485df77087344f8eb727accce4ee81324 -->