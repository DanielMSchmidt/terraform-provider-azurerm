---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_sql_database"
description: |-
  Manages a SQL Database.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_sql_database

Allows you to manage an Azure SQL Database

-> **Note:** The `azurermSqlDatabase` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the [`azurermMssqlDatabase`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_database) resource instead.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSqlServerExample = new azurerm.sqlServer.SqlServer(
      this,
      "example_1",
      {
        administratorLogin: "4dm1n157r470r",
        administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "myexamplesqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        tags: {
          environment: "production",
        },
        version: "12.0",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSqlServerExample.overrideLogicalId("example");
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplesa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermSqlDatabaseExample = new azurerm.sqlDatabase.SqlDatabase(
      this,
      "example_3",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "myexamplesqldatabase",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermSqlServerExample.name),
        tags: {
          environment: "production",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSqlDatabaseExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the database. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which to create the database. This must be the same as Database Server resource group currently. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `serverName` - (Required) The name of the SQL Server on which to create the database. Changing this forces a new resource to be created.

* `createMode` - (Optional) Specifies how to create the database. Valid values are: `default`, `copy`, `onlineSecondary`, `nonReadableSecondary`, `pointInTimeRestore`, `recovery`, `restore` or `restoreLongTermRetentionBackup`. Must be `default` to create a new database. Defaults to `default`. Please see [Azure SQL Database REST API](https://docs.microsoft.com/rest/api/sql/databases/createorupdate#createmode)

* `import` - (Optional) A Database Import block as documented below. `createMode` must be set to `default`.

* `sourceDatabaseId` - (Optional) The URI of the source database if `createMode` value is not `default`.

* `restorePointInTime` - (Optional) The point in time for the restore. Only applies if `createMode` is `pointInTimeRestore`, it should be provided in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) format, e.g. `20131108T22:00:40Z`.

* `edition` - (Optional) The edition of the database to be created. Applies only if `createMode` is `default`. Valid values are: `basic`, `standard`, `premium`, `dataWarehouse`, `business`, `businessCritical`, `free`, `generalPurpose`, `hyperscale`, `premium`, `premiumRs`, `standard`, `stretch`, `system`, `system2`, or `web`. Please see [Azure SQL database models](https://docs.microsoft.com/azure/azure-sql/database/purchasing-models?view=azuresql).

* `collation` - (Optional) The name of the collation. Applies only if `createMode` is `default`. Azure default is `sqlLatin1GeneralCp1CiAs`. Changing this forces a new resource to be created.

* `maxSizeBytes` - (Optional) The maximum size that the database can grow to. Applies only if `createMode` is `default`. Please see [Azure SQL database models](https://docs.microsoft.com/azure/azure-sql/database/purchasing-models?view=azuresql).

* `requestedServiceObjectiveId` - (Optional) A GUID/UUID corresponding to a configured Service Level Objective for the Azure SQL database which can be used to configure a performance level.
.
* `requestedServiceObjectiveName` - (Optional) The service objective name for the database. Valid values depend on edition and location and may include `s0`, `s1`, `s2`, `s3`, `p1`, `p2`, `p4`, `p6`, `p11` and `elasticPool`. You can list the available names with the CLI: `shell az sql db list-editions -l westus -o table`. For further information please see [Azure CLI - az sql db](https://docs.microsoft.com/cli/azure/sql/db?view=azure-cli-latest#az-sql-db-list-editions).

* `sourceDatabaseDeletionDate` - (Optional) The deletion date time of the source database. Only applies to deleted databases where `createMode` is `pointInTimeRestore`.

* `elasticPoolName` - (Optional) The name of the elastic database pool.

* `threatDetectionPolicy` - (Optional) Threat detection policy configuration. The `threatDetectionPolicy` block supports fields documented below.

* `readScale` - (Optional) Read-only connections will be redirected to a high-available replica. Please see [Use read-only replicas to load-balance read-only query workloads](https://docs.microsoft.com/azure/sql-database/sql-database-read-scale-out).

* `zoneRedundant` - (Optional) Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

The `import` block supports the following:

* `storageUri` - (Required) Specifies the blob URI of the .bacpac file.
* `storageKey` - (Required) Specifies the access key for the storage account.
* `storageKeyType` - (Required) Specifies the type of access key for the storage account. Valid values are `storageAccessKey` or `sharedAccessKey`.
* `administratorLogin` - (Required) Specifies the name of the SQL administrator.
* `administratorLoginPassword` - (Required) Specifies the password of the SQL administrator.
* `authenticationType` - (Required) Specifies the type of authentication used to access the server. Valid values are `sql` or `adPassword`.
* `operationMode` - (Optional) Specifies the type of import operation being performed. The only allowable value is `import`.

---

The `threatDetectionPolicy` block supports the following:

* `state` - (Optional) The State of the Policy. Possible values are `enabled`, `disabled` or `new`.
* `disabledAlerts` - (Optional) Specifies a list of alerts which should be disabled. Possible values include `accessAnomaly`, `sqlInjection` and `sqlInjectionVulnerability`.
* `emailAccountAdmins` - (Optional) Should the account administrators be emailed when this alert is triggered? Possible values are `disabled` and `enabled`.
* `emailAddresses` - (Optional) A list of email addresses which alerts should be sent to.
* `retentionDays` - (Optional) Specifies the number of days to keep in the Threat Detection audit logs.
* `storageAccountAccessKey` - (Optional) Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `enabled`.
* `storageEndpoint` - (Optional) Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `enabled`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The SQL Database ID.
* `creationDate` - The creation date of the SQL Database.
* `defaultSecondaryLocation` - The default secondary location of the SQL Database.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the SQL Database.
* `update` - (Defaults to 60 minutes) Used when updating the SQL Database.
* `read` - (Defaults to 5 minutes) Used when retrieving the SQL Database.
* `delete` - (Defaults to 60 minutes) Used when deleting the SQL Database.

## Import

SQL Databases can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_sql_database.database1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/databases/database1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fd776885c681240fa6a08bc6fd45f5642a0555d4204a8b616d8ddd56c3fa8590 -->