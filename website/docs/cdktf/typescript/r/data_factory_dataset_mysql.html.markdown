---
subcategory: "Data Factory"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_data_factory_dataset_mysql"
description: |-
  Manages a MySQL Dataset inside a Azure Data Factory.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_data_factory_dataset_mysql

Manages a MySQL Dataset inside a Azure Data Factory.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermDataFactoryExample = new azurerm.dataFactory.DataFactory(
      this,
      "example_1",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataFactoryExample.overrideLogicalId("example");
    const azurermDataFactoryLinkedServiceMysqlExample =
      new azurerm.dataFactoryLinkedServiceMysql.DataFactoryLinkedServiceMysql(
        this,
        "example_2",
        {
          connectionString:
            "Server=test;Port=3306;Database=test;User=test;SSLMode=1;UseSystemTrustStore=0;Password=test",
          dataFactoryId: cdktf.Token.asString(azurermDataFactoryExample.id),
          name: "example",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataFactoryLinkedServiceMysqlExample.overrideLogicalId("example");
    const azurermDataFactoryDatasetMysqlExample =
      new azurerm.dataFactoryDatasetMysql.DataFactoryDatasetMysql(
        this,
        "example_3",
        {
          dataFactoryId: cdktf.Token.asString(azurermDataFactoryExample.id),
          linkedServiceName: cdktf.Token.asString(
            azurermDataFactoryLinkedServiceMysqlExample.name
          ),
          name: "example",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataFactoryDatasetMysqlExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following supported arguments are common across all Azure Data Factory Datasets:

* `name` - (Required) Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.

* `dataFactoryId` - (Required) The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.

* `linkedServiceName` - (Required) The Data Factory Linked Service name in which to associate the Dataset with.

* `folder` - (Optional) The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.

* `schemaColumn` - (Optional) A `schemaColumn` block as defined below.

* `description` - (Optional) The description for the Data Factory Dataset MySQL.

* `annotations` - (Optional) List of tags that can be used for describing the Data Factory Dataset MySQL.

* `parameters` - (Optional) A map of parameters to associate with the Data Factory Dataset MySQL.

* `additionalProperties` - (Optional) A map of additional properties to associate with the Data Factory Dataset MySQL.

The following supported arguments are specific to MySQL Dataset:

* `tableName` - (Optional) The table name of the Data Factory Dataset MySQL.

---

A `schemaColumn` block supports the following:

* `name` - (Required) The name of the column.

* `type` - (Optional) Type of the column. Valid values are `byte`, `byte[]`, `boolean`, `date`, `dateTime`,`dateTimeOffset`, `decimal`, `double`, `guid`, `int16`, `int32`, `int64`, `single`, `string`, `timeSpan`. Please note these values are case sensitive.

* `description` - (Optional) The description of the column.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Data Factory MySQL Dataset.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Data Factory MySQL Dataset.
* `update` - (Defaults to 30 minutes) Used when updating the Data Factory MySQL Dataset.
* `read` - (Defaults to 5 minutes) Used when retrieving the Data Factory MySQL Dataset.
* `delete` - (Defaults to 30 minutes) Used when deleting the Data Factory MySQL Dataset.

## Import

Data Factory MySQL Datasets can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_data_factory_dataset_mysql.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0157b3afa819d84313be2548b029363d682bcba92f6c2dac10e429bb2f74c77d -->