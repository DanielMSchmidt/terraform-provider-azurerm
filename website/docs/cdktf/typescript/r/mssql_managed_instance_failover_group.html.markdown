---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_managed_instance_failover_group"
description: |-
  Manages an Azure SQL Managed Instance Failover Group.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_managed_instance_failover_group

Manages an Azure SQL Managed Instance Failover Group.

## Example Usage

-> **Note:** For a more complete example, see the [`/examples/sqlAzure/managedInstanceFailoverGroup` directory](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/sql-azure/managed_instance_failover_group) within the GitHub Repository.

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermRouteTableExample = new azurerm.routeTable.RouteTable(
      this,
      "example_1",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRouteTableExample.overrideLogicalId("example");
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_2", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermNetworkSecurityGroupExample =
      new azurerm.networkSecurityGroup.NetworkSecurityGroup(this, "example_3", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkSecurityGroupExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_4", {
      addressPrefixes: ["10.0.2.0/24"],
      name: "example",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermSubnetNetworkSecurityGroupAssociationExample =
      new azurerm.subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociation(
        this,
        "example_5",
        {
          networkSecurityGroupId: cdktf.Token.asString(
            azurermNetworkSecurityGroupExample.id
          ),
          subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetNetworkSecurityGroupAssociationExample.overrideLogicalId(
      "example"
    );
    const azurermSubnetRouteTableAssociationExample =
      new azurerm.subnetRouteTableAssociation.SubnetRouteTableAssociation(
        this,
        "example_6",
        {
          routeTableId: cdktf.Token.asString(azurermRouteTableExample.id),
          subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetRouteTableAssociationExample.overrideLogicalId("example");
    const azurermMssqlManagedInstancePrimary =
      new azurerm.mssqlManagedInstance.MssqlManagedInstance(this, "primary", {
        administratorLogin: "mradministrator",
        administratorLoginPassword: "thisIsDog11",
        dependsOn: [
          azurermSubnetNetworkSecurityGroupAssociationExample,
          azurermSubnetRouteTableAssociationExample,
        ],
        licenseType: "BasePrice",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-primary",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "GP_Gen5",
        storageSizeInGb: 32,
        subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        tags: {
          environment: "prod",
        },
        vcores: 4,
      });
    const azurermMssqlManagedInstanceSecondary =
      new azurerm.mssqlManagedInstance.MssqlManagedInstance(this, "secondary", {
        administratorLogin: "mradministrator",
        administratorLoginPassword: "thisIsDog11",
        dependsOn: [
          azurermSubnetNetworkSecurityGroupAssociationExample,
          azurermSubnetRouteTableAssociationExample,
        ],
        licenseType: "BasePrice",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-secondary",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "GP_Gen5",
        storageSizeInGb: 32,
        subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        tags: {
          environment: "prod",
        },
        vcores: 4,
      });
    const azurermMssqlManagedInstanceFailoverGroupExample =
      new azurerm.mssqlManagedInstanceFailoverGroup.MssqlManagedInstanceFailoverGroup(
        this,
        "example_9",
        {
          location: cdktf.Token.asString(
            azurermMssqlManagedInstancePrimary.location
          ),
          managedInstanceId: cdktf.Token.asString(
            azurermMssqlManagedInstancePrimary.id
          ),
          name: "example-failover-group",
          partnerManagedInstanceId: cdktf.Token.asString(
            azurermMssqlManagedInstanceSecondary.id
          ),
          readWriteEndpointFailoverPolicy: {
            graceMinutes: 60,
            mode: "Automatic",
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlManagedInstanceFailoverGroupExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.

* `location` - (Required) The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.

* `managedInstanceId` - (Required) The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.

* `partnerManagedInstanceId` - (Required) The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.

* `readWriteEndpointFailoverPolicy` - (Required) A `readWriteEndpointFailoverPolicy` block as defined below.

* `readonlyEndpointFailoverPolicyEnabled` - (Optional) Failover policy for the read-only endpoint. Defaults to `true`.

---

A `readWriteEndpointFailoverPolicy` block supports the following:

* `mode` - (Required) The failover mode. Possible values are `automatic` or `manual`.

* `graceMinutes` - (Optional) Applies only if `mode` is `automatic`. The grace period in minutes before failover with data loss is attempted.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Managed Instance Failover Group.

* `partnerRegion` - A `partnerRegion` block as defined below.

* `role` - The local replication role of the Managed Instance Failover Group.

---

A `partnerRegion` block exports the following:

* `location` - The Azure Region where the Managed Instance Failover Group partner exists.

* `role` - The partner replication role of the Managed Instance Failover Group.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Managed Instance Failover Group.
* `read` - (Defaults to 5 minutes) Used when retrieving the Managed Instance Failover Group.
* `update` - (Defaults to 30 minutes) Used when updating the Managed Instance Failover Group.
* `delete` - (Defaults to 30 minutes) Used when deleting the Managed Instance Failover Group.

## Import

SQL Instance Failover Groups can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_managed_instance_failover_group.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Sql/locations/Location/instanceFailoverGroups/failoverGroup1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d58fcd8e8ae0dfde34632afc1f1249313d51a0ace2aa3126956e9925325f7176 -->