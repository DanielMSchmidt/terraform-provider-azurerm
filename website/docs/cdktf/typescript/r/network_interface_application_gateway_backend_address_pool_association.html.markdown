---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_interface_application_gateway_backend_address_pool_association"
description: |-
  Manages the association between a Network Interface and a Application Gateway's Backend Address Pool.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_interface_application_gateway_backend_address_pool_association

Manages the association between a Network Interface and a Application Gateway's Backend Address Pool.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-network",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const backendAddressPoolName =
      "${" + azurermVirtualNetworkExample.name + "}-beap";
    const frontendIpConfigurationName =
      "${" + azurermVirtualNetworkExample.name + "}-feip";
    const frontendPortName =
      "${" + azurermVirtualNetworkExample.name + "}-feport";
    const httpSettingName =
      "${" + azurermVirtualNetworkExample.name + "}-be-htst";
    const listenerName =
      "${" + azurermVirtualNetworkExample.name + "}-httplstn";
    const requestRoutingRuleName =
      "${" + azurermVirtualNetworkExample.name + "}-rqrt";
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_2",
      {
        allocationMethod: "Dynamic",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-pip",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    new azurerm.subnet.Subnet(this, "backend", {
      addressPrefixes: ["10.0.2.0/24"],
      name: "backend",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    const azurermSubnetFrontend = new azurerm.subnet.Subnet(this, "frontend", {
      addressPrefixes: ["10.0.1.0/24"],
      name: "frontend",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    const azurermApplicationGatewayNetwork =
      new azurerm.applicationGateway.ApplicationGateway(this, "network", {
        backendAddressPool: [
          {
            name: backendAddressPoolName,
          },
        ],
        backendHttpSettings: [
          {
            cookieBasedAffinity: "Disabled",
            name: httpSettingName,
            port: 80,
            protocol: "Http",
            requestTimeout: 1,
          },
        ],
        frontendIpConfiguration: [
          {
            name: frontendIpConfigurationName,
            publicIpAddressId: cdktf.Token.asString(azurermPublicIpExample.id),
          },
        ],
        frontendPort: [
          {
            name: frontendPortName,
            port: 80,
          },
        ],
        gatewayIpConfiguration: [
          {
            name: "my-gateway-ip-configuration",
            subnetId: cdktf.Token.asString(azurermSubnetFrontend.id),
          },
        ],
        httpListener: [
          {
            frontendIpConfigurationName: frontendIpConfigurationName,
            frontendPortName: frontendPortName,
            name: listenerName,
            protocol: "Http",
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-appgateway",
        requestRoutingRule: [
          {
            backendAddressPoolName: backendAddressPoolName,
            backendHttpSettingsName: httpSettingName,
            httpListenerName: listenerName,
            name: requestRoutingRuleName,
            priority: 25,
            ruleType: "Basic",
          },
        ],
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          capacity: 2,
          name: "Standard_Small",
          tier: "Standard",
        },
      });
    const azurermNetworkInterfaceExample =
      new azurerm.networkInterface.NetworkInterface(this, "example_6", {
        ipConfiguration: [
          {
            name: "testconfiguration1",
            privateIpAddressAllocation: "Dynamic",
            subnetId: cdktf.Token.asString(azurermSubnetFrontend.id),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-nic",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkInterfaceExample.overrideLogicalId("example");
    const azurermNetworkInterfaceApplicationGatewayBackendAddressPoolAssociationExample =
      new azurerm.networkInterfaceApplicationGatewayBackendAddressPoolAssociation.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(
        this,
        "example_7",
        {
          backendAddressPoolId: cdktf.Token.asString(
            cdktf.propertyAccess(
              cdktf.Fn.tolist(
                azurermApplicationGatewayNetwork.backendAddressPool
              ),
              ["0", "id"]
            )
          ),
          ipConfigurationName: "testconfiguration1",
          networkInterfaceId: cdktf.Token.asString(
            azurermNetworkInterfaceExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkInterfaceApplicationGatewayBackendAddressPoolAssociationExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `networkInterfaceId` - (Required) The ID of the Network Interface. Changing this forces a new resource to be created.

* `ipConfigurationName` - (Required) The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.

* `backendAddressPoolId` - (Required) The ID of the Application Gateway's Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Application Gateway Backend Address Pool.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the association between the Network Interface and the Application Gateway Backend Address Pool.
* `update` - (Defaults to 30 minutes) Used when updating the association between the Network Interface and the Application Gateway Backend Address Pool.
* `read` - (Defaults to 5 minutes) Used when retrieving the association between the Network Interface and the Application Gateway Backend Address Pool.
* `delete` - (Defaults to 30 minutes) Used when deleting the association between the Network Interface and the Application Gateway Backend Address Pool.

## Import

Associations between Network Interfaces and Application Gateway Backend Address Pools can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_interface_application_gateway_backend_address_pool_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/applicationGateways/gateway1/backendAddressPools/pool1
```

-> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{backendAddressPoolId}`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-db0bff3acc5efa702c703579a428cd95f735e7827989cdff11d1c7c1c5aa028e -->