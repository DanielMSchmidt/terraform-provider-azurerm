---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_server_vulnerability_assessment"
description: |-
  Manages the Vulnerability Assessment for a MS SQL Server.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_server_vulnerability_assessment

Manages the Vulnerability Assessment for a MS SQL Server.

-> **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSqlServerExample = new azurerm.sqlServer.SqlServer(
      this,
      "example_1",
      {
        administratorLogin: "4dm1n157r470r",
        administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "mysqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        version: "12.0",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSqlServerExample.overrideLogicalId("example");
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountReplicationType: "GRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "accteststorageaccount",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageContainerExample =
      new azurerm.storageContainer.StorageContainer(this, "example_3", {
        containerAccessType: "private",
        name: "accteststoragecontainer",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerExample.overrideLogicalId("example");
    const azurermMssqlServerSecurityAlertPolicyExample =
      new azurerm.mssqlServerSecurityAlertPolicy.MssqlServerSecurityAlertPolicy(
        this,
        "example_4",
        {
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          serverName: cdktf.Token.asString(azurermSqlServerExample.name),
          state: "Enabled",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlServerSecurityAlertPolicyExample.overrideLogicalId("example");
    const azurermMssqlServerVulnerabilityAssessmentExample =
      new azurerm.mssqlServerVulnerabilityAssessment.MssqlServerVulnerabilityAssessment(
        this,
        "example_5",
        {
          recurringScans: {
            emailSubscriptionAdmins: true,
            emails: ["email@example1.com", "email@example2.com"],
            enabled: true,
          },
          serverSecurityAlertPolicyId: cdktf.Token.asString(
            azurermMssqlServerSecurityAlertPolicyExample.id
          ),
          storageAccountAccessKey: cdktf.Token.asString(
            azurermStorageAccountExample.primaryAccessKey
          ),
          storageContainerPath:
            "${" +
            azurermStorageAccountExample.primaryBlobEndpoint +
            "${" +
            azurermStorageContainerExample.name +
            "}/",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlServerVulnerabilityAssessmentExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `serverSecurityAlertPolicyId` - (Required) The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.

* `storageContainerPath` - (Required) A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).

* `storageAccountAccessKey` - (Optional) Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.

-> **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.

* `storageContainerSasKey` - (Optional) A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.

-> **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.

* `recurringScans` - (Optional) The recurring scans settings. The `recurringScans` block supports fields documented below.

---

The `recurringScans` block supports the following:

* `enabled` - (Optional) Boolean flag which specifies if recurring scans is enabled or disabled. Defaults to `false`.
* `emailSubscriptionAdmins` - (Optional) Boolean flag which specifies if the schedule scan notification will be sent to the subscription administrators. Defaults to `false`.
* `emails` - (Optional) Specifies an array of email addresses to which the scan notification is sent.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MS SQL Server Vulnerability Assessment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the MSSQL Server Vulnerability Assessment.
* `update` - (Defaults to 30 minutes) Used when updating the MSSQL Server Vulnerability Assessment.
* `read` - (Defaults to 5 minutes) Used when retrieving the MSSQL Server Vulnerability Assessment.
* `delete` - (Defaults to 30 minutes) Used when deleting the MSSQL Server Vulnerability Assessment.

## Import

MS SQL Server Vulnerability Assessment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_server_vulnerability_assessment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/vulnerabilityAssessments/Default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-93ce242b1872afcf9a36b1a7ed69db0d5407315a13344e4fa928ecd2e68524c2 -->