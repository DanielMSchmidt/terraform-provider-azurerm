---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_encryption_scope"
description: |-
  Manages a Storage Encryption Scope.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_encryption_scope

Manages a Storage Encryption Scope.

~> **Note:** Storage Encryption Scopes are in Preview [more information can be found here](https://docs.microsoft.com/azure/storage/blobs/encryption-scope-manage).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplesa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageEncryptionScopeExample =
      new azurerm.storageEncryptionScope.StorageEncryptionScope(
        this,
        "example_2",
        {
          name: "microsoftmanaged",
          source: "Microsoft.Storage",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageEncryptionScopeExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.

* `source` - (Required) The source of the Storage Encryption Scope. Possible values are `microsoftKeyVault` and `microsoftStorage`.

* `storageAccountId` - (Required) The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.

* `infrastructureEncryptionRequired` - (Optional) Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.

---

* `keyVaultKeyId` - (Optional) The ID of the Key Vault Key. Required when `source` is `microsoftKeyVault`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Encryption Scope.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Encryption Scope.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Encryption Scope.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Encryption Scope.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Encryption Scope.

## Import

Storage Encryption Scopes can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_encryption_scope.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/account1/encryptionScopes/scope1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-572889a4f7d02776c7108da99c01989601e58d39384f743238978002bf2ceba5 -->