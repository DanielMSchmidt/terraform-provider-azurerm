---
subcategory: "Time Series Insights"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_iot_time_series_insights_event_source_eventhub"
description: |-
  Manages an Azure IoT Time Series Insights EventHub Event Source.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_time_series_insights_event_source_eventhub

Manages an Azure IoT Time Series Insights EventHub Event Source.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermEventhubNamespaceExample =
      new azurerm.eventhubNamespace.EventhubNamespace(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubNamespaceExample.overrideLogicalId("example");
    const azurermIotTimeSeriesInsightsGen2EnvironmentExample =
      new azurerm.iotTimeSeriesInsightsGen2Environment.IotTimeSeriesInsightsGen2Environment(
        this,
        "example_3",
        {
          idProperties: ["id"],
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          skuName: "L1",
          storage: {
            key: cdktf.Token.asString(
              azurermStorageAccountExample.primaryAccessKey
            ),
            name: cdktf.Token.asString(azurermStorageAccountExample.name),
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermIotTimeSeriesInsightsGen2EnvironmentExample.overrideLogicalId(
      "example"
    );
    const azurermEventhubExample = new azurerm.eventhub.Eventhub(
      this,
      "example_4",
      {
        messageRetention: 7,
        name: "example",
        namespaceName: cdktf.Token.asString(
          azurermEventhubNamespaceExample.name
        ),
        partitionCount: 2,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubExample.overrideLogicalId("example");
    const azurermEventhubAuthorizationRuleExample =
      new azurerm.eventhubAuthorizationRule.EventhubAuthorizationRule(
        this,
        "example_5",
        {
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          listen: true,
          manage: false,
          name: "example",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceExample.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          send: false,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubAuthorizationRuleExample.overrideLogicalId("example");
    const azurermEventhubConsumerGroupExample =
      new azurerm.eventhubConsumerGroup.EventhubConsumerGroup(
        this,
        "example_6",
        {
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          name: "example",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceExample.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubConsumerGroupExample.overrideLogicalId("example");
    const azurermIotTimeSeriesInsightsEventSourceEventhubExample =
      new azurerm.iotTimeSeriesInsightsEventSourceEventhub.IotTimeSeriesInsightsEventSourceEventhub(
        this,
        "example_7",
        {
          consumerGroupName: cdktf.Token.asString(
            azurermEventhubConsumerGroupExample.name
          ),
          environmentId: cdktf.Token.asString(
            azurermIotTimeSeriesInsightsGen2EnvironmentExample.id
          ),
          eventSourceResourceId: cdktf.Token.asString(
            azurermEventhubExample.id
          ),
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceExample.name
          ),
          sharedAccessKey: cdktf.Token.asString(
            azurermEventhubAuthorizationRuleExample.primaryKey
          ),
          sharedAccessKeyName: cdktf.Token.asString(
            azurermEventhubAuthorizationRuleExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermIotTimeSeriesInsightsEventSourceEventhubExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.

* `environmentId` - (Required) Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `eventhubName` - (Required) Specifies the name of the EventHub which will be associated with this resource.

* `consumerGroupName` - (Required) Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.

* `eventSourceResourceId` - (Required) Specifies the resource id where events will be coming from.

* `namespaceName` - (Required) Specifies the EventHub Namespace name.

* `sharedAccessKeyName` - (Required) Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.

* `sharedAccessKey` - (Required) Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.

* `timestampPropertyName` - (Optional) Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.

* `tags` - (Optional) A mapping of tags to assign to the resource.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the IoT Time Series Insights EventHub Event Source.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the IoT Time Series Insights EventHub Event Source.
* `update` - (Defaults to 30 minutes) Used when updating the IoT Time Series Insights EventHub Event Source.
* `read` - (Defaults to 5 minutes) Used when retrieving the IoT Time Series Insights EventHub Event Source.
* `delete` - (Defaults to 30 minutes) Used when deleting the IoT Time Series Insights EventHub Event Source.

## Import

Azure IoT Time Series Insights EventHub Event Source can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_iot_time_series_insights_event_source_eventhub.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.TimeSeriesInsights/environments/environment1/eventSources/example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-6c255b327a363d7a4ebd31e764f6df08cb6441b7dc688d0ceb83b8dcb1e88f21 -->