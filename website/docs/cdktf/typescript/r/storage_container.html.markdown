---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_container"
description: |-
  Manages a Container within an Azure Storage Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_container

Manages a Container within an Azure Storage Account.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestoraccount",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        tags: {
          environment: "staging",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageContainerExample =
      new azurerm.storageContainer.StorageContainer(this, "example_2", {
        containerAccessType: "private",
        name: "vhds",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Container which should be created within the Storage Account. Changing this forces a new resource to be created.

* `storageAccountName` - (Required) The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.

* `containerAccessType` - (Optional) The Access Level configured for this Container. Possible values are `blob`, `container` or `private`. Defaults to `private`.

* `metadata` - (Optional) A mapping of MetaData for this Container. All metadata keys should be lowercase.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Container.

* `hasImmutabilityPolicy` - Is there an Immutability Policy configured on this Storage Container?

* `hasLegalHold` - Is there a Legal Hold configured on this Storage Container?

* `resourceManagerId` - The Resource Manager ID of this Storage Container.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Container.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Container.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Container.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Container.

## Import

Storage Containers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_container.container1 https://example.blob.core.windows.net/container
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9a76c4eb7899f25dbe9b8e84d84bff9312efef4c153fc2d7b9779c3cd18275e5 -->