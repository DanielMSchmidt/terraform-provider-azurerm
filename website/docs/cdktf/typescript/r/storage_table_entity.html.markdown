---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_table_entity"
description: |-
  Manages an Entity within a Table in an Azure Storage Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_table_entity

Manages an Entity within a Table in an Azure Storage Account.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "azureexample",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "azureexamplestorage1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageTableExample = new azurerm.storageTable.StorageTable(
      this,
      "example_2",
      {
        name: "myexampletable",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageTableExample.overrideLogicalId("example");
    const azurermStorageTableEntityExample =
      new azurerm.storageTableEntity.StorageTableEntity(this, "example_3", {
        entity: {
          example: "example",
        },
        partitionKey: "examplepartition",
        rowKey: "examplerow",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
        tableName: cdktf.Token.asString(azurermStorageTableExample.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageTableEntityExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `storageAccountName` - (Required) Specifies the storage account in which to create the storage table entity. Changing this forces a new resource to be created.

* `tableName` - (Required) The name of the storage table in which to create the storage table entity. Changing this forces a new resource to be created.

* `partitionKey` - (Required) The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.

* `rowKey` - (Required) The key for the row where the entity will be inserted/merged. Changing this forces a new resource.

* `entity` - (Required) A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Entity within the Table in the Storage Account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Table Entity.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Table Entity.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Table Entity.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Table Entity.

## Import

Entities within a Table in an Azure Storage Account can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_table_entity.entity1 https://example.table.core.windows.net/table1(PartitionKey='samplepartition',RowKey='samplerow')
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d3b1347107351bacca7661da8827c2fd9db251fe7fd9b0edaf7e9d7cb7c2aecd -->