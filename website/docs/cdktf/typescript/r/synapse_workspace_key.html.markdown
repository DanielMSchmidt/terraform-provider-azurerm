---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_workspace_key"
description: |-
  Manages Synapse Workspace Keys
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_workspace_key

Manages Synapse Workspace keys

-> **Note:** Keys that are actively protecting a workspace cannot be deleted. When the keys resource is deleted, if the key is inactive it will be deleted, if it is active it will not be deleted.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        isHnsEnabled: cdktf.Token.asBoolean("true"),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_4",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyDeployer =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "deployer", {
        keyPermissions: [
          "Create",
          "Get",
          "Delete",
          "Purge",
          "GetRotationPolicy",
        ],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(dataAzurermClientConfigCurrent.objectId),
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_6",
      {
        dependsOn: [azurermKeyVaultAccessPolicyDeployer],
        keyOpts: ["unwrapKey", "wrapKey"],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "workspaceEncryptionKey",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_7", {
        customerManagedKey: {
          keyName: "enckey",
          keyVersionlessId: cdktf.Token.asString(
            azurermKeyVaultKeyExample.versionlessId
          ),
        },
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
        tags: {
          Env: "production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyWorkspacePolicy =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "workspace_policy",
        {
          keyPermissions: ["Get", "WrapKey", "UnwrapKey"],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            cdktf.propertyAccess(azurermSynapseWorkspaceExample.identity, [
              "0",
              "principal_id",
            ])
          ),
          tenantId: cdktf.Token.asString(
            cdktf.propertyAccess(azurermSynapseWorkspaceExample.identity, [
              "0",
              "tenant_id",
            ])
          ),
        }
      );
    const azurermSynapseWorkspaceKeyExample =
      new azurerm.synapseWorkspaceKey.SynapseWorkspaceKey(this, "example_9", {
        active: true,
        customerManagedKeyName: "enckey",
        customerManagedKeyVersionlessId: cdktf.Token.asString(
          azurermKeyVaultKeyExample.versionlessId
        ),
        dependsOn: [azurermKeyVaultAccessPolicyWorkspacePolicy],
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceKeyExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `customerManagedKeyName` - (Required) Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.

* `customerManagedKeyVersionlessId` - (Optional) The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption

* `synapseWorkspaceId` - (Required) The ID of the Synapse Workspace where the encryption key should be configured.

* `active` - (Required) Specifies if the workspace should be encrypted with this key.

-> **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Workspace.

## Import

Synapse Workspace Keys can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_workspace_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/keys/key1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8a9c888df1a4ff23d374941c2ad49701c1a2df3819c26a7a610260286359426b -->