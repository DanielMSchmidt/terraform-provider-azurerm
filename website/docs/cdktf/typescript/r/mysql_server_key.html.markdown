---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mysql_server_key"
description: |-
  Manages a MySQL Server Key.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mysql_server_key

Manages a Customer Managed Key for a MySQL Server.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_2",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplekv",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyClient =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "client", {
        keyPermissions: [
          "Get",
          "Create",
          "Delete",
          "List",
          "Restore",
          "Recover",
          "UnwrapKey",
          "WrapKey",
          "Purge",
          "Encrypt",
          "Decrypt",
          "Sign",
          "Verify",
          "GetRotationPolicy",
        ],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(dataAzurermClientConfigCurrent.objectId),
        secretPermissions: ["Get"],
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermMysqlServerExample = new azurerm.mysqlServer.MysqlServer(
      this,
      "example_4",
      {
        administratorLogin: "acctestun",
        administratorLoginPassword: "H@Sh1CoR3!",
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-mysql-server",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "GP_Gen5_2",
        sslEnforcementEnabled: true,
        sslMinimalTlsVersionEnforced: "TLS1_1",
        storageMb: 51200,
        version: "5.7",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlServerExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyServer =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "server", {
        keyPermissions: ["Get", "UnwrapKey", "WrapKey"],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermMysqlServerExample.identity, [
            "0",
            "principal_id",
          ])
        ),
        secretPermissions: ["Get"],
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_6",
      {
        dependsOn: [
          azurermKeyVaultAccessPolicyClient,
          azurermKeyVaultAccessPolicyServer,
        ],
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "tfex-key",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermMysqlServerKeyExample =
      new azurerm.mysqlServerKey.MysqlServerKey(this, "example_7", {
        keyVaultKeyId: cdktf.Token.asString(azurermKeyVaultKeyExample.id),
        serverId: cdktf.Token.asString(azurermMysqlServerExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlServerKeyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `serverId` - (Required) The ID of the MySQL Server. Changing this forces a new resource to be created.

* `keyVaultKeyId` - (Required) The URL to a Key Vault Key.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MySQL Server Key.

---

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the MySQL Server Key.
* `update` - (Defaults to 60 minutes) Used when updating the MySQL Server Key.
* `read` - (Defaults to 5 minutes) Used when retrieving the MySQL Server Key.
* `delete` - (Defaults to 60 minutes) Used when deleting the MySQL Server Key.

## Import

A MySQL Server Key can be imported using the `resource id` of the MySQL Server Key, e.g.

```shell
terraform import azurerm_mysql_server_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforMySQL/servers/server1/keys/keyvaultname_key-name_keyversion
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-31e91b49d6c6c2d6061a8b40a3d5c669c59881eee82029ce5eafc4c811177785 -->