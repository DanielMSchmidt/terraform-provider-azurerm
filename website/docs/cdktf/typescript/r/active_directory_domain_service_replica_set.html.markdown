---
subcategory: "Active Directory Domain Services"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_active_directory_domain_service_replica_set"
description: |-
  Manages a Replica Set for an Active Directory Domain Service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_active_directory_domain_service_replica_set

Manages a Replica Set for an Active Directory Domain Service.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
import * as azuread from "./.gen/providers/azuread";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
    For a more precise conversion please use the --provider flag in convert.*/
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azureadGroupDcAdmins = new azuread.group.Group(this, "dc_admins", {
      display_name: "aad-dc-administrators",
      security_enabled: true,
    });
    const azureadServicePrincipalExample =
      new azuread.servicePrincipal.ServicePrincipal(this, "example", {
        application_id: "2565bd9d-da50-47d4-8b85-4c97f669dc36",
      });
    const azureadUserAdmin = new azuread.user.User(this, "admin", {
      display_name: "DC Administrator",
      password: "Pa55w0Rd!!1",
      user_principal_name: "dc-admin@hashicorp-example.net",
    });
    const azurermResourceGroupAadds = new azurerm.resourceGroup.ResourceGroup(
      this,
      "aadds",
      {
        location: "westeurope",
        name: "aadds-rg",
      }
    );
    const azurermResourceGroupPrimary = new azurerm.resourceGroup.ResourceGroup(
      this,
      "primary",
      {
        location: "West Europe",
        name: "aadds-primary-rg",
      }
    );
    const azurermResourceGroupReplica = new azurerm.resourceGroup.ResourceGroup(
      this,
      "replica",
      {
        location: "North Europe",
        name: "aadds-replica-rg",
      }
    );
    const azurermVirtualNetworkPrimary =
      new azurerm.virtualNetwork.VirtualNetwork(this, "primary_7", {
        addressSpace: ["10.0.1.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "aadds-primary-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupPrimary.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPrimary.overrideLogicalId("primary");
    const azurermVirtualNetworkReplica =
      new azurerm.virtualNetwork.VirtualNetwork(this, "replica_8", {
        addressSpace: ["10.20.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupReplica.location),
        name: "aadds-replica-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupReplica.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkReplica.overrideLogicalId("replica");
    const azurermVirtualNetworkPeeringPrimaryReplica =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "primary_replica",
        {
          allowForwardedTraffic: true,
          allowGatewayTransit: false,
          allowVirtualNetworkAccess: true,
          name: "aadds-primary-replica",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkReplica.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermVirtualNetworkPrimary.resourceGroupName
          ),
          useRemoteGateways: false,
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkPrimary.name
          ),
        }
      );
    const azurermVirtualNetworkPeeringReplicaPrimary =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "replica_primary",
        {
          allowForwardedTraffic: true,
          allowGatewayTransit: false,
          allowVirtualNetworkAccess: true,
          name: "aadds-replica-primary",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkPrimary.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermVirtualNetworkReplica.resourceGroupName
          ),
          useRemoteGateways: false,
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkReplica.name
          ),
        }
      );
    const azureadGroupMemberAdmin = new azuread.groupMember.GroupMember(
      this,
      "admin_11",
      {
        group_object_id: azureadGroupDcAdmins.objectId,
        member_object_id: azureadUserAdmin.objectId,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azureadGroupMemberAdmin.overrideLogicalId("admin");
    const azurermNetworkSecurityGroupAaddsReplica =
      new azurerm.networkSecurityGroup.NetworkSecurityGroup(
        this,
        "aadds_replica",
        {
          location: cdktf.Token.asString(azurermResourceGroupReplica.location),
          name: "aadds-replica-nsg",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupReplica.name
          ),
          securityRule: [
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "443",
              direction: "Inbound",
              name: "AllowSyncWithAzureAD",
              priority: 101,
              protocol: "Tcp",
              sourceAddressPrefix: "AzureActiveDirectoryDomainServices",
              sourcePortRange: "*",
            },
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "3389",
              direction: "Inbound",
              name: "AllowRD",
              priority: 201,
              protocol: "Tcp",
              sourceAddressPrefix: "CorpNetSaw",
              sourcePortRange: "*",
            },
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "5986",
              direction: "Inbound",
              name: "AllowPSRemoting",
              priority: 301,
              protocol: "Tcp",
              sourceAddressPrefix: "AzureActiveDirectoryDomainServices",
              sourcePortRange: "*",
            },
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "636",
              direction: "Inbound",
              name: "AllowLDAPS",
              priority: 401,
              protocol: "Tcp",
              sourceAddressPrefix: "*",
              sourcePortRange: "*",
            },
          ],
        }
      );
    const azurermNetworkSecurityGroupPrimary =
      new azurerm.networkSecurityGroup.NetworkSecurityGroup(
        this,
        "primary_13",
        {
          location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
          name: "aadds-primary-nsg",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupPrimary.name
          ),
          securityRule: [
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "443",
              direction: "Inbound",
              name: "AllowSyncWithAzureAD",
              priority: 101,
              protocol: "Tcp",
              sourceAddressPrefix: "AzureActiveDirectoryDomainServices",
              sourcePortRange: "*",
            },
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "3389",
              direction: "Inbound",
              name: "AllowRD",
              priority: 201,
              protocol: "Tcp",
              sourceAddressPrefix: "CorpNetSaw",
              sourcePortRange: "*",
            },
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "5986",
              direction: "Inbound",
              name: "AllowPSRemoting",
              priority: 301,
              protocol: "Tcp",
              sourceAddressPrefix: "AzureActiveDirectoryDomainServices",
              sourcePortRange: "*",
            },
            {
              access: "Allow",
              destinationAddressPrefix: "*",
              destinationPortRange: "636",
              direction: "Inbound",
              name: "AllowLDAPS",
              priority: 401,
              protocol: "Tcp",
              sourceAddressPrefix: "*",
              sourcePortRange: "*",
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkSecurityGroupPrimary.overrideLogicalId("primary");
    const azurermSubnetAaddsReplica = new azurerm.subnet.Subnet(
      this,
      "aadds_replica_14",
      {
        addressPrefixes: ["10.20.0.0/24"],
        name: "aadds-replica-subnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupReplica.name
        ),
        virtualNetworkName: cdktf.Token.asString(
          azurermVirtualNetworkReplica.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetAaddsReplica.overrideLogicalId("aadds_replica");
    const azurermSubnetPrimary = new azurerm.subnet.Subnet(this, "primary_15", {
      addressPrefixes: ["10.0.1.0/24"],
      name: "aadds-primary-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupPrimary.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkPrimary.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetPrimary.overrideLogicalId("primary");
    const azurermSubnetNetworkSecurityGroupAssociationPrimary =
      new azurerm.subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociation(
        this,
        "primary_16",
        {
          networkSecurityGroupId: cdktf.Token.asString(
            azurermNetworkSecurityGroupPrimary.id
          ),
          subnetId: cdktf.Token.asString(azurermSubnetPrimary.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetNetworkSecurityGroupAssociationPrimary.overrideLogicalId(
      "primary"
    );
    const azurermSubnetNetworkSecurityGroupAssociationReplica =
      new azurerm.subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociation(
        this,
        "replica_17",
        {
          networkSecurityGroupId: cdktf.Token.asString(
            azurermNetworkSecurityGroupAaddsReplica.id
          ),
          subnetId: cdktf.Token.asString(azurermSubnetAaddsReplica.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetNetworkSecurityGroupAssociationReplica.overrideLogicalId(
      "replica"
    );
    const azurermActiveDirectoryDomainServiceExample =
      new azurerm.activeDirectoryDomainService.ActiveDirectoryDomainService(
        this,
        "example_18",
        {
          dependsOn: [
            azureadServicePrincipalExample,
            azurermSubnetNetworkSecurityGroupAssociationPrimary,
          ],
          domainName: "widgetslogin.net",
          filteredSyncEnabled: false,
          initialReplicaSet: {
            location: cdktf.Token.asString(
              azurermVirtualNetworkPrimary.location
            ),
            subnetId: cdktf.Token.asString(azurermSubnetPrimary.id),
          },
          location: cdktf.Token.asString(azurermResourceGroupAadds.location),
          name: "example-aadds",
          notifications: {
            additionalRecipients: [
              "notifyA@example.net",
              "notifyB@example.org",
            ],
            notifyDcAdmins: true,
            notifyGlobalAdmins: true,
          },
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupAadds.name
          ),
          security: {
            syncKerberosPasswords: true,
            syncNtlmPasswords: true,
            syncOnPremPasswords: true,
          },
          sku: "Enterprise",
          tags: {
            Environment: "prod",
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermActiveDirectoryDomainServiceExample.overrideLogicalId("example");
    const azurermActiveDirectoryDomainServiceReplicaSetReplica =
      new azurerm.activeDirectoryDomainServiceReplicaSet.ActiveDirectoryDomainServiceReplicaSet(
        this,
        "replica_19",
        {
          dependsOn: [
            azurermSubnetNetworkSecurityGroupAssociationReplica,
            azurermVirtualNetworkPeeringPrimaryReplica,
            azurermVirtualNetworkPeeringReplicaPrimary,
          ],
          domainServiceId: cdktf.Token.asString(
            azurermActiveDirectoryDomainServiceExample.id
          ),
          location: cdktf.Token.asString(azurermResourceGroupReplica.location),
          subnetId: cdktf.Token.asString(azurermSubnetAaddsReplica.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermActiveDirectoryDomainServiceReplicaSetReplica.overrideLogicalId(
      "replica"
    );
    const azurermVirtualNetworkDnsServersReplica =
      new azurerm.virtualNetworkDnsServers.VirtualNetworkDnsServers(
        this,
        "replica_20",
        {
          dnsServers: cdktf.Token.asList(
            cdktf.propertyAccess(
              azurermActiveDirectoryDomainServiceExample.initialReplicaSet,
              ["0", "domain_controller_ip_addresses"]
            )
          ),
          virtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkReplica.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkDnsServersReplica.overrideLogicalId("replica");
  }
}

```

## Argument Reference

The following arguments are supported:

* `domainServiceId` - (Required) The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
  
* `location` - (Required) The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.

* `subnetId` - (Required) The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
  
## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Domain Service Replica Set.
  
* `domainControllerIpAddresses` - A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.

* `externalAccessIpAddress` - The publicly routable IP address for the domain controllers in this Replica Set.

* `serviceStatus` - The current service status for the replica set.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 3 hours) Used when creating the Domain Service.
* `update` - (Defaults to 2 hours) Used when updating the Domain Service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Domain Service.
* `delete` - (Defaults to 60 minutes) Used when deleting the Domain Service.

## Import

Domain Service Replica Sets can be imported using the resource ID of the parent Domain Service and the Replica Set ID, e.g.

```shell
terraform import azurerm_active_directory_domain_service_replica_set.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/replicaSets/00000000-0000-0000-0000-000000000000
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ba32aa59f47004ec91391bc2658a5621856b62c99e50ee4e4cabfc9c8a557e53 -->