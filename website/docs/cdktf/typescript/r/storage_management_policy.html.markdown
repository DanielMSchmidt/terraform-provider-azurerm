---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_management_policy"
description: |-
  Manages an Azure Storage Account Management Policy.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_management_policy

Manages an Azure Storage Account Management Policy.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "resourceGroupName",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "BlobStorage",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "storageaccountname",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageManagementPolicyExample =
      new azurerm.storageManagementPolicy.StorageManagementPolicy(
        this,
        "example_2",
        {
          rule: [
            {
              actions: {
                baseBlob: {
                  deleteAfterDaysSinceModificationGreaterThan: 100,
                  tierToArchiveAfterDaysSinceModificationGreaterThan: 50,
                  tierToCoolAfterDaysSinceModificationGreaterThan: 10,
                },
                snapshot: {
                  deleteAfterDaysSinceCreationGreaterThan: 30,
                },
              },
              enabled: true,
              filters: {
                blobTypes: ["blockBlob"],
                matchBlobIndexTag: [
                  {
                    name: "tag1",
                    operation: "==",
                    value: "val1",
                  },
                ],
                prefixMatch: ["container1/prefix1"],
              },
              name: "rule1",
            },
            {
              actions: {
                baseBlob: {
                  deleteAfterDaysSinceModificationGreaterThan: 101,
                  tierToArchiveAfterDaysSinceModificationGreaterThan: 51,
                  tierToCoolAfterDaysSinceModificationGreaterThan: 11,
                },
                snapshot: {
                  changeTierToArchiveAfterDaysSinceCreation: 90,
                  changeTierToCoolAfterDaysSinceCreation: 23,
                  deleteAfterDaysSinceCreationGreaterThan: 31,
                },
                version: {
                  changeTierToArchiveAfterDaysSinceCreation: 9,
                  changeTierToCoolAfterDaysSinceCreation: 90,
                  deleteAfterDaysSinceCreation: 3,
                },
              },
              enabled: false,
              filters: {
                blobTypes: ["blockBlob"],
                prefixMatch: ["container2/prefix1", "container2/prefix2"],
              },
              name: "rule2",
            },
          ],
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageManagementPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `storageAccountId` - (Required) Specifies the id of the storage account to apply the management policy to. Changing this forces a new resource to be created.

* `rule` - (Optional) A `rule` block as documented below.

---

The `rule` block supports the following:

* `name` - (Required) The name of the rule. Rule name is case-sensitive. It must be unique within a policy.
* `enabled` - (Required) Boolean to specify whether the rule is enabled.
* `filters` - (Required) A `filters` block as documented below.
* `actions` - (Required) An `actions` block as documented below.

---

The `filters` block supports the following:

* `blobTypes` - (Required) An array of predefined values. Valid options are `blockBlob` and `appendBlob`.
* `prefixMatch` - (Optional) An array of strings for prefixes to be matched.
* `matchBlobIndexTag` - (Optional) A `matchBlobIndexTag` block as defined below. The block defines the blob index tag based filtering for blob objects.

~> **NOTE:** The `matchBlobIndexTag` property requires enabling the `blobIndex` feature with [PSH or CLI commands](https://azure.microsoft.com/en-us/blog/manage-and-find-data-with-blob-index-for-azure-storage-now-in-preview/).

---

The `actions` block supports the following:

* `baseBlob` - (Optional) A `baseBlob` block as documented below.
* `snapshot` - (Optional) A `snapshot` block as documented below.
* `version` - (Optional) A `version` block as documented below.

---

The `baseBlob` block supports the following:

* `tierToCoolAfterDaysSinceModificationGreaterThan` - (Optional) The age in days after last modification to tier blobs to cool storage. Supports blob currently at Hot tier. Must be between 0 and 99999. Defaults to `1`.
* `tierToCoolAfterDaysSinceLastAccessTimeGreaterThan` - (Optional) The age in days after last access time to tier blobs to cool storage. Supports blob currently at Hot tier. Must be between `0` and `99999`. Defaults to `1`.
* `tierToCoolAfterDaysSinceCreationGreaterThan` - (Optional) The age in days after creation to cool storage. Supports blob currently at Hot tier. Must be between `0` and `99999`. Defaults to `1`.

~> **Note:** The `tierToCoolAfterDaysSinceModificationGreaterThan`, `tierToCoolAfterDaysSinceLastAccessTimeGreaterThan` and `tierToCoolAfterDaysSinceCreationGreaterThan` can not be set at the same time.

* `autoTierToHotFromCoolEnabled` - (Optional) Whether a blob should automatically be tiered from cool back to hot if it's accessed again after being tiered to cool. Defaults to `false`.

~> **Note:** The `autoTierToHotFromCoolEnabled` must be used together with `tierToCoolAfterDaysSinceLastAccessTimeGreaterThan`.

* `tierToArchiveAfterDaysSinceModificationGreaterThan` - (Optional) The age in days after last modification to tier blobs to archive storage. Supports blob currently at Hot or Cool tier. Must be between 0 and 99999. Defaults to `1`.
* `tierToArchiveAfterDaysSinceLastAccessTimeGreaterThan` - (Optional) The age in days after last access time to tier blobs to archive storage. Supports blob currently at Hot or Cool tier. Must be between `0` and`99999`. Defaults to `1`.
* `tierToArchiveAfterDaysSinceCreationGreaterThan` - (Optional) The age in days after creation to archive storage. Supports blob currently at Hot or Cool tier. Must be between `0` and`99999`. Defaults to `1`.

~> **Note:** The `tierToArchiveAfterDaysSinceModificationGreaterThan`, `tierToArchiveAfterDaysSinceLastAccessTimeGreaterThan` and `tierToArchiveAfterDaysSinceCreationGreaterThan` can not be set at the same time.

* `tierToArchiveAfterDaysSinceLastTierChangeGreaterThan` - (Optional) The age in days after last tier change to the blobs to skip to be archved. Must be between 0 and 99999. Defaults to `1`.

* `deleteAfterDaysSinceModificationGreaterThan` - (Optional) The age in days after last modification to delete the blob. Must be between 0 and 99999. Defaults to `1`.
* `deleteAfterDaysSinceLastAccessTimeGreaterThan` - (Optional) The age in days after last access time to delete the blob. Must be between `0` and `99999`. Defaults to `1`.
* `deleteAfterDaysSinceCreationGreaterThan` - (Optional) The age in days after creation to delete the blob. Must be between `0` and `99999`. Defaults to `1`.

~> **Note:** The `deleteAfterDaysSinceModificationGreaterThan`, `deleteAfterDaysSinceLastAccessTimeGreaterThan` and `deleteAfterDaysSinceCreationGreaterThan` can not be set at the same time.

~> **Note:** The [`lastAccessTimeEnabled`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#last_access_time_enabled) must be set to `true` in the `azurermStorageAccount` in order to use `tierToCoolAfterDaysSinceLastAccessTimeGreaterThan`, `tierToArchiveAfterDaysSinceLastAccessTimeGreaterThan` and `deleteAfterDaysSinceLastAccessTimeGreaterThan`.

---

The `snapshot` block supports the following:

* `changeTierToArchiveAfterDaysSinceCreation` - (Optional) The age in days after creation to tier blob snapshot to archive storage. Must be between 0 and 99999. Defaults to `1`.
* `tierToArchiveAfterDaysSinceLastTierChangeGreaterThan` - (Optional) The age in days after last tier change to the blobs to skip to be archved. Must be between 0 and 99999. Defaults to `1`.
* `changeTierToCoolAfterDaysSinceCreation` - (Optional) The age in days after creation to tier blob snapshot to cool storage. Must be between 0 and 99999. Defaults to `1`.
* `deleteAfterDaysSinceCreationGreaterThan` - (Optional) The age in days after creation to delete the blob snapshot. Must be between 0 and 99999. Defaults to `1`.

---

The `version` block supports the following:

* `changeTierToArchiveAfterDaysSinceCreation` - (Optional) The age in days after creation to tier blob version to archive storage. Must be between 0 and 99999. Defaults to `1`.
* `tierToArchiveAfterDaysSinceLastTierChangeGreaterThan` - (Optional) The age in days after last tier change to the blobs to skip to be archved. Must be between 0 and 99999. Defaults to `1`.
* `changeTierToCoolAfterDaysSinceCreation` - (Optional) The age in days creation create to tier blob version to cool storage. Must be between 0 and 99999. Defaults to `1`.
* `deleteAfterDaysSinceCreation` - (Optional) The age in days after creation to delete the blob version. Must be between 0 and 99999. Defaults to `1`.

---

The `matchBlobIndexTag` block supports the following:

* `name` - (Required) The filter tag name used for tag based filtering for blob objects.
* `operation` - (Optional) The comparison operator which is used for object comparison and filtering. Possible value is `==`. Defaults to `==`.
* `value` - (Required) The filter tag value used for tag based filtering for blob objects.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Account Management Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Account Management Policy.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Account Management Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Account Management Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Account Management Policy.

## Import

Storage Account Management Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_management_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Storage/storageAccounts/myaccountname/managementPolicies/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-29e3e169c16affaa2a2aa026fa341e5c6f74b67f4b38dc3478bafea6bfccea2b -->