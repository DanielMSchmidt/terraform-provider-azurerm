---
subcategory: "Container"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_container_registry_token"
description: |-
  Manages an Azure Container Registry token.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_container_registry_token

Manages an Azure Container Registry token. Tokens are a preview feature only available in Premium SKU Container registries.

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resource-group",
      }
    );
    const azurermContainerRegistryExample =
      new azurerm.containerRegistry.ContainerRegistry(this, "example_1", {
        adminEnabled: false,
        georeplications: [
          {
            location: "East US",
          },
          {
            location: "West Europe",
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Premium",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermContainerRegistryExample.overrideLogicalId("example");
    const azurermContainerRegistryScopeMapExample =
      new azurerm.containerRegistryScopeMap.ContainerRegistryScopeMap(
        this,
        "example_2",
        {
          actions: [
            "repositories/repo1/content/read",
            "repositories/repo1/content/write",
          ],
          containerRegistryName: cdktf.Token.asString(
            azurermContainerRegistryExample.name
          ),
          name: "example-scope-map",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermContainerRegistryScopeMapExample.overrideLogicalId("example");
    const azurermContainerRegistryTokenExample =
      new azurerm.containerRegistryToken.ContainerRegistryToken(
        this,
        "example_3",
        {
          containerRegistryName: cdktf.Token.asString(
            azurermContainerRegistryExample.name
          ),
          name: "exampletoken",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          scopeMapId: cdktf.Token.asString(
            azurermContainerRegistryScopeMapExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermContainerRegistryTokenExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the token. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.

* `containerRegistryName` - (Required) The name of the Container Registry. Changing this forces a new resource to be created.

* `scopeMapId` - (Required) The ID of the Container Registry Scope Map associated with the token.

* `enabled` - (Optional) Should the Container Registry token be enabled? Defaults to `true`.

---

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Container Registry token.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Container Registry token.
* `update` - (Defaults to 30 minutes) Used when updating the Container Registry token.
* `read` - (Defaults to 5 minutes) Used when retrieving the Container Registry token.
* `delete` - (Defaults to 30 minutes) Used when deleting the Container Registry token.

## Import

Container Registries can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_container_registry_token.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1/tokens/token1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b38741d2507a8cb9480811ee2617ffa7717f77c6de31888682f6c392c72a4f27 -->