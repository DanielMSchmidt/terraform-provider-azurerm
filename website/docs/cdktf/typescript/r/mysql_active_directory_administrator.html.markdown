---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mysql_active_directory_administrator"
description: |-
  Manages an Active Directory administrator on a MySQL server
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mysql_active_directory_administrator

Allows you to set a user or group as the AD administrator for an MySQL server in Azure

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermMysqlServerExample = new azurerm.mysqlServer.MysqlServer(
      this,
      "example_2",
      {
        administratorLogin: "mysqladminun",
        administratorLoginPassword: "H@Sh1CoR3!",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-mysqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "B_Gen5_2",
        sslEnforcementEnabled: true,
        storageMb: 5120,
        version: "5.7",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlServerExample.overrideLogicalId("example");
    const azurermMysqlActiveDirectoryAdministratorExample =
      new azurerm.mysqlActiveDirectoryAdministrator.MysqlActiveDirectoryAdministrator(
        this,
        "example_3",
        {
          login: "sqladmin",
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          serverName: cdktf.Token.asString(azurermMysqlServerExample.name),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlActiveDirectoryAdministratorExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `serverName` - (Required) The name of the MySQL Server on which to set the administrator. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group for the MySQL server. Changing this forces a new resource to be created.

* `login` - (Required) The login name of the principal to set as the server administrator

* `objectId` - (Required) The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.

* `tenantId` - (Required) The Azure Tenant ID

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MySQL Active Directory Administrator.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the MySQL Active Directory Administrator.
* `update` - (Defaults to 30 minutes) Used when updating the MySQL Active Directory Administrator.
* `read` - (Defaults to 5 minutes) Used when retrieving the MySQL Active Directory Administrator.
* `delete` - (Defaults to 30 minutes) Used when deleting the MySQL Active Directory Administrator.

## Import

A MySQL Active Directory Administrator can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mysql_active_directory_administrator.administrator /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.DBforMySQL/servers/myserver/administrators/activeDirectory
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b5ae3237931cf6537477fcae6de6605404c334fa4163ad19736fb97b8c09541a -->