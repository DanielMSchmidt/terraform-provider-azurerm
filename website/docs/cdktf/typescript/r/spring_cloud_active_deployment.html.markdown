---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_active_deployment"
description: |-
  Manages an Active Azure Spring Cloud Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_active_deployment

Manages an Active Azure Spring Cloud Deployment.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-springcloud",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermSpringCloudAppExample =
      new azurerm.springCloudApp.SpringCloudApp(this, "example_3", {
        identity: {
          type: "SystemAssigned",
        },
        name: "example-springcloudapp",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serviceName: cdktf.Token.asString(
          azurermSpringCloudServiceExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppExample.overrideLogicalId("example");
    const azurermSpringCloudJavaDeploymentExample =
      new azurerm.springCloudJavaDeployment.SpringCloudJavaDeployment(
        this,
        "example_4",
        {
          environmentVariables: {
            Env: "Staging",
          },
          instanceCount: 2,
          jvmOptions: "-XX:+PrintGC",
          name: "deploy1",
          quota: {
            cpu: "2",
            memory: "4Gi",
          },
          runtimeVersion: "Java_11",
          springCloudAppId: cdktf.Token.asString(
            azurermSpringCloudAppExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudJavaDeploymentExample.overrideLogicalId("example");
    const azurermSpringCloudActiveDeploymentExample =
      new azurerm.springCloudActiveDeployment.SpringCloudActiveDeployment(
        this,
        "example_5",
        {
          deploymentName: cdktf.Token.asString(
            azurermSpringCloudJavaDeploymentExample.name
          ),
          springCloudAppId: cdktf.Token.asString(
            azurermSpringCloudAppExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudActiveDeploymentExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `springCloudAppId` - (Required) Specifies the id of the Spring Cloud Application. Changing this forces a new resource to be created.

* `deploymentName` - (Required) Specifies the name of Spring Cloud Deployment which is going to be active.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Active Deployment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Active Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Active Deployment.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Active Deployment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Active Deployment.

## Import

Spring Cloud Active Deployment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_active_deployment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/service1/apps/app1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-be239697c50f0c1f7f3a0b0421a46584fb7c6e4341c238e24be107d524671e5f -->