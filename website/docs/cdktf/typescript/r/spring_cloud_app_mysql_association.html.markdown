---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_app_mysql_association"
description: |-
  Associates a [Spring Cloud Application](spring_cloud_app.html) with a [MySQL Database](mysql_database.html).
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_app_mysql_association

Associates a [Spring Cloud Application](spring_cloud_app.html) with a [MySQL Database](mysql_database.html).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_1", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-springcloud",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermMysqlServerExample = new azurerm.mysqlServer.MysqlServer(
      this,
      "example_2",
      {
        administratorLogin: "mysqladminun",
        administratorLoginPassword: "H@Sh1CoR3!",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-mysqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "B_Gen5_2",
        sslEnforcementEnabled: true,
        sslMinimalTlsVersionEnforced: "TLS1_2",
        storageMb: 5120,
        version: "5.7",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlServerExample.overrideLogicalId("example");
    const azurermSpringCloudAppExample =
      new azurerm.springCloudApp.SpringCloudApp(this, "example_3", {
        name: "example-springcloudapp",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serviceName: cdktf.Token.asString(
          azurermSpringCloudServiceExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppExample.overrideLogicalId("example");
    const azurermMysqlDatabaseExample = new azurerm.mysqlDatabase.MysqlDatabase(
      this,
      "example_4",
      {
        charset: "utf8",
        collation: "utf8_unicode_ci",
        name: "exampledb",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermMysqlServerExample.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlDatabaseExample.overrideLogicalId("example");
    const azurermSpringCloudAppMysqlAssociationExample =
      new azurerm.springCloudAppMysqlAssociation.SpringCloudAppMysqlAssociation(
        this,
        "example_5",
        {
          databaseName: cdktf.Token.asString(azurermMysqlDatabaseExample.name),
          mysqlServerId: cdktf.Token.asString(azurermMysqlServerExample.id),
          name: "example-bind",
          password: cdktf.Token.asString(
            azurermMysqlServerExample.administratorLoginPassword
          ),
          springCloudAppId: cdktf.Token.asString(
            azurermSpringCloudAppExample.id
          ),
          username: cdktf.Token.asString(
            azurermMysqlServerExample.administratorLogin
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppMysqlAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.

* `springCloudAppId` - (Required) Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.

* `mysqlServerId` - (Required) Specifies the ID of the MySQL Server. Changing this forces a new resource to be created.

* `databaseName` - (Required) Specifies the name of the MySQL Database which the Spring Cloud App should be associated with.

* `username` - (Required) Specifies the username which should be used when connecting to the MySQL Database from the Spring Cloud App.

* `password` - (Required) Specifies the password which should be used when connecting to the MySQL Database from the Spring Cloud App.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Application MySQL Association.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Application MySQL Association.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Application MySQL Association.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Application MySQL Association.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Application MySQL Association.

## Import

Spring Cloud Application MySQL Association can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_app_mysql_association.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/service1/apps/app1/bindings/bind1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e9c5f7ab68b102ef271e93a85ed321cf3f7b91ee90e63468c20501313f5e628d -->