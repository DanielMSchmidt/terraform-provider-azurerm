---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_postgresql_flexible_server_configuration"
description: |-
  Sets a PostgreSQL Configuration value on a Azure PostgreSQL Flexible Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_postgresql_flexible_server_configuration

Sets a PostgreSQL Configuration value on a Azure PostgreSQL Flexible Server.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermPostgresqlFlexibleServerExample =
      new azurerm.postgresqlFlexibleServer.PostgresqlFlexibleServer(
        this,
        "example_2",
        {
          administratorLogin: "psqladmin",
          administratorPassword: "H@Sh1CoR3!",
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-psqlflexibleserver",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          skuName: "GP_Standard_D4s_v3",
          storageMb: 32768,
          version: "12",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlFlexibleServerExample.overrideLogicalId("example");
    const azurermPostgresqlFlexibleServerConfigurationExample =
      new azurerm.postgresqlFlexibleServerConfiguration.PostgresqlFlexibleServerConfiguration(
        this,
        "example_3",
        {
          name: "backslash_quote",
          serverId: cdktf.Token.asString(
            azurermPostgresqlFlexibleServerExample.id
          ),
          value: "on",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlFlexibleServerConfigurationExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Example Usage - Azure Extensions

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermPostgresqlFlexibleServerExample =
      new azurerm.postgresqlFlexibleServer.PostgresqlFlexibleServer(
        this,
        "example_2",
        {
          administratorLogin: "psqladmin",
          administratorPassword: "H@Sh1CoR3!",
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-psqlflexibleserver",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          skuName: "GP_Standard_D4s_v3",
          storageMb: 32768,
          version: "12",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlFlexibleServerExample.overrideLogicalId("example");
    const azurermPostgresqlFlexibleServerConfigurationExample =
      new azurerm.postgresqlFlexibleServerConfiguration.PostgresqlFlexibleServerConfiguration(
        this,
        "example_3",
        {
          name: "azure.extensions",
          serverId: cdktf.Token.asString(
            azurermPostgresqlFlexibleServerExample.id
          ),
          value: "CUBE,CITEXT,BTREE_GIST",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlFlexibleServerConfigurationExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the PostgreSQL Configuration, which needs [to be a valid PostgreSQL configuration name](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER). Changing this forces a new resource to be created.

-> **Note:** PostgreSQL provides the ability to extend the functionality using azure extensions, with PostgreSQL azure extensions you should specify the `name` value as `azureExtensions` and the `value` you wish to allow in the [extensions list](https://docs.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-extensions?WT.mc_id=Portal-Microsoft_Azure_OSSDatabases#postgres-13-extensions).

* `serverId` - (Required) The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.

* `value` - (Required) Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the PostgreSQL Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the PostgreSQL Configuration.
* `update` - (Defaults to 30 minutes) Used when updating the PostgreSQL Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the PostgreSQL Configuration.
* `delete` - (Defaults to 30 minutes) Used when deleting the PostgreSQL Configuration.

## Import

PostgreSQL Configurations can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_postgresql_flexible_server_configuration.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/server1/configurations/configuration1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-853b39312279a1643e973e46e986d2bf4bbc4c64b302e697e41f2d8f1077e09e -->