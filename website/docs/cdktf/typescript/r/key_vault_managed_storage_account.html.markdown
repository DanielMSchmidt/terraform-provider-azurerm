---
subcategory: "Key Vault"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_key_vault_managed_storage_account"
description: |-
  Manages a Key Vault Managed Storage Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_key_vault_managed_storage_account

Manages a Key Vault Managed Storage Account.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "storageaccountname",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_3",
      {
        accessPolicy: [
          {
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            secretPermissions: ["Get", "Delete"],
            storagePermissions: [
              "Get",
              "List",
              "Set",
              "SetSAS",
              "GetSAS",
              "DeleteSAS",
              "Update",
              "RegenerateKey",
            ],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "keyvaultname",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultManagedStorageAccountExample =
      new azurerm.keyVaultManagedStorageAccount.KeyVaultManagedStorageAccount(
        this,
        "example_4",
        {
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          name: "examplemanagedstorage",
          regenerateKeyAutomatically: false,
          regenerationPeriod: "P1D",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
          storageAccountKey: "key1",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultManagedStorageAccountExample.overrideLogicalId("example");
  }
}

```

## Example Usage (automatically regenerate Storage Account access key)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
import * as azuread from "./.gen/providers/azuread";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
    For a more precise conversion please use the --provider flag in convert.*/
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "storageaccountname",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const dataAzureadServicePrincipalTest =
      new azuread.dataAzureadServicePrincipal.DataAzureadServicePrincipal(
        this,
        "test",
        {
          application_id: "cfa8b339-82a2-471a-a3c9-0fc0be7a4093",
        }
      );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_4",
      {
        accessPolicy: [
          {
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            secretPermissions: ["Get", "Delete"],
            storagePermissions: [
              "Get",
              "List",
              "Set",
              "SetSAS",
              "GetSAS",
              "DeleteSAS",
              "Update",
              "RegenerateKey",
            ],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "keyvaultname",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermRoleAssignmentExample =
      new azurerm.roleAssignment.RoleAssignment(this, "example_5", {
        principalId: cdktf.Token.asString(dataAzureadServicePrincipalTest.id),
        roleDefinitionName: "Storage Account Key Operator Service Role",
        scope: cdktf.Token.asString(azurermStorageAccountExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRoleAssignmentExample.overrideLogicalId("example");
    const azurermKeyVaultManagedStorageAccountExample =
      new azurerm.keyVaultManagedStorageAccount.KeyVaultManagedStorageAccount(
        this,
        "example_6",
        {
          dependsOn: [azurermRoleAssignmentExample],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          name: "examplemanagedstorage",
          regenerateKeyAutomatically: true,
          regenerationPeriod: "P1D",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
          storageAccountKey: "key1",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultManagedStorageAccountExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.

* `keyVaultId` - (Required) The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.

* `storageAccountId` - (Required) The ID of the Storage Account.

* `storageAccountKey` - (Required) Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.

---

* `regenerateKeyAutomatically` - (Optional) Should Storage Account access key be regenerated periodically?

~> **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.

* `regenerationPeriod` - (Optional) How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).

* `tags` - (Optional) A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Key Vault Managed Storage Account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Key Vault Managed Storage Account.
* `read` - (Defaults to 5 minutes) Used when retrieving the Key Vault Managed Storage Account.
* `update` - (Defaults to 30 minutes) Used when updating the Key Vault Managed Storage Account.
* `delete` - (Defaults to 30 minutes) Used when deleting the Key Vault Managed Storage Account.

## Import

Key Vault Managed Storage Accounts can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_key_vault_managed_storage_account.example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b270d847ab44417f44e10149808cb507e088f32d17b0000407462666e3b05530 -->