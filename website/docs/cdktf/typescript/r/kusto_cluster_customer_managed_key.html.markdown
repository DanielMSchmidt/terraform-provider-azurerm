---
subcategory: "Data Explorer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_kusto_cluster_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a Kusto Cluster.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_kusto_cluster_customer_managed_key

Manages a Customer Managed Key for a Kusto Cluster.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_2",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplekv",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyClient =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "client", {
        keyPermissions: [
          "Get",
          "List",
          "Create",
          "Delete",
          "Recover",
          "GetRotationPolicy",
        ],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(dataAzurermClientConfigCurrent.objectId),
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermKustoClusterExample = new azurerm.kustoCluster.KustoCluster(
      this,
      "example_4",
      {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "kustocluster",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          capacity: 2,
          name: "Standard_D13_v2",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKustoClusterExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyCluster =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "cluster", {
        keyPermissions: ["Get", "UnwrapKey", "WrapKey"],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermKustoClusterExample.identity, [
            "0",
            "principal_id",
          ])
        ),
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_6",
      {
        dependsOn: [
          azurermKeyVaultAccessPolicyClient,
          azurermKeyVaultAccessPolicyCluster,
        ],
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "tfex-key",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermKustoClusterCustomerManagedKeyExample =
      new azurerm.kustoClusterCustomerManagedKey.KustoClusterCustomerManagedKey(
        this,
        "example_7",
        {
          clusterId: cdktf.Token.asString(azurermKustoClusterExample.id),
          keyName: cdktf.Token.asString(azurermKeyVaultKeyExample.name),
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          keyVersion: cdktf.Token.asString(azurermKeyVaultKeyExample.version),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKustoClusterCustomerManagedKeyExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `clusterId` - (Required) The ID of the Kusto Cluster. Changing this forces a new resource to be created.

* `keyVaultId` - (Required) The ID of the Key Vault. 

* `keyName` - (Required) The name of Key Vault Key.

* `keyVersion` - (Optional) The version of Key Vault Key.

* `userIdentity` - (Optional) The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Kusto Cluster.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Kusto Cluster Customer Managed Key.
* `read` - (Defaults to 5 minutes) Used when retrieving the Kusto Cluster Customer Managed Key.
* `update` - (Defaults to 30 minutes) Used when updating the Kusto Cluster Customer Managed Key.
* `delete` - (Defaults to 30 minutes) Used when deleting the Kusto Cluster Customer Managed Key.

## Import

Customer Managed Keys for a Kusto Cluster can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_kusto_cluster_customer_managed_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-226ee0cc9db49fdef4a7102b1b5a656cc85811025a8ab4fa4f04f8073746a2ed -->