---
subcategory: "Nginx"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_nginx_configuration"
description: |-
  Manages the configuration for a Nginx Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_nginx_configuration

Manages the configuration for a Nginx Deployment.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-rg",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_2",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
        tags: {
          environment: "Production",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.0.2.0/24"],
      delegation: [
        {
          name: "delegation",
          serviceDelegation: {
            actions: ["Microsoft.Network/virtualNetworks/subnets/join/action"],
            name: "NGINX.NGINXPLUS/nginxDeployments",
          },
        },
      ],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermNginxDeploymentExample =
      new azurerm.nginxDeployment.NginxDeployment(this, "example_4", {
        diagnoseSupportEnabled: true,
        frontendPublic: {
          ipAddress: [cdktf.Token.asString(azurermPublicIpExample.id)],
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        managedResourceGroup: "example",
        name: "example-nginx",
        networkInterface: [
          {
            subnetId: cdktf.Token.asString(azurermSubnetExample.id),
          },
        ],
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "publicpreview_Monthly_gmz7xq9ge3py",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNginxDeploymentExample.overrideLogicalId("example");
    const azurermNginxConfigurationExample =
      new azurerm.nginxConfiguration.NginxConfiguration(this, "example_5", {
        configFile: [
          {
            content: cdktf.Fn.base64encode(
              "http {\n    server {\n        listen 80;\n        location / {\n            default_type text/html;\n            return 200 '<!doctype html><html lang=\"en\"><head></head><body>\n                <div>this one will be updated</div>\n                <div>at 10:38 am</div>\n            </body></html>';\n        }\n        include site/*.conf;\n    }\n}\n"
            ),
            virtualPath: "/etc/nginx/nginx.conf",
          },
          {
            content: cdktf.Fn.base64encode(
              "location /bbb {\n default_type text/html;\n return 200 '<!doctype html><html lang=\"en\"><head></head><body>\n  <div>this one will be updated</div>\n  <div>at 10:38 am</div>\n </body></html>';\n}\n"
            ),
            virtualPath: "/etc/nginx/site/b.conf",
          },
        ],
        nginxDeploymentId: cdktf.Token.asString(
          azurermNginxDeploymentExample.id
        ),
        rootFile: "/etc/nginx/nginx.conf",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNginxConfigurationExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `nginxDeploymentId` - (Required) The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.

* `rootFile` - (Required) Specify the root file path of this Nginx Configuration.

---

-> **NOTE:** Either `packageData` or `configFile` must be specified - but not both.

* `packageData` - (Optional) Specify the package data for this configuration.

* `configFile` - (Optional) One or more `configFile` blocks as defined below.

* `protectedFile` - (Optional) One or more `protectedFile` (Protected File) blocks with sensitive information as defined below. If specified `configFile` must also be specified.

---

A `configFile` block supports the following:

* `content` - (Required) Specifies the base-64 encoded contents of this config file.

* `virtualPath` - (Required) Specify the path of this config file.

---

A `protectedFile` (Protected File) block supports the following:

* `content` - (Required) Specifies the base-64 encoded contents of this config file (Sensitive).

* `virtualPath` - (Required) Specify the path of this config file.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of this Nginx Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Nginx Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the Nginx Configuration.
* `update` - (Defaults to 10 minutes) Used when updating the Nginx Configuration.
* `delete` - (Defaults to 10 minutes) Used when deleting the Nginx Configuration.

## Import

Nginxs can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_nginx_configuration.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-bba73187369192329a0db0ddee6c0e7d4f0aeabd68e9763f10a3b9c5114b88ab -->