---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_express_route_connection"
description: |-
  Manages an Express Route Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_express_route_connection

Manages an Express Route Connection.

~> **NOTE:** The provider status of the Express Route Circuit must be set as provisioned while creating the Express Route Connection. See more details [here](https://docs.microsoft.com/azure/expressroute/expressroute-howto-circuit-portal-resource-manager#send-the-service-key-to-your-connectivity-provider-for-provisioning).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualWanExample = new azurerm.virtualWan.VirtualWan(
      this,
      "example_1",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vwan",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualWanExample.overrideLogicalId("example");
    const azurermExpressRoutePortExample =
      new azurerm.expressRoutePort.ExpressRoutePort(this, "example_2", {
        bandwidthInGbps: 10,
        encapsulation: "Dot1Q",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-erp",
        peeringLocation: "Equinix-Seattle-SE2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRoutePortExample.overrideLogicalId("example");
    const azurermVirtualHubExample = new azurerm.virtualHub.VirtualHub(
      this,
      "example_3",
      {
        addressPrefix: "10.0.1.0/24",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vhub",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        virtualWanId: cdktf.Token.asString(azurermVirtualWanExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualHubExample.overrideLogicalId("example");
    const azurermExpressRouteCircuitExample =
      new azurerm.expressRouteCircuit.ExpressRouteCircuit(this, "example_4", {
        bandwidthInGbps: 5,
        expressRoutePortId: cdktf.Token.asString(
          azurermExpressRoutePortExample.id
        ),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-erc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          family: "MeteredData",
          tier: "Standard",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitExample.overrideLogicalId("example");
    const azurermExpressRouteCircuitPeeringExample =
      new azurerm.expressRouteCircuitPeering.ExpressRouteCircuitPeering(
        this,
        "example_5",
        {
          expressRouteCircuitName: cdktf.Token.asString(
            azurermExpressRouteCircuitExample.name
          ),
          peerAsn: 100,
          peeringType: "AzurePrivatePeering",
          primaryPeerAddressPrefix: "192.168.1.0/30",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          secondaryPeerAddressPrefix: "192.168.2.0/30",
          sharedKey: "ItsASecret",
          vlanId: 100,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitPeeringExample.overrideLogicalId("example");
    const azurermExpressRouteGatewayExample =
      new azurerm.expressRouteGateway.ExpressRouteGateway(this, "example_6", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-expressroutegateway",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        scaleUnits: 1,
        virtualHubId: cdktf.Token.asString(azurermVirtualHubExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteGatewayExample.overrideLogicalId("example");
    const azurermExpressRouteConnectionExample =
      new azurerm.expressRouteConnection.ExpressRouteConnection(
        this,
        "example_7",
        {
          expressRouteCircuitPeeringId: cdktf.Token.asString(
            azurermExpressRouteCircuitPeeringExample.id
          ),
          expressRouteGatewayId: cdktf.Token.asString(
            azurermExpressRouteGatewayExample.id
          ),
          name: "example-expressrouteconn",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteConnectionExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.

* `expressRouteCircuitPeeringId` - (Required) The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.

* `expressRouteGatewayId` - (Required) The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.

* `authorizationKey` - (Optional) The authorization key to establish the Express Route Connection.

* `enableInternetSecurity` - (Optional) Is Internet security enabled for this Express Route Connection?

* `expressRouteGatewayBypassEnabled` - (Optional) Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.

* `routing` - (Optional) A `routing` block as defined below.

* `routingWeight` - (Optional) The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.

---

A `routing` block supports the following:

* `associatedRouteTableId` - (Optional) The ID of the Virtual Hub Route Table associated with this Express Route Connection.

* `inboundRouteMapId` - (Optional) The ID of the Route Map associated with this Express Route Connection for inbound routes.
 
* `outboundRouteMapId` - (Optional) The ID of the Route Map associated with this Express Route Connection for outbound routes.

* `propagatedRouteTable` - (Optional) A `propagatedRouteTable` block as defined below.

---

A `propagatedRouteTable` block supports the following:

* `labels` - (Optional) The list of labels to logically group route tables.

* `routeTableIds` - (Optional) A list of IDs of the Virtual Hub Route Table to propagate routes from Express Route Connection to the route table.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Express Route Connection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Express Route Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Express Route Connection.
* `update` - (Defaults to 30 minutes) Used when updating the Express Route Connection.
* `delete` - (Defaults to 30 minutes) Used when deleting the Express Route Connection.

## Import

Express Route Connections can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_express_route_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRouteGateways/expressRouteGateway1/expressRouteConnections/connection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-87dc42039930c77f1b59e706573eb00b01ccdbfc84ff2e81099d944f03f05b4c -->