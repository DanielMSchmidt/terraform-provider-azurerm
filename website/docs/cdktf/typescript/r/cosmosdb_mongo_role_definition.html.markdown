---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_mongo_role_definition"
description: |-
  Manages a Cosmos DB Mongo Role Definition.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_mongo_role_definition

Manages a Cosmos DB Mongo Role Definition.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermCosmosdbAccountExample =
      new azurerm.cosmosdbAccount.CosmosdbAccount(this, "example_1", {
        capabilities: [
          {
            name: "EnableMongo",
          },
          {
            name: "EnableMongoRoleBasedAccessControl",
          },
        ],
        consistencyPolicy: {
          consistencyLevel: "Strong",
        },
        geoLocation: [
          {
            failoverPriority: 0,
            location: cdktf.Token.asString(
              azurermResourceGroupExample.location
            ),
          },
        ],
        kind: "MongoDB",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-ca",
        offerType: "Standard",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbAccountExample.overrideLogicalId("example");
    const azurermCosmosdbMongoDatabaseExample =
      new azurerm.cosmosdbMongoDatabase.CosmosdbMongoDatabase(
        this,
        "example_2",
        {
          accountName: cdktf.Token.asString(azurermCosmosdbAccountExample.name),
          name: "example-mongodb",
          resourceGroupName: cdktf.Token.asString(
            azurermCosmosdbAccountExample.resourceGroupName
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbMongoDatabaseExample.overrideLogicalId("example");
    const azurermCosmosdbMongoRoleDefinitionExample =
      new azurerm.cosmosdbMongoRoleDefinition.CosmosdbMongoRoleDefinition(
        this,
        "example_3",
        {
          cosmosMongoDatabaseId: cdktf.Token.asString(
            azurermCosmosdbMongoDatabaseExample.id
          ),
          roleName: "example-roledefinition",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbMongoRoleDefinitionExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `cosmosMongoDatabaseId` - (Required) The resource ID of the Mongo DB. Changing this forces a new resource to be created.

* `roleName` - (Required) The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.

* `inheritedRoleNames` - (Optional) A list of Mongo Roles which are inherited to the Mongo Role Definition.

~> **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmosMongoDatabaseId`.

* `privilege` - (Optional) A `privilege` block as defined below.

---

A `privilege` block supports the following:

* `actions` - (Required) A list of actions that are allowed.

* `resource` - (Required) A `resource` block as defined below.

---

A `resource` block supports the following:

* `collectionName` - (Optional) The name of the Mongo DB Collection that the Role Definition is applied.

* `dbName` - (Optional) The name of the Mongo DB that the Role Definition is applied.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cosmos DB Mongo Role Definition.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Cosmos DB Mongo Role Definition.
* `read` - (Defaults to 5 minutes) Used when retrieving the Cosmos DB Mongo Role Definition.
* `update` - (Defaults to 30 minutes) Used when updating the Cosmos DB Mongo Role Definition.
* `delete` - (Defaults to 30 minutes) Used when deleting the Cosmos DB Mongo Role Definition.

## Import

Cosmos DB Mongo Role Definitions can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_mongo_role_definition.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbRoleDefinitions/dbname1.rolename1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-aa8a0cd96eac7b2173dab414a1c8710df58fd86cea383ce68db97e1bec74599c -->