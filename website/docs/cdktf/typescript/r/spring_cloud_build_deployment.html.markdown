---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_build_deployment"
description: |-
  Manages a Spring Cloud Build Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_build_deployment

Manages a Spring Cloud Build Deployment.

-> **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "E0",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermSpringCloudAppExample =
      new azurerm.springCloudApp.SpringCloudApp(this, "example_3", {
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermSpringCloudServiceExample.resourceGroupName
        ),
        serviceName: cdktf.Token.asString(
          azurermSpringCloudServiceExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppExample.overrideLogicalId("example");
    const azurermSpringCloudBuildDeploymentExample =
      new azurerm.springCloudBuildDeployment.SpringCloudBuildDeployment(
        this,
        "example_4",
        {
          buildResultId: "<default>",
          environmentVariables: {
            Env: "Staging",
            Foo: "Bar",
          },
          instanceCount: 2,
          name: "example",
          quota: {
            cpu: "2",
            memory: "4Gi",
          },
          springCloudAppId: cdktf.Token.asString(
            azurermSpringCloudAppExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudBuildDeploymentExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Spring Cloud Build Deployment. Changing this forces a new Spring Cloud Build Deployment to be created.

* `springCloudAppId` - (Required) The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Build Deployment to be created.

* `buildResultId` - (Required) The ID of the Spring Cloud Build Result.

---

* `addonJson` - (Optional) A JSON object that contains the addon configurations of the Spring Cloud Build Deployment.

* `environmentVariables` - (Optional) Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.

* `instanceCount` - (Optional) Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.

* `quota` - (Optional) A `quota` block as defined below.

---

A `quota` block supports the following:

* `cpu` - (Optional) Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500M`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.

-> **Note:** `cpu` supports `500M` and `1` for Basic tier, `500M`, `1`, `2`, `3` and `4` for Standard tier.

* `memory` - (Optional) Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.

-> **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Build Deployment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Build Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Build Deployment.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Build Deployment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Build Deployment.

## Import

Spring Cloud Build Deployments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_build_deployment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-259b9c2455bec2d8cfca2780647bab72cacb98b97a09ca0dacf81257170f9816 -->