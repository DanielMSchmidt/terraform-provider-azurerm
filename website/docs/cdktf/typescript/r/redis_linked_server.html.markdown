---
subcategory: "Redis"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_redis_linked_server"
description: |-
  Manages a Redis Linked Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_redis_linked_server

Manages a Redis Linked Server (ie Geo Location)

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExamplePrimary =
      new azurerm.resourceGroup.ResourceGroup(this, "example-primary", {
        location: "East US",
        name: "example-resources-primary",
      });
    const azurermResourceGroupExampleSecondary =
      new azurerm.resourceGroup.ResourceGroup(this, "example-secondary", {
        location: "West US",
        name: "example-resources-secondary",
      });
    const azurermRedisCacheExamplePrimary = new azurerm.redisCache.RedisCache(
      this,
      "example-primary_2",
      {
        capacity: 1,
        enableNonSslPort: false,
        family: "P",
        location: cdktf.Token.asString(
          azurermResourceGroupExamplePrimary.location
        ),
        name: "example-cache1",
        redisConfiguration: {
          maxmemoryDelta: 2,
          maxmemoryPolicy: "allkeys-lru",
          maxmemoryReserved: 2,
        },
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExamplePrimary.name
        ),
        skuName: "Premium",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRedisCacheExamplePrimary.overrideLogicalId("example-primary");
    const azurermRedisCacheExampleSecondary = new azurerm.redisCache.RedisCache(
      this,
      "example-secondary_3",
      {
        capacity: 1,
        enableNonSslPort: false,
        family: "P",
        location: cdktf.Token.asString(
          azurermResourceGroupExampleSecondary.location
        ),
        name: "example-cache2",
        redisConfiguration: {
          maxmemoryDelta: 2,
          maxmemoryPolicy: "allkeys-lru",
          maxmemoryReserved: 2,
        },
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExampleSecondary.name
        ),
        skuName: "Premium",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRedisCacheExampleSecondary.overrideLogicalId("example-secondary");
    new azurerm.redisLinkedServer.RedisLinkedServer(this, "example-link", {
      linkedRedisCacheId: cdktf.Token.asString(
        azurermRedisCacheExampleSecondary.id
      ),
      linkedRedisCacheLocation: cdktf.Token.asString(
        azurermRedisCacheExampleSecondary.location
      ),
      resourceGroupName: cdktf.Token.asString(
        azurermRedisCacheExamplePrimary.resourceGroupName
      ),
      serverRole: "Secondary",
      targetRedisCacheName: cdktf.Token.asString(
        azurermRedisCacheExamplePrimary.name
      ),
    });
  }
}

```

## Arguments Reference

The following arguments are supported:

* `linkedRedisCacheId` - (Required) The ID of the linked Redis cache. Changing this forces a new Redis to be created.

* `linkedRedisCacheLocation` - (Required) The location of the linked Redis cache. Changing this forces a new Redis to be created.

* `targetRedisCacheName` - (Required) The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)

* `resourceGroupName` - (Required) The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.

* `serverRole` - (Required) The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created. Possible values are `primary` and `secondary`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Redis.

* `name` - The name of the linked server.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Redis.
* `read` - (Defaults to 5 minutes) Used when retrieving the Redis.
* `update` - (Defaults to 60 minutes) Used when updating the Redis.
* `delete` - (Defaults to 60 minutes) Used when deleting the Redis.

## Import

Redis can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_redis_linked_server.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/linkedServers/cache2
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-21dd77c9ad408b36ba9c6575e16b7033bfa2fdf90181a077f3c65773876478d9 -->