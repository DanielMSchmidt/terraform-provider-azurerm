---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_sql_pool_security_alert_policy"
description: |-
  Manages a Security Alert Policy for a Synapse SQL Pool.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_sql_pool_security_alert_policy

Manages a Security Alert Policy for a Synapse SQL Pool.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountAuditLogs =
      new azurerm.storageAccount.StorageAccount(this, "audit_logs", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplesa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        isHnsEnabled: cdktf.Token.asBoolean("true"),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_3",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_4", {
        aadAdmin: [
          {
            login: "AzureAD Admin",
            objectId: "00000000-0000-0000-0000-000000000000",
            tenantId: "00000000-0000-0000-0000-000000000000",
          },
        ],
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
        tags: {
          Env: "production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermSynapseSqlPoolExample =
      new azurerm.synapseSqlPool.SynapseSqlPool(this, "example_5", {
        createMode: "Default",
        name: "examplesqlpool",
        skuName: "DW100c",
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseSqlPoolExample.overrideLogicalId("example");
    const azurermSynapseSqlPoolSecurityAlertPolicyExample =
      new azurerm.synapseSqlPoolSecurityAlertPolicy.SynapseSqlPoolSecurityAlertPolicy(
        this,
        "example_6",
        {
          disabledAlerts: ["Sql_Injection", "Data_Exfiltration"],
          policyState: "Enabled",
          retentionDays: 20,
          sqlPoolId: cdktf.Token.asString(azurermSynapseSqlPoolExample.id),
          storageAccountAccessKey: cdktf.Token.asString(
            azurermStorageAccountAuditLogs.primaryAccessKey
          ),
          storageEndpoint: cdktf.Token.asString(
            azurermStorageAccountAuditLogs.primaryBlobEndpoint
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseSqlPoolSecurityAlertPolicyExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `sqlPoolId` - (Required) Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.

* `policyState` - (Required) Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `disabled`, `enabled` and `new`.

* `disabledAlerts` - (Optional) Specifies an array of alerts that are disabled. Allowed values are: `sqlInjection`, `sqlInjectionVulnerability`, `accessAnomaly`, `dataExfiltration`, `unsafeAction`.

* `emailAccountAdminsEnabled` - (Optional) Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.

* `emailAddresses` - (Optional) Specifies an array of email addresses to which the alert is sent.

* `retentionDays` - (Optional) Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.

* `storageAccountAccessKey` - (Optional) Specifies the identifier key of the Threat Detection audit storage account.

* `storageEndpoint` - (Optional) Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse SQL Pool Security Alert Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse SQL Pool Security Alert Policy.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse SQL Pool Security Alert Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse SQL Pool Security Alert Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse SQL Pool Security Alert Policy.

## Import

Synapse SQL Pool Security Alert Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_sql_pool_security_alert_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/securityAlertPolicies/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-6be5c9eb8a853be866b299208e7cb4a8a9e6c342a8c20f95bdbb7b4b8bae6a58 -->