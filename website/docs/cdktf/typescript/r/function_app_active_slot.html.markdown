---
subcategory: "App Service (Web Apps)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_function_app_active_slot"
description: |-
  Manages a Function App Active Slot.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_function_app_active_slot

Manages a Function App Active Slot.

## Example Usage

### Windows Function App

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermServicePlanExample = new azurerm.servicePlan.ServicePlan(
      this,
      "example_2",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-app-service-plan",
        osType: "Windows",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "Y1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermServicePlanExample.overrideLogicalId("example");
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_3", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "windowsfunctionappsa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermWindowsFunctionAppExample =
      new azurerm.windowsFunctionApp.WindowsFunctionApp(this, "example_4", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-windows-function-app",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        servicePlanId: cdktf.Token.asString(azurermServicePlanExample.id),
        siteConfig: {},
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermWindowsFunctionAppExample.overrideLogicalId("example");
    const azurermWindowsFunctionAppSlotExample =
      new azurerm.windowsFunctionAppSlot.WindowsFunctionAppSlot(
        this,
        "example_5",
        {
          functionAppId: cdktf.Token.asString(
            azurermWindowsFunctionAppExample.id
          ),
          name: "example-windows-function-app-slot",
          siteConfig: {},
          storageAccountName: cdktf.Token.asString(
            azurermStorageAccountExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermWindowsFunctionAppSlotExample.overrideLogicalId("example");
    const azurermFunctionAppActiveSlotExample =
      new azurerm.functionAppActiveSlot.FunctionAppActiveSlot(
        this,
        "example_6",
        {
          slotId: cdktf.Token.asString(azurermWindowsFunctionAppSlotExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermFunctionAppActiveSlotExample.overrideLogicalId("example");
  }
}

```

### Linux Function App

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermServicePlanExample = new azurerm.servicePlan.ServicePlan(
      this,
      "example_2",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-app-service-plan",
        osType: "Linux",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "Y1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermServicePlanExample.overrideLogicalId("example");
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_3", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "linuxfunctionappsa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermLinuxFunctionAppExample =
      new azurerm.linuxFunctionApp.LinuxFunctionApp(this, "example_4", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-linux-function-app",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        servicePlanId: cdktf.Token.asString(azurermServicePlanExample.id),
        siteConfig: {},
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLinuxFunctionAppExample.overrideLogicalId("example");
    const azurermLinuxFunctionAppSlotExample =
      new azurerm.linuxFunctionAppSlot.LinuxFunctionAppSlot(this, "example_5", {
        functionAppId: cdktf.Token.asString(
          azurermLinuxFunctionAppExample.name
        ),
        name: "example-linux-function-app-slot",
        siteConfig: {},
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLinuxFunctionAppSlotExample.overrideLogicalId("example");
    const azurermFunctionAppActiveSlotExample =
      new azurerm.functionAppActiveSlot.FunctionAppActiveSlot(
        this,
        "example_6",
        {
          slotId: cdktf.Token.asString(azurermLinuxFunctionAppSlotExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermFunctionAppActiveSlotExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `slotId` - (Required) The ID of the Slot to swap with `production`.

---

* `overwriteNetworkConfig` - (Optional) The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Function App Active Slot

* `lastSuccessfulSwap` - The timestamp of the last successful swap with `production`

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Function App Active Slot.
* `update` - (Defaults to 30 minutes) Used when updating the Function App Active Slot.
* `read` - (Defaults to 5 minutes) Used when retrieving the Function App Active Slot.
* `delete` - (Defaults to 5 minutes) Used when deleting the Function App Active Slot.

## Import

a Function App Active Slot can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_function_app_active_slot.example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8e3999fdc64cb43f5047b5d57219310adc1bb69e661258ef2ed35bf913b2226a -->