---
subcategory: "Cognitive Services"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cognitive_account_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a Cognitive Services Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cognitive_account_customer_managed_key

Manages a Customer Managed Key for a Cognitive Services Account.

~> **NOTE:** It's possible to define a Customer Managed Key both within [the `azurermCognitiveAccount` resource](cognitive_account.html) via the `customerManagedKey` block and by using [the `azurermCognitiveAccountCustomerManagedKey` resource](cognitive_account_customer_managed_key.html). However it's not possible to use both methods to manage a Customer Managed Key for a Cognitive Account, since there'll be conflicts.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West US",
        name: "example-resources",
      }
    );
    const azurermUserAssignedIdentityExample =
      new azurerm.userAssignedIdentity.UserAssignedIdentity(this, "example_1", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-identity",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermUserAssignedIdentityExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermCognitiveAccountExample =
      new azurerm.cognitiveAccount.CognitiveAccount(this, "example_3", {
        customSubdomainName: "example-account",
        identity: {
          identityIds: [
            cdktf.Token.asString(azurermUserAssignedIdentityExample.id),
          ],
          type: "SystemAssigned, UserAssigned",
        },
        kind: "Face",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-account",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "E0",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCognitiveAccountExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_4",
      {
        accessPolicy: [
          {
            keyPermissions: [
              "Get",
              "Create",
              "List",
              "Restore",
              "Recover",
              "UnwrapKey",
              "WrapKey",
              "Purge",
              "Encrypt",
              "Decrypt",
              "Sign",
              "Verify",
            ],
            objectId: cdktf.Token.asString(
              cdktf.propertyAccess(azurermCognitiveAccountExample.identity, [
                "0",
                "principal_id",
              ])
            ),
            secretPermissions: ["Get"],
            tenantId: cdktf.Token.asString(
              cdktf.propertyAccess(azurermCognitiveAccountExample.identity, [
                "0",
                "tenant_id",
              ])
            ),
          },
          {
            keyPermissions: [
              "Get",
              "Create",
              "Delete",
              "List",
              "Restore",
              "Recover",
              "UnwrapKey",
              "WrapKey",
              "Purge",
              "Encrypt",
              "Decrypt",
              "Sign",
              "Verify",
              "GetRotationPolicy",
            ],
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            secretPermissions: ["Get"],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
          {
            keyPermissions: [
              "Get",
              "Create",
              "Delete",
              "List",
              "Restore",
              "Recover",
              "UnwrapKey",
              "WrapKey",
              "Purge",
              "Encrypt",
              "Decrypt",
              "Sign",
              "Verify",
            ],
            objectId: cdktf.Token.asString(
              azurermUserAssignedIdentityExample.principalId
            ),
            secretPermissions: ["Get"],
            tenantId: cdktf.Token.asString(
              azurermUserAssignedIdentityExample.tenantId
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vault",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_5",
      {
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "example-key",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermCognitiveAccountCustomerManagedKeyExample =
      new azurerm.cognitiveAccountCustomerManagedKey.CognitiveAccountCustomerManagedKeyA(
        this,
        "example_6",
        {
          cognitiveAccountId: cdktf.Token.asString(
            azurermCognitiveAccountExample.id
          ),
          identityClientId: cdktf.Token.asString(
            azurermUserAssignedIdentityExample.clientId
          ),
          keyVaultKeyId: cdktf.Token.asString(azurermKeyVaultKeyExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCognitiveAccountCustomerManagedKeyExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `cognitiveAccountId` - (Required) The ID of the Cognitive Account. Changing this forces a new resource to be created.

* `keyVaultKeyId` - (Required) The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.

* `identityClientId` - (Optional) The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cognitive Account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Cognitive Account Customer Managed Key.
* `read` - (Defaults to 5 minutes) Used when retrieving the Cognitive Account Customer Managed Key.
* `update` - (Defaults to 30 minutes) Used when updating the Cognitive Account Customer Managed Key.
* `delete` - (Defaults to 30 minutes) Used when deleting the Cognitive Account Customer Managed Key.

## Import

Customer Managed Keys for a Cognitive Account can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cognitive_account_customer_managed_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-dab99e9972bff351600c53c7801eed8cbf98db63b4fa11548e121399198386df -->