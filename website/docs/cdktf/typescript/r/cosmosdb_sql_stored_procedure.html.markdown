---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_sql_stored_procedure"
description: |-
  Manages a SQL Stored Procedure within a Cosmos DB Account SQL Database.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_sql_stored_procedure

Manages a SQL Stored Procedure within a Cosmos DB Account SQL Database.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAzurermCosmosdbAccountExample =
      new azurerm.dataAzurermCosmosdbAccount.DataAzurermCosmosdbAccount(
        this,
        "example",
        {
          name: "tfex-cosmosdb-account",
          resourceGroupName: "tfex-cosmosdb-account-rg",
        }
      );
    const azurermCosmosdbSqlDatabaseExample =
      new azurerm.cosmosdbSqlDatabase.CosmosdbSqlDatabase(this, "example_1", {
        accountName: cdktf.Token.asString(
          dataAzurermCosmosdbAccountExample.name
        ),
        name: "tfex-cosmos-db",
        resourceGroupName: cdktf.Token.asString(
          dataAzurermCosmosdbAccountExample.resourceGroupName
        ),
        throughput: 400,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlDatabaseExample.overrideLogicalId("example");
    const azurermCosmosdbSqlContainerExample =
      new azurerm.cosmosdbSqlContainer.CosmosdbSqlContainer(this, "example_2", {
        accountName: cdktf.Token.asString(
          dataAzurermCosmosdbAccountExample.name
        ),
        databaseName: cdktf.Token.asString(
          azurermCosmosdbSqlDatabaseExample.name
        ),
        name: "example-container",
        partitionKeyPath: "/id",
        resourceGroupName: cdktf.Token.asString(
          dataAzurermCosmosdbAccountExample.resourceGroupName
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlContainerExample.overrideLogicalId("example");
    const azurermCosmosdbSqlStoredProcedureExample =
      new azurerm.cosmosdbSqlStoredProcedure.CosmosdbSqlStoredProcedure(
        this,
        "example_3",
        {
          accountName: cdktf.Token.asString(
            dataAzurermCosmosdbAccountExample.name
          ),
          body: "   function () { var context = getContext(); var response = context.getResponse(); response.setBody('Hello, World'); }\n",
          containerName: cdktf.Token.asString(
            azurermCosmosdbSqlContainerExample.name
          ),
          databaseName: cdktf.Token.asString(
            azurermCosmosdbSqlDatabaseExample.name
          ),
          name: "test-stored-proc",
          resourceGroupName: cdktf.Token.asString(
            dataAzurermCosmosdbAccountExample.resourceGroupName
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlStoredProcedureExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Cosmos DB SQL Stored Procedure. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.

* `accountName` - (Required) The name of the Cosmos DB Account to create the stored procedure within. Changing this forces a new resource to be created.

* `databaseName` - (Required) The name of the Cosmos DB SQL Database to create the stored procedure within. Changing this forces a new resource to be created.

* `containerName` - (Required) The name of the Cosmos DB SQL Container to create the stored procedure within. Changing this forces a new resource to be created.

* `body` - (Required) The body of the stored procedure.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cosmos DB SQL Stored Procedure.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the CosmosDB SQL Stored Procedure.
* `update` - (Defaults to 30 minutes) Used when updating the CosmosDB SQL Stored Procedure.
* `read` - (Defaults to 5 minutes) Used when retrieving the CosmosDB SQL Stored Procedure.
* `delete` - (Defaults to 30 minutes) Used when deleting the CosmosDB SQL Stored Procedure.

## Import

CosmosDB SQL Stored Procedures can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_sql_stored_procedure.db1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/db1/containers/c1/storedProcedures/sp1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9b0fb3090021663662a8adc48af80e69bb06d57ff4047e76313db8d8dd7b8d0b -->