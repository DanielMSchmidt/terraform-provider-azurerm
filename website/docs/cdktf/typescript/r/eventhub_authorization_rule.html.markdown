---
subcategory: "Messaging"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_eventhub_authorization_rule"
description: |-
  Manages a Event Hubs authorization Rule within an Event Hub.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_eventhub_authorization_rule

Manages a Event Hubs authorization Rule within an Event Hub.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermEventhubNamespaceExample =
      new azurerm.eventhubNamespace.EventhubNamespace(this, "example_1", {
        capacity: 2,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "acceptanceTestEventHubNamespace",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Basic",
        tags: {
          environment: "Production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubNamespaceExample.overrideLogicalId("example");
    const azurermEventhubExample = new azurerm.eventhub.Eventhub(
      this,
      "example_2",
      {
        messageRetention: 2,
        name: "acceptanceTestEventHub",
        namespaceName: cdktf.Token.asString(
          azurermEventhubNamespaceExample.name
        ),
        partitionCount: 2,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubExample.overrideLogicalId("example");
    const azurermEventhubAuthorizationRuleExample =
      new azurerm.eventhubAuthorizationRule.EventhubAuthorizationRule(
        this,
        "example_3",
        {
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          listen: true,
          manage: false,
          name: "navi",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceExample.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          send: false,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubAuthorizationRuleExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.

* `namespaceName` - (Required) Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.

* `eventhubName` - (Required) Specifies the name of the EventHub. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.

~> **NOTE** At least one of the 3 permissions below needs to be set.

* `listen` - (Optional) Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.

* `send` - (Optional) Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.

* `manage` - (Optional) Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The EventHub ID.

* `primaryConnectionStringAlias` - The alias of the Primary Connection String for the Event Hubs authorization Rule, which is generated when disaster recovery is enabled.

* `secondaryConnectionStringAlias` - The alias of the Secondary Connection String for the Event Hubs Authorization Rule, which is generated when disaster recovery is enabled.

* `primaryConnectionString` - The Primary Connection String for the Event Hubs authorization Rule.

* `primaryKey` - The Primary Key for the Event Hubs authorization Rule.

* `secondaryConnectionString` - The Secondary Connection String for the Event Hubs Authorization Rule.

* `secondaryKey` - The Secondary Key for the Event Hubs Authorization Rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the EventHub Authorization Rule.
* `update` - (Defaults to 30 minutes) Used when updating the EventHub Authorization Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the EventHub Authorization Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the EventHub Authorization Rule.

## Import

EventHub Authorization Rules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_eventhub_authorization_rule.rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/eventhubs/eventhub1/authorizationRules/rule1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5bf3d8a8443fda3f6ff12ec89e15d5e0a518d1b7e6abf70b633fb129bde7526b -->