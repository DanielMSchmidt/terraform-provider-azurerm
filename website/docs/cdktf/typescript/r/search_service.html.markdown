---
subcategory: "Search"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_search_service"
description: |-
  Manages a Search Service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_search_service

Manages a Search Service.

## Example Usage (supporting API Keys)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSearchServiceExample = new azurerm.searchService.SearchService(
      this,
      "example_1",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-resource",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "standard",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSearchServiceExample.overrideLogicalId("example");
  }
}

```

## Example Usage (using both AzureAD and API Keys)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSearchServiceExample = new azurerm.searchService.SearchService(
      this,
      "example_1",
      {
        authenticationFailureMode: "http403",
        localAuthenticationEnabled: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-resource",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "standard",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSearchServiceExample.overrideLogicalId("example");
  }
}

```

## Example Usage (supporting only AzureAD Authentication)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSearchServiceExample = new azurerm.searchService.SearchService(
      this,
      "example_1",
      {
        localAuthenticationEnabled: false,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-resource",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "standard",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSearchServiceExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `location` - (Required) The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.

* `name` - (Required) The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.

* `resourceGroupName` - (Required) The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.

* `sku` - (Required) The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.

-> The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.

~> **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.

---

* `allowedIps` - (Optional) Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.

-> **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.

* `authenticationFailureMode` - (Optional) Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.

-> **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.

* `customerManagedKeyEnforcementEnabled` - (Optional) Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.

* `hostingMode` - (Optional) Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.

-> **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.


* `identity` - (Optional) An `identity` block as defined below.

* `localAuthenticationEnabled` - (Optional) Specifies whether the Search Service allows authenticating using API Keys? Defaults to `false`.

* `partitionCount` - (Optional) Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.

-> **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.

* `publicNetworkAccessEnabled` - (Optional) Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.

* `replicaCount` - (Optional) Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).

* `tags` - (Optional) Specifies a mapping of tags which should be assigned to this Search Service.

---

An `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be configured on this Search Service. The only possible value is `systemAssigned`.

---

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Search Service.

* `primaryKey` - The Primary Key used for Search Service Administration.

* `queryKeys` - A `queryKeys` block as defined below.

* `secondaryKey` - The Secondary Key used for Search Service Administration.

---

A `queryKeys` block exports the following:

* `key` - The value of this Query Key.

* `name` - The name of this Query Key.

---

An `identity` block exports the following:

* `principalId` - The Principal ID associated with this Managed Service Identity.

* `tenantId` - The Tenant ID associated with this Managed Service Identity.

---

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Search Service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Search Service.
* `update` - (Defaults to 60 minutes) Used when updating the Search Service.
* `delete` - (Defaults to 60 minutes) Used when deleting the Search Service.

## Import

Search Services can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_search_service.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Search/searchServices/service1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fe873146dd631d17bc951ffc8778ccc5940f28e4ebf38fc86c9674ad1951de1b -->