---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_sql_virtual_network_rule"
description: |-
  Manages a SQL Virtual Network Rule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_sql_virtual_network_rule

Allows you to add, update, or remove an Azure SQL server to a subnet of a virtual network.

-> **Note:** The `azurermSqlVirtualNetworkRule` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the [`azurermMssqlVirtualNetworkRule`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_virtual_network_rule) resource instead.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-sql-server-vnet-rule",
      }
    );
    const azurermSqlServerSqlserver = new azurerm.sqlServer.SqlServer(
      this,
      "sqlserver",
      {
        administratorLogin: "4dm1n157r470r",
        administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "uniqueazuresqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        version: "12.0",
      }
    );
    const azurermVirtualNetworkVnet = new azurerm.virtualNetwork.VirtualNetwork(
      this,
      "vnet",
      {
        addressSpace: ["10.7.29.0/29"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    const azurermSubnetSubnet = new azurerm.subnet.Subnet(this, "subnet", {
      addressPrefixes: ["10.7.29.0/29"],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      serviceEndpoints: ["Microsoft.Sql"],
      virtualNetworkName: cdktf.Token.asString(azurermVirtualNetworkVnet.name),
    });
    new azurerm.sqlVirtualNetworkRule.SqlVirtualNetworkRule(
      this,
      "sqlvnetrule",
      {
        name: "sql-vnet-rule",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermSqlServerSqlserver.name),
        subnetId: cdktf.Token.asString(azurermSubnetSubnet.id),
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the SQL virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters and hyphens. Cannot start with a number, and cannot start or end with a hyphen.

~> **NOTE:** `name` must be between 1-64 characters long and must satisfy all of the requirements below:

1. Contains only alphanumeric and hyphen characters
2. Cannot start with a number or hyphen
3. Cannot end with a hyphen

* `resourceGroupName` - (Required) The name of the resource group where the SQL server resides. Changing this forces a new resource to be created.

* `serverName` - (Required) The name of the SQL Server to which this SQL virtual network rule will be applied to. Changing this forces a new resource to be created.

* `subnetId` - (Required) The ID of the subnet that the SQL server will be connected to.

* `ignoreMissingVnetServiceEndpoint` - (Optional) Create the virtual network rule before the subnet has the virtual network service endpoint enabled. The default value is false.

~> **NOTE:** If `ignoreMissingVnetServiceEndpoint` is false, and the target subnet does not contain the `microsoftSql` endpoint in the `serviceEndpoints` array, the deployment will fail when it tries to create the SQL virtual network rule.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the SQL virtual network rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the SQL Virtual Network Rule.
* `update` - (Defaults to 30 minutes) Used when updating the SQL Virtual Network Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the SQL Virtual Network Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the SQL Virtual Network Rule.

## Import

SQL Virtual Network Rules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_sql_virtual_network_rule.rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/virtualNetworkRules/vnetrulename
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-94ac1d44be9e104f9d1a2124b6a57166fbc396a98b38f1912d47fdec2bf269c3 -->