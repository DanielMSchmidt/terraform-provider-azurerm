---
subcategory: "Databricks"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_databricks_virtual_network_peering"
description: |-
  Manages a Databricks Virtual Network Peering
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_databricks_virtual_network_peering

Manages a Databricks Virtual Network Peering

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkRemote =
      new azurerm.virtualNetwork.VirtualNetwork(this, "remote", {
        addressSpace: ["10.0.1.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "remote-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermDatabricksWorkspaceExample =
      new azurerm.databricksWorkspace.DatabricksWorkspace(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-workspace",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "standard",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDatabricksWorkspaceExample.overrideLogicalId("example");
    const azurermDatabricksVirtualNetworkPeeringExample =
      new azurerm.databricksVirtualNetworkPeering.DatabricksVirtualNetworkPeering(
        this,
        "example_3",
        {
          allowVirtualNetworkAccess: true,
          name: "databricks-vnet-peer",
          remoteAddressSpacePrefixes: cdktf.Token.asList(
            azurermVirtualNetworkRemote.addressSpace
          ),
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkRemote.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          workspaceId: cdktf.Token.asString(
            azurermDatabricksWorkspaceExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDatabricksVirtualNetworkPeeringExample.overrideLogicalId("example");
    const azurermVirtualNetworkPeeringRemote =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "remote_4",
        {
          allowVirtualNetworkAccess: true,
          name: "peer-to-databricks",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermDatabricksVirtualNetworkPeeringExample.virtualNetworkId
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkRemote.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPeeringRemote.overrideLogicalId("remote");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.

* `workspaceId` - (Required) The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.

* `addressSpacePrefixes` - (Required) A list of address blocks reserved for this virtual network in CIDR notation. Changing this forces a new resource to be created.

* `remoteAddressSpacePrefixes` - (Required) A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.

* `remoteVirtualNetworkId` - (Required) The ID of the remote virtual network. Changing this forces a new resource to be created.

~> **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.

* `allowVirtualNetworkAccess` - (Optional) Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.

* `allowForwardedTraffic` - (Optional) Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.

* `allowGatewayTransit` - (Optional) Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.

* `useRemoteGateways` - (Optional) Can remote gateways be used on the Databricks virtual network? Defaults to `false`.

~> **NOTE:** If the `useRemoteGateways` is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `useRemoteGateways` cannot be set if the virtual network already has a gateway.

* `virtualNetworkId` - The ID of the internal Virtual Network used by the DataBricks Workspace.

~> **NOTE:** The `virtualNetworkId` field is the value you must supply to the `azurermVirtualNetworkPeering` resources `remoteVirtualNetworkId` field to successfully peer the Databricks Virtual Network with the remote virtual network.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Databricks Virtual Network Peering.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Databricks Virtual Network Peering.
* `update` - (Defaults to 30 minutes) Used when updating the Databricks Virtual Network Peering.
* `read` - (Defaults to 5 minutes) Used when retrieving the Databricks Virtual Network Peering.
* `delete` - (Defaults to 30 minutes) Used when deleting the Databricks Virtual Network Peering.

## Import

Databrick Virtual Network Peerings can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_databricks_virtual_network_peering.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1/virtualNetworkPeerings/peering1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5873013a23f5abfe2a092231d588515355ea7d7280c1d2af483de6b6b7678bcb -->