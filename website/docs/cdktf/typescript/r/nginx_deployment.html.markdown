---
subcategory: "Nginx"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_nginx_deployment"
description: |-
  Manages a Nginx Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_nginx_deployment

Manages a Nginx Deployment.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-rg",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_2",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
        tags: {
          environment: "Production",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.0.2.0/24"],
      delegation: [
        {
          name: "delegation",
          serviceDelegation: {
            actions: ["Microsoft.Network/virtualNetworks/subnets/join/action"],
            name: "NGINX.NGINXPLUS/nginxDeployments",
          },
        },
      ],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermNginxDeploymentExample =
      new azurerm.nginxDeployment.NginxDeployment(this, "example_4", {
        diagnoseSupportEnabled: true,
        frontendPublic: {
          ipAddress: [cdktf.Token.asString(azurermPublicIpExample.id)],
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        managedResourceGroup: "example",
        name: "example-nginx",
        networkInterface: [
          {
            subnetId: cdktf.Token.asString(azurermSubnetExample.id),
          },
        ],
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "publicpreview_Monthly_gmz7xq9ge3py",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNginxDeploymentExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `resourceGroupName` - (Required) The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.

* `name` - (Required) The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.

* `location` - (Required) The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.

* `sku` - (Required) Specify the Name of Nginx deployment SKU. The possible value are `publicpreviewMonthlyGmz7Xq9Ge3Py` and `standardMonthly`.

* `managedResourceGroup` - (Optional) Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.

---

* `diagnoseSupportEnabled` - (Optional) Should the diagnosis support be enabled?

* `identity` - (Optional) An `identity` block as defined below.

* `frontendPrivate` - (Optional) One or more `frontendPrivate` blocks as defined below. Changing this forces a new Nginx Deployment to be created.

* `frontendPublic` - (Optional) A `frontendPublic` block as defined below. Changing this forces a new Nginx Deployment to be created.

* `loggingStorageAccount` - (Optional) One or more `loggingStorageAccount` blocks as defined below.

* `networkInterface` - (Optional) One or more `networkInterface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.

* `tags` - (Optional) A mapping of tags which should be assigned to the Nginx Deployment.

---

A `identity` block supports the following:

* `type` - (Required) Specifies the identity type of the Nginx Deployment. Possible values is `userAssigned` where you can specify the Service Principal IDs in the `identityIds` field.

* `identityIds` - (Optional) Specifies a list of user managed identity ids to be assigned. Required if `type` is `userAssigned`.

---

A `frontendPrivate` block supports the following:

* `allocationMethod` - (Required) Specify the methos of allocating the private IP. Possible values are `static` and `dynamic`.

* `ipAddress` - (Required) Specify the IP Address of this private IP.

* `subnetId` - (Required) Specify the SubNet Resource ID to this Nginx Deployment.

---

A `frontendPublic` block supports the following:

* `ipAddress` - (Optional) Specifies a list of Public IP Resouce ID to this Nginx Deployment.

---

A `loggingStorageAccount` block supports the following:

* `containerName` - (Optional) Specify the container name of Stoage Account for logging.

* `name` - (Optional) The account name of the StorageAccount for Nginx Logging.

---

A `networkInterface` block supports the following:

* `subnetId` - (Required) Specify The SubNet Resource ID to this Nginx Deployment.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Nginx Deployment.

* `ipAddress` - The IP address of the deployment.

* `nginxVersion` - The version of deployed nginx.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Nginx Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Nginx Deployment.
* `update` - (Defaults to 30 minutes) Used when updating the Nginx Deployment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Nginx Deployment.

## Import

Nginx Deployments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_nginx_deployment.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-38220c2cf016043f92b002e47874f843423c5f69899abd2a1427bdcc61dd8b14 -->