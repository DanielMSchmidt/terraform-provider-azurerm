---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_configuration_service"
description: |-
  Manages a Spring Cloud Configuration Service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_configuration_service

Manages a Spring Cloud Configuration Service.

-> **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "E0",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermSpringCloudConfigurationServiceExample =
      new azurerm.springCloudConfigurationService.SpringCloudConfigurationService(
        this,
        "example_3",
        {
          name: "default",
          repository: [
            {
              label: "master",
              name: "fake",
              password: "H@Sh1CoR3!",
              patterns: ["app/dev"],
              searchPaths: ["dir1", "dir2"],
              strictHostKeyChecking: false,
              uri: "https://github.com/Azure-Samples/piggymetrics",
              username: "adminuser",
            },
          ],
          springCloudServiceId: cdktf.Token.asString(
            azurermSpringCloudServiceExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudConfigurationServiceExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.

* `springCloudServiceId` - (Required) The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.

---

* `repository` - (Optional) One or more `repository` blocks as defined below.

---

A `repository` block supports the following:

* `label` - (Required) Specifies the label of the repository.

* `name` - (Required) Specifies the name which should be used for this repository.

* `patterns` - (Required) Specifies the collection of patterns of the repository.

* `uri` - (Required) Specifies the URI of the repository.

* `hostKey` - (Optional) Specifies the SSH public key of git repository.

* `hostKeyAlgorithm` - (Optional) Specifies the SSH key algorithm of git repository.

* `password` - (Optional) Specifies the password of git repository basic auth.

* `privateKey` - (Optional) Specifies the SSH private key of git repository.

* `searchPaths` - (Optional) Specifies a list of searching path of the repository

* `strictHostKeyChecking` - (Optional) Specifies whether enable the strict host key checking.

* `username` - (Optional) Specifies the username of git repository basic auth.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Configuration Service.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Configuration Service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Configuration Service.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Configuration Service.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Configuration Service.

## Import

Spring Cloud Configuration Services can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_configuration_service.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/configurationServices/configurationService1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1fc9e94be27969e1d80593d94a0dd12f3d0d70a43b121a73ea7aeb6c6a9a0f64 -->