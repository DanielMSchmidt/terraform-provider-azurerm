---
subcategory: "Load Balancer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_lb_nat_pool"
description: |-
  Manages a Load Balancer NAT Pool.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_lb_nat_pool

Manages a Load Balancer NAT pool.

-> **NOTE:** This resource cannot be used with with virtual machines, instead use the `azurermLbNatRule` resource.

~> **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "LoadBalancerRG",
      }
    );
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_1",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "PublicIPForLB",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    const azurermLbExample = new azurerm.lb.Lb(this, "example_2", {
      frontendIpConfiguration: [
        {
          name: "PublicIPAddress",
          publicIpAddressId: cdktf.Token.asString(azurermPublicIpExample.id),
        },
      ],
      location: cdktf.Token.asString(azurermResourceGroupExample.location),
      name: "TestLoadBalancer",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLbExample.overrideLogicalId("example");
    const azurermLbNatPoolExample = new azurerm.lbNatPool.LbNatPool(
      this,
      "example_3",
      {
        backendPort: 8080,
        frontendIpConfigurationName: "PublicIPAddress",
        frontendPortEnd: 81,
        frontendPortStart: 80,
        loadbalancerId: cdktf.Token.asString(azurermLbExample.id),
        name: "SampleApplicationPool",
        protocol: "Tcp",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLbNatPoolExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the NAT pool. Changing this forces a new resource to be created.
* `resourceGroupName` - (Required) The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
* `loadbalancerId` - (Required) The ID of the Load Balancer in which to create the NAT pool. Changing this forces a new resource to be created.
* `frontendIpConfigurationName` - (Required) The name of the frontend IP configuration exposing this rule.
* `protocol` - (Required) The transport protocol for the external endpoint. Possible values are `all`, `tcp` and `udp`.
* `frontendPortStart` - (Required) The first port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
* `frontendPortEnd` - (Required) The last port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
* `backendPort` - (Required) The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
* `idleTimeoutInMinutes` - (Optional) Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30`. Defaults to `4`.
* `floatingIpEnabled` - (Optional) Are the floating IPs enabled for this Load Balancer Rule? A floating IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group.
* `tcpResetEnabled` - (Optional) Is TCP Reset enabled for this Load Balancer Rule? 

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Load Balancer NAT pool.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Load Balancer NAT Pool.
* `update` - (Defaults to 30 minutes) Used when updating the Load Balancer NAT Pool.
* `read` - (Defaults to 5 minutes) Used when retrieving the Load Balancer NAT Pool.
* `delete` - (Defaults to 30 minutes) Used when deleting the Load Balancer NAT Pool.

## Import

Load Balancer NAT Pools can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_lb_nat_pool.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatPools/pool1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e4b0cb4a3df492bc6ca599a139018e1ab0d4ebd7349a8c952083863b743776dc -->