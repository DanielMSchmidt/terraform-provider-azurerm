---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_sql_role_assignment"
description: |-
  Manages a Cosmos DB SQL Role Assignment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_sql_role_assignment

Manages a Cosmos DB SQL Role Assignment.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermCosmosdbAccountExample =
      new azurerm.cosmosdbAccount.CosmosdbAccount(this, "example_2", {
        consistencyPolicy: {
          consistencyLevel: "Strong",
        },
        geoLocation: [
          {
            failoverPriority: 0,
            location: cdktf.Token.asString(
              azurermResourceGroupExample.location
            ),
          },
        ],
        kind: "GlobalDocumentDB",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-cosmosdb",
        offerType: "Standard",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbAccountExample.overrideLogicalId("example");
    const azurermCosmosdbSqlRoleDefinitionExample =
      new azurerm.cosmosdbSqlRoleDefinition.CosmosdbSqlRoleDefinition(
        this,
        "example_3",
        {
          accountName: cdktf.Token.asString(azurermCosmosdbAccountExample.name),
          assignableScopes: [
            cdktf.Token.asString(azurermCosmosdbAccountExample.id),
          ],
          name: "examplesqlroledef",
          permissions: [
            {
              dataActions: [
                "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read",
              ],
            },
          ],
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          type: "CustomRole",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlRoleDefinitionExample.overrideLogicalId("example");
    const azurermCosmosdbSqlRoleAssignmentExample =
      new azurerm.cosmosdbSqlRoleAssignment.CosmosdbSqlRoleAssignment(
        this,
        "example_4",
        {
          accountName: cdktf.Token.asString(azurermCosmosdbAccountExample.name),
          name: "736180af-7fbc-4c7f-9004-22735173c1c3",
          principalId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          roleDefinitionId: cdktf.Token.asString(
            azurermCosmosdbSqlRoleDefinitionExample.id
          ),
          scope: cdktf.Token.asString(azurermCosmosdbAccountExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlRoleAssignmentExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `resourceGroupName` - (Required) The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.

* `accountName` - (Required) The name of the Cosmos DB Account. Changing this forces a new resource to be created.

* `principalId` - (Required) The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.

* `roleDefinitionId` - (Required) The resource ID of the Cosmos DB SQL Role Definition.

* `scope` - (Required) The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.

* `name` - (Optional) The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cosmos DB SQL Role Assignment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Cosmos DB SQL Role Assignment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Cosmos DB SQL Role Assignment.
* `update` - (Defaults to 30 minutes) Used when updating the Cosmos DB SQL Role Assignment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Cosmos DB SQL Role Assignment.

## Import

Cosmos DB SQL Role Assignments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_sql_role_assignment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlRoleAssignments/9e007587-dbcd-4190-84cb-fcab5a09ca39
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0a9e42c5ac199be07aca2082e253b02afcfedfc8eb024731949baecf93bba340 -->