---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mysql_flexible_server_active_directory_administrator"
description: |-
  Manages an Active Directory administrator on a MySQL Flexible Server
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mysql_flexible_server_active_directory_administrator

Manages an Active Directory administrator on a MySQL Flexible Server

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermUserAssignedIdentityExample =
      new azurerm.userAssignedIdentity.UserAssignedIdentity(this, "example_1", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "exampleUAI",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermUserAssignedIdentityExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermMysqlFlexibleServerExample =
      new azurerm.mysqlFlexibleServer.MysqlFlexibleServer(this, "example_3", {
        administratorLogin: "_admin_Terraform_892123456789312",
        administratorPassword: "QAZwsx123",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-mysqlfs",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "B_Standard_B1s",
        zone: "2",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlFlexibleServerExample.overrideLogicalId("example");
    const azurermMysqlFlexibleServerActiveDirectoryAdministratorExample =
      new azurerm.mysqlFlexibleServerActiveDirectoryAdministrator.MysqlFlexibleServerActiveDirectoryAdministrator(
        this,
        "example_4",
        {
          identityId: cdktf.Token.asString(
            azurermUserAssignedIdentityExample.id
          ),
          login: "sqladmin",
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.clientId
          ),
          serverId: cdktf.Token.asString(azurermMysqlFlexibleServerExample.id),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlFlexibleServerActiveDirectoryAdministratorExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `serverId` - (Required) The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.

* `identityId` - (Required) The resource ID of the identity used for AAD Authentication.

* `login` - (Required) The login name of the principal to set as the server administrator

* `objectId` - (Required) The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.

* `tenantId` - (Required) The Azure Tenant ID.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MySQL Flexible Server Active Directory Administrator.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the MySQL Flexible Server Active Directory Administrator.
* `read` - (Defaults to 5 minutes) Used when retrieving the MySQL Flexible Server Active Directory Administrator.
* `update` - (Defaults to 30 minutes) Used when updating the MySQL Flexible Server Active Directory Administrator.
* `delete` - (Defaults to 30 minutes) Used when deleting the MySQL Flexible Server Active Directory Administrator.

## Import

A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mysql_flexible_server_active_directory_administrator.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0c38a0dfbc8820e1f15b7c3a72f37addf330b49bf27f84cc9fe46a2560b45e78 -->