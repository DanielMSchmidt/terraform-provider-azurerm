---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_virtual_network_rule"
description: |-
  Manages an Azure SQL Virtual Network Rule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_virtual_network_rule

Allows you to manage rules for allowing traffic between an Azure SQL server and a subnet of a virtual network.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-sql-server-vnet-rule",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.7.29.0/29"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermMssqlServerExample = new azurerm.mssqlServer.MssqlServer(
      this,
      "example_2",
      {
        administratorLogin: "4dm1n157r470r",
        administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "uniqueazuresqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        version: "12.0",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlServerExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.7.29.0/29"],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      serviceEndpoints: ["Microsoft.Sql"],
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermMssqlVirtualNetworkRuleExample =
      new azurerm.mssqlVirtualNetworkRule.MssqlVirtualNetworkRule(
        this,
        "example_4",
        {
          name: "sql-vnet-rule",
          serverId: cdktf.Token.asString(azurermMssqlServerExample.id),
          subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlVirtualNetworkRuleExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the SQL virtual network rule. Changing this forces a new resource to be created.

* `serverId` - (Required) The resource ID of the SQL Server to which this SQL virtual network rule will be applied. Changing this forces a new resource to be created.

* `subnetId` - (Required) The ID of the subnet from which the SQL server will accept communications.

* `ignoreMissingVnetServiceEndpoint` - (Optional) Create the virtual network rule before the subnet has the virtual network service endpoint enabled. Defaults to `false`.

~> **NOTE:** If `ignoreMissingVnetServiceEndpoint` is false, and the target subnet does not contain the `microsoftSql` endpoint in the `serviceEndpoints` array, the deployment will fail when it tries to create the SQL virtual network rule.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the SQL virtual network rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the SQL Virtual Network Rule.
* `update` - (Defaults to 30 minutes) Used when updating the SQL Virtual Network Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the SQL Virtual Network Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the SQL Virtual Network Rule.

## Import

SQL Virtual Network Rules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_virtual_network_rule.rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/virtualNetworkRules/vnetrulename
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-48dd142119c9fba357743accdd9fdb73f94fde9af3f47f8c52605c2f0bceae99 -->