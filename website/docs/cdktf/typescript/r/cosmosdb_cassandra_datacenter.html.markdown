---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_cassandra_datacenter"
description: |-
  Manages a Cassandra Datacenter.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_cassandra_datacenter

Manages a Cassandra Datacenter.

~> **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:

```powershell
New-AzADServicePrincipal -ApplicationId a232010e-820c-4083-83bb-3ace5fc29d0b
```

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
import * as azuread from "./.gen/providers/azuread";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
    For a more precise conversion please use the --provider flag in convert.*/
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "accexample-rg",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_2", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const dataAzureadServicePrincipalExample =
      new azuread.dataAzureadServicePrincipal.DataAzureadServicePrincipal(
        this,
        "example_3",
        {
          display_name: "Azure Cosmos DB",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzureadServicePrincipalExample.overrideLogicalId("example");
    const azurermRoleAssignmentExample =
      new azurerm.roleAssignment.RoleAssignment(this, "example_4", {
        principalId: cdktf.Token.asString(
          dataAzureadServicePrincipalExample.objectId
        ),
        roleDefinitionName: "Network Contributor",
        scope: cdktf.Token.asString(azurermVirtualNetworkExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRoleAssignmentExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_5", {
      addressPrefixes: ["10.0.1.0/24"],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermCosmosdbCassandraClusterExample =
      new azurerm.cosmosdbCassandraCluster.CosmosdbCassandraCluster(
        this,
        "example_6",
        {
          defaultAdminPassword: "Password1234",
          delegatedManagementSubnetId: cdktf.Token.asString(
            azurermSubnetExample.id
          ),
          dependsOn: [azurermRoleAssignmentExample],
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-cluster",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbCassandraClusterExample.overrideLogicalId("example");
    const azurermCosmosdbCassandraDatacenterExample =
      new azurerm.cosmosdbCassandraDatacenter.CosmosdbCassandraDatacenter(
        this,
        "example_7",
        {
          availabilityZonesEnabled: false,
          cassandraClusterId: cdktf.Token.asString(
            azurermCosmosdbCassandraClusterExample.id
          ),
          delegatedManagementSubnetId: cdktf.Token.asString(
            azurermSubnetExample.id
          ),
          diskCount: 4,
          location: cdktf.Token.asString(
            azurermCosmosdbCassandraClusterExample.location
          ),
          name: "example-datacenter",
          nodeCount: 3,
          skuName: "Standard_DS14_v2",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbCassandraDatacenterExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.

* `location` - (Required) The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.

* `cassandraClusterId` - (Required) The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.

* `delegatedManagementSubnetId` - (Required) The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.

* `nodeCount` - (Optional) The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.

---

* `backupStorageCustomerKeyUri` - (Optional) The key URI of the customer key to use for the encryption of the backup Storage Account.

* `base64EncodedYamlFragment` - (Optional) The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.

* `diskSku` - (Optional) The Disk SKU that is used for this Cassandra Datacenter. Defaults to `p30`.

* `managedDiskCustomerKeyUri` - (Optional) The key URI of the customer key to use for the encryption of the Managed Disk.

* `skuName` - (Optional) Determines the selected sku.

* `diskCount` - (Optional) Determines the number of p30 disks that are attached to each node.

* `availabilityZonesEnabled` - (Optional) Determines whether availability zones are enabled. Defaults to `true`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cassandra Datacenter.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Cassandra Datacenter.
* `read` - (Defaults to 5 minutes) Used when retrieving the Cassandra Datacenter.
* `update` - (Defaults to 60 minutes) Used when updating the Cassandra Datacenter.
* `delete` - (Defaults to 60 minutes) Used when deleting the Cassandra Datacenter.

## Import

Cassandra Datacenters can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_cassandra_datacenter.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1/dataCenters/dc1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fbb1294dfccb73bd7890ab3bb6b41f9e855799f386d556399b9c17371f7bc049 -->