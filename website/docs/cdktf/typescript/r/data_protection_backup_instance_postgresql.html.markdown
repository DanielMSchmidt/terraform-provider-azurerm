---
subcategory: "DataProtection"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_data_protection_backup_instance_postgresql"
description: |-
  Manages a Backup Instance to back up PostgreSQL.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_data_protection_backup_instance_postgresql

Manages a Backup Instance to back up PostgreSQL.

-> **Note:** Before using this resource, there are some prerequisite permissions for configure backup and restore. See more details from <https://docs.microsoft.com/azure/backup/backup-azure-database-postgresql#prerequisite-permissions-for-configure-backup-and-restore>.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermDataProtectionBackupVaultExample =
      new azurerm.dataProtectionBackupVault.DataProtectionBackupVault(
        this,
        "example_2",
        {
          datastoreType: "VaultStore",
          identity: {
            type: "SystemAssigned",
          },
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          redundancy: "LocallyRedundant",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataProtectionBackupVaultExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_3",
      {
        accessPolicy: [
          {
            keyPermissions: ["Create", "Get"],
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            secretPermissions: ["Set", "Get", "Delete", "Purge", "Recover"],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
          {
            keyPermissions: ["Create", "Get"],
            objectId: cdktf.Token.asString(
              cdktf.propertyAccess(
                azurermDataProtectionBackupVaultExample.identity,
                ["0", "principal_id"]
              )
            ),
            secretPermissions: ["Set", "Get", "Delete", "Purge", "Recover"],
            tenantId: cdktf.Token.asString(
              cdktf.propertyAccess(
                azurermDataProtectionBackupVaultExample.identity,
                ["0", "tenant_id"]
              )
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        softDeleteRetentionDays: 7,
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermPostgresqlServerExample =
      new azurerm.postgresqlServer.PostgresqlServer(this, "example_4", {
        administratorLogin: "psqladmin",
        administratorLoginPassword: "H@Sh1CoR3!",
        autoGrowEnabled: true,
        backupRetentionDays: 7,
        geoRedundantBackupEnabled: false,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "B_Gen5_2",
        sslEnforcementEnabled: true,
        storageMb: 5120,
        version: "9.5",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlServerExample.overrideLogicalId("example");
    const azurermRoleAssignmentExample =
      new azurerm.roleAssignment.RoleAssignment(this, "example_5", {
        principalId: cdktf.Token.asString(
          cdktf.propertyAccess(
            azurermDataProtectionBackupVaultExample.identity,
            ["0", "principal_id"]
          )
        ),
        roleDefinitionName: "Reader",
        scope: cdktf.Token.asString(azurermPostgresqlServerExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRoleAssignmentExample.overrideLogicalId("example");
    const azurermDataProtectionBackupPolicyPostgresqlExample =
      new azurerm.dataProtectionBackupPolicyPostgresql.DataProtectionBackupPolicyPostgresql(
        this,
        "example_6",
        {
          backupRepeatingTimeIntervals: ["R/2021-05-23T02:30:00+00:00/P1W"],
          defaultRetentionDuration: "P4M",
          name: "example",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          vaultName: cdktf.Token.asString(
            azurermDataProtectionBackupVaultExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataProtectionBackupPolicyPostgresqlExample.overrideLogicalId(
      "example"
    );
    const azurermPostgresqlDatabaseExample =
      new azurerm.postgresqlDatabase.PostgresqlDatabase(this, "example_7", {
        charset: "UTF8",
        collation: "English_United States.1252",
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermPostgresqlServerExample.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlDatabaseExample.overrideLogicalId("example");
    const azurermPostgresqlFirewallRuleExample =
      new azurerm.postgresqlFirewallRule.PostgresqlFirewallRule(
        this,
        "example_8",
        {
          endIpAddress: "0.0.0.0",
          name: "AllowAllWindowsAzureIps",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          serverName: cdktf.Token.asString(azurermPostgresqlServerExample.name),
          startIpAddress: "0.0.0.0",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlFirewallRuleExample.overrideLogicalId("example");
    const azurermKeyVaultSecretExample =
      new azurerm.keyVaultSecret.KeyVaultSecret(this, "example_9", {
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "example",
        value:
          "Server=${" +
          azurermPostgresqlServerExample.name +
          "}.postgres.database.azure.com;Database=${" +
          azurermPostgresqlDatabaseExample.name +
          "};Port=5432;User Id=psqladmin@${" +
          azurermPostgresqlServerExample.name +
          "};Password=H@Sh1CoR3!;Ssl Mode=Require;",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultSecretExample.overrideLogicalId("example");
    const azurermDataProtectionBackupInstancePostgresqlExample =
      new azurerm.dataProtectionBackupInstancePostgresql.DataProtectionBackupInstancePostgresql(
        this,
        "example_10",
        {
          backupPolicyId: cdktf.Token.asString(
            azurermDataProtectionBackupPolicyPostgresqlExample.id
          ),
          databaseCredentialKeyVaultSecretId: cdktf.Token.asString(
            azurermKeyVaultSecretExample.versionlessId
          ),
          databaseId: cdktf.Token.asString(azurermPostgresqlDatabaseExample.id),
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          vaultId: cdktf.Token.asString(
            azurermDataProtectionBackupVaultExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataProtectionBackupInstancePostgresqlExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.

* `location` - (Required) The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.

* `vaultId` - (Required) The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.

* `databaseId` - (Required) The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.

* `backupPolicyId` - (Required) The ID of the Backup Policy.

* `databaseCredentialKeyVaultSecretId` - (Optional) The ID or versionless ID of the key vault secret which stores the connection string of the database.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Backup Instance PostgreSQL.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Backup Instance PostgreSQL.
* `read` - (Defaults to 5 minutes) Used when retrieving the Backup Instance PostgreSQL.
* `update` - (Defaults to 30 minutes) Used when updating the Backup Instance PostgreSQL.
* `delete` - (Defaults to 30 minutes) Used when deleting the Backup Instance PostgreSQL.

## Import

Backup Instance PostgreSQL can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_data_protection_backup_instance_postgresql.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9e0d65634d0e85c1b02cf3e605c741c47562f4bad5e9e40a3ea0464d9a81f7c1 -->