---
subcategory: "Load Balancer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_lb_outbound_rule"
description: |-
  Manages a Load Balancer Outbound Rule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_lb_outbound_rule

Manages a Load Balancer Outbound Rule.

~> **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration and a Backend Address Pool Attached.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "LoadBalancerRG",
      }
    );
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_1",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "PublicIPForLB",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    const azurermLbExample = new azurerm.lb.Lb(this, "example_2", {
      frontendIpConfiguration: [
        {
          name: "PublicIPAddress",
          publicIpAddressId: cdktf.Token.asString(azurermPublicIpExample.id),
        },
      ],
      location: cdktf.Token.asString(azurermResourceGroupExample.location),
      name: "TestLoadBalancer",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLbExample.overrideLogicalId("example");
    const azurermLbBackendAddressPoolExample =
      new azurerm.lbBackendAddressPool.LbBackendAddressPool(this, "example_3", {
        loadbalancerId: cdktf.Token.asString(azurermLbExample.id),
        name: "example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLbBackendAddressPoolExample.overrideLogicalId("example");
    const azurermLbOutboundRuleExample =
      new azurerm.lbOutboundRule.LbOutboundRule(this, "example_4", {
        backendAddressPoolId: cdktf.Token.asString(
          azurermLbBackendAddressPoolExample.id
        ),
        frontendIpConfiguration: [
          {
            name: "PublicIPAddress",
          },
        ],
        loadbalancerId: cdktf.Token.asString(azurermLbExample.id),
        name: "OutboundRule",
        protocol: "Tcp",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermLbOutboundRuleExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Outbound Rule. Changing this forces a new resource to be created.
* `loadbalancerId` - (Required) The ID of the Load Balancer in which to create the Outbound Rule. Changing this forces a new resource to be created.
* `frontendIpConfiguration` - (Optional) One or more `frontendIpConfiguration` blocks as defined below.
* `backendAddressPoolId` - (Required) The ID of the Backend Address Pool. Outbound traffic is randomly load balanced across IPs in the backend IPs.
* `protocol` - (Required) The transport protocol for the external endpoint. Possible values are `udp`, `tcp` or `all`.
* `enableTcpReset` - (Optional) Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
* `allocatedOutboundPorts` - (Optional) The number of outbound ports to be used for NAT. Defaults to `1024`.
* `idleTimeoutInMinutes` - (Optional) The timeout for the TCP idle connection Defaults to `4`.

---

A `frontendIpConfiguration` block supports the following:

* `name` - (Required) The name of the Frontend IP Configuration.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Load Balancer Outbound Rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Load Balancer Outbound Rule.
* `update` - (Defaults to 30 minutes) Used when updating the Load Balancer Outbound Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the Load Balancer Outbound Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the Load Balancer Outbound Rule.

## Import

Load Balancer Outbound Rules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_lb_outbound_rule.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/outboundRules/rule1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-7ce5d4ba23e7ed070efa79901dd65d97efd2cabd3db4a08d950fb1d77959f9bd -->