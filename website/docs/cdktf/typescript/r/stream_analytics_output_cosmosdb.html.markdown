---
subcategory: "Stream Analytics"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_stream_analytics_output_cosmosdb"
description: |-
  Manages a Stream Analytics Output to CosmosDB.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_stream_analytics_output_cosmosdb

Manages a Stream Analytics Output to CosmosDB.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "rg-example",
      }
    );
    const dataAzurermStreamAnalyticsJobExample =
      new azurerm.dataAzurermStreamAnalyticsJob.DataAzurermStreamAnalyticsJob(
        this,
        "example_1",
        {
          name: "example-job",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzurermStreamAnalyticsJobExample.overrideLogicalId("example");
    const azurermCosmosdbAccountExample =
      new azurerm.cosmosdbAccount.CosmosdbAccount(this, "example_2", {
        consistencyPolicy: {
          consistencyLevel: "BoundedStaleness",
          maxIntervalInSeconds: 10,
          maxStalenessPrefix: 200,
        },
        geoLocation: [
          {
            failoverPriority: 0,
            location: cdktf.Token.asString(
              azurermResourceGroupExample.location
            ),
          },
        ],
        kind: "GlobalDocumentDB",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "exampledb",
        offerType: "Standard",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbAccountExample.overrideLogicalId("example");
    const azurermCosmosdbSqlDatabaseExample =
      new azurerm.cosmosdbSqlDatabase.CosmosdbSqlDatabase(this, "example_3", {
        accountName: cdktf.Token.asString(azurermCosmosdbAccountExample.name),
        name: "cosmos-sql-db",
        resourceGroupName: cdktf.Token.asString(
          azurermCosmosdbAccountExample.resourceGroupName
        ),
        throughput: 400,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlDatabaseExample.overrideLogicalId("example");
    const azurermCosmosdbSqlContainerExample =
      new azurerm.cosmosdbSqlContainer.CosmosdbSqlContainer(this, "example_4", {
        accountName: cdktf.Token.asString(azurermCosmosdbAccountExample.name),
        databaseName: cdktf.Token.asString(
          azurermCosmosdbSqlDatabaseExample.name
        ),
        name: "examplecontainer",
        partitionKeyPath: "foo",
        resourceGroupName: cdktf.Token.asString(
          azurermCosmosdbAccountExample.resourceGroupName
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbSqlContainerExample.overrideLogicalId("example");
    const azurermStreamAnalyticsOutputCosmosdbExample =
      new azurerm.streamAnalyticsOutputCosmosdb.StreamAnalyticsOutputCosmosdb(
        this,
        "example_5",
        {
          containerName: cdktf.Token.asString(
            azurermCosmosdbSqlContainerExample.name
          ),
          cosmosdbAccountKey: cdktf.Token.asString(
            azurermCosmosdbAccountExample.primaryKey
          ),
          cosmosdbSqlDatabaseId: cdktf.Token.asString(
            azurermCosmosdbSqlDatabaseExample.id
          ),
          documentId: "exampledocumentid",
          name: "output-to-cosmosdb",
          streamAnalyticsJobId: cdktf.Token.asString(
            dataAzurermStreamAnalyticsJobExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStreamAnalyticsOutputCosmosdbExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name of the Stream Analytics Output. Changing this forces a new resource to be created.

* `streamAnalyticsJobId` - (Required) The ID of the Stream Analytics Job. Changing this forces a new resource to be created.

* `cosmosdbAccountKey` - (Required) The account key for the CosmosDB database.

* `cosmosdbSqlDatabaseId` - (Required) The ID of the CosmosDB database.

* `containerName` - (Required) The name of the CosmosDB container.

* `documentId` - (Optional) The name of the field in output events used to specify the primary key which insert or update operations are based on.

* `partitionKey` - (Optional) The name of the field in output events used to specify the key for partitioning output across collections. If `containerName` contains `{partition}` token, this property is required to be specified.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Stream Analytics Output for CosmosDB.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Stream Analytics Output for CosmosDB.
* `read` - (Defaults to 5 minutes) Used when retrieving the Stream Analytics Output for CosmosDB.
* `update` - (Defaults to 30 minutes) Used when updating the Stream Analytics Output for CosmosDB.
* `delete` - (Defaults to 30 minutes) Used when deleting the Stream Analytics Output for CosmosDB.

## Import

Stream Analytics Outputs for CosmosDB can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_stream_analytics_output_cosmosdb.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b738567caf782d6a5f6a13627d51fd831a554da2bf9f802327ddd0bd01669297 -->