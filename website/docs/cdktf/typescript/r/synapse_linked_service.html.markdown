---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_linked_service"
description: |-
  Manages a Linked Service (connection) between a resource and Azure Synapse. This is a generic resource that supports all different Linked Service Types.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_linked_service

Manages a Synapse Linked Service.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "BlobStorage",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_3", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        managedVirtualNetworkEnabled: true,
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermSynapseFirewallRuleExample =
      new azurerm.synapseFirewallRule.SynapseFirewallRule(this, "example_4", {
        endIpAddress: "255.255.255.255",
        name: "allowAll",
        startIpAddress: "0.0.0.0",
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseFirewallRuleExample.overrideLogicalId("example");
    const azurermSynapseIntegrationRuntimeAzureExample =
      new azurerm.synapseIntegrationRuntimeAzure.SynapseIntegrationRuntimeAzure(
        this,
        "example_5",
        {
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          synapseWorkspaceId: cdktf.Token.asString(
            azurermSynapseWorkspaceExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseIntegrationRuntimeAzureExample.overrideLogicalId("example");
    const azurermSynapseLinkedServiceExample =
      new azurerm.synapseLinkedService.SynapseLinkedService(this, "example_6", {
        dependsOn: [azurermSynapseFirewallRuleExample],
        integrationRuntime: {
          name: cdktf.Token.asString(
            azurermSynapseIntegrationRuntimeAzureExample.name
          ),
        },
        name: "example",
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
        type: "AzureBlobStorage",
        typePropertiesJson:
          '{\n  "connectionString": "${' +
          azurermStorageAccountExample.primaryConnectionString +
          '}"\n}\n',
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseLinkedServiceExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Synapse Linked Service. Changing this forces a new Synapse Linked Service to be created.

* `synapseWorkspaceId` - (Required) The Synapse Workspace ID in which to associate the Linked Service with. Changing this forces a new Synapse Linked Service to be created.

* `type` - (Required) The type of data stores that will be connected to Synapse. Valid Values include `amazonMws`, `amazonRdsForOracle`, `amazonRdsForSqlServer`, `amazonRedshift`, `amazonS3`, `azureBatch`. Changing this forces a new resource to be created.
`azureBlobFs`, `azureBlobStorage`, `azureDataExplorer`, `azureDataLakeAnalytics`, `azureDataLakeStore`, `azureDatabricks`, `azureDatabricksDeltaLake`, `azureFileStorage`, `azureFunction`,
`azureKeyVault`, `azureMl`, `azureMlService`, `azureMariaDb`, `azureMySql`, `azurePostgreSql`, `azureSqlDw`, `azureSqlDatabase`, `azureSqlMi`, `azureSearch`, `azureStorage`,
`azureTableStorage`, `cassandra`, `commonDataServiceForApps`, `concur`, `cosmosDb`, `cosmosDbMongoDbApi`, `couchbase`, `customDataSource`, `db2`, `drill`, 
`dynamics`, `dynamicsAx`, `dynamicsCrm`, `eloqua`, `fileServer`, `ftpServer`, `googleAdWords`, `googleBigQuery`, `googleCloudStorage`, `greenplum`, `hBase`, `hdInsight`,
`hdInsightOnDemand`, `httpServer`, `hdfs`, `hive`, `hubspot`, `impala`, `informix`, `jira`, `linkedService`, `magento`, `mariaDb`, `marketo`, `microsoftAccess`, `mongoDb`,
`mongoDbAtlas`, `mongoDbV2`, `mySql`, `netezza`, `oData`, `odbc`, `office365`, `oracle`, `oracleServiceCloud`, `paypal`, `phoenix`, `postgreSql`, `presto`, `quickBooks`, 
`responsys`, `restService`, `sqlServer`, `salesforce`, `salesforceMarketingCloud`, `salesforceServiceCloud`, `sapBw`, `sapCloudForCustomer`, `sapEcc`, `sapHana`, `sapOpenHub`,
`sapTable`, `serviceNow`, `sftp`, `sharePointOnlineList`, `shopify`, `snowflake`, `spark`, `square`, `sybase`, `teradata`, `vertica`, `web`, `xero`, `zoho`.

* `typePropertiesJson` - (Required) A JSON object that contains the properties of the Synapse Linked Service.

---

* `additionalProperties` - (Optional) A map of additional properties to associate with the Synapse Linked Service.

* `annotations` - (Optional) List of tags that can be used for describing the Synapse Linked Service.

* `description` - (Optional) The description for the Synapse Linked Service.

* `integrationRuntime` - (Optional) A `integrationRuntime` block as defined below.

* `parameters` - (Optional) A map of parameters to associate with the Synapse Linked Service.

---

A `integrationRuntime` block supports the following:

* `name` - (Required) The integration runtime reference to associate with the Synapse Linked Service.

* `parameters` - (Optional) A map of parameters to associate with the integration runtime.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse Linked Service.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Linked Service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Linked Service.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Linked Service.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Linked Service.

## Import

Synapse Linked Services can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_linked_service.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/linkedServices/linkedservice1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-c026b8ab8a8101478978ea96fbadcc1f36d28a4ab57babdc72e3745a5b6cb9aa -->