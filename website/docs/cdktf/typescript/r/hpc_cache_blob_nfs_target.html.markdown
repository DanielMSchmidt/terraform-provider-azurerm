---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_hpc_cache_blob_nfs_target"
description: |-
  Manages a Blob NFSv3 Target within a HPC Cache.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_hpc_cache_blob_nfs_target

Manages a Blob NFSv3 Target within a HPC Cache.

~> **NOTE:**: By request of the service team the provider no longer automatically registering the `microsoftStorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

~> **NOTE:**: This resource depends on the NFSv3 enabled Storage Account, which has some prerequisites need to meet. Please checkout: <https://docs.microsoft.com/azure/storage/blobs/network-file-system-protocol-support-how-to?tabs=azure-powershell>.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azuread from "./.gen/providers/azuread";
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
    For a more precise conversion please use the --provider flag in convert.*/
    new azuread.provider.AzureadProvider(this, "azuread", {});
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "west europe",
        name: "example-rg",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_3", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const dataAzureadServicePrincipalExample =
      new azuread.dataAzureadServicePrincipal.DataAzureadServicePrincipal(
        this,
        "example_4",
        {
          display_name: "HPC Cache Resource Provider",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzureadServicePrincipalExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_5", {
      addressPrefixes: ["10.0.2.0/24"],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      serviceEndpoints: ["Microsoft.Storage"],
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermHpcCacheExample = new azurerm.hpcCache.HpcCache(
      this,
      "example_6",
      {
        cacheSizeInGb: 3072,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-hpc-cache",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "Standard_2G",
        subnetId: cdktf.Token.asString(azurermSubnetExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermHpcCacheExample.overrideLogicalId("example");
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_7", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        enableHttpsTrafficOnly: false,
        isHnsEnabled: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageaccount",
        networkRules: {
          defaultAction: "Deny",
          virtualNetworkSubnetIds: [
            cdktf.Token.asString(azurermSubnetExample.id),
          ],
        },
        nfsv3Enabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermResourceGroupTemplateDeploymentStorageContainers =
      new azurerm.resourceGroupTemplateDeployment.ResourceGroupTemplateDeployment(
        this,
        "storage-containers",
        {
          deploymentMode: "Incremental",
          name: "example-deployment",
          parametersContent: cdktf.Fn.jsonencode({
            containerName: {
              value: "example-container",
            },
            location: {
              value: azurermStorageAccountExample.location,
            },
            storageAccountName: {
              value: azurermStorageAccountExample.name,
            },
          }),
          resourceGroupName: cdktf.Token.asString(
            azurermStorageAccountExample.resourceGroupName
          ),
          templateContent:
            '{\n  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",\n  "contentVersion": "1.0.0.0",\n  "parameters": {\n    "storageAccountName": {\n      "type": "String"\n    },\n    "containerName": {\n      "type": "String"\n    },\n    "location": {\n      "type": "String"\n    }\n  },\n  "resources": [\n    {\n      "type": "Microsoft.Storage/storageAccounts",\n      "apiVersion": "2019-06-01",\n      "name": "[parameters(\'storageAccountName\')]",\n      "location": "[parameters(\'location\')]",\n      "sku": {\n        "name": "Standard_LRS",\n        "tier": "Standard"\n      },\n      "kind": "StorageV2",\n      "properties": {\n        "accessTier": "Hot"\n      },\n      "resources": [\n        {\n          "type": "blobServices/containers",\n          "apiVersion": "2019-06-01",\n          "name": "[concat(\'default/\', parameters(\'containerName\'))]",\n          "dependsOn": [\n            "[parameters(\'storageAccountName\')]"\n          ]\n        }\n      ]\n    }\n  ],\n\n  "outputs": {\n    "id": {\n      "type": "String",\n      "value": "[resourceId(\'Microsoft.Storage/storageAccounts/blobServices/containers\', parameters(\'storageAccountName\'), \'default\', parameters(\'containerName\'))]"\n    }\n  }\n}\n',
        }
      );
    new azurerm.roleAssignment.RoleAssignment(
      this,
      "example_storage_account_contrib",
      {
        principalId: cdktf.Token.asString(
          dataAzureadServicePrincipalExample.objectId
        ),
        roleDefinitionName: "Storage Account Contributor",
        scope: cdktf.Token.asString(azurermStorageAccountExample.id),
      }
    );
    new azurerm.roleAssignment.RoleAssignment(
      this,
      "example_storage_blob_data_contrib",
      {
        principalId: cdktf.Token.asString(
          dataAzureadServicePrincipalExample.objectId
        ),
        roleDefinitionName: "Storage Blob Data Contributor",
        scope: cdktf.Token.asString(azurermStorageAccountExample.id),
      }
    );
    const azurermHpcCacheBlobNfsTargetExample =
      new azurerm.hpcCacheBlobNfsTarget.HpcCacheBlobNfsTarget(
        this,
        "example_11",
        {
          cacheName: cdktf.Token.asString(azurermHpcCacheExample.name),
          name: "example-hpc-target",
          namespacePath: "/p1",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          storageContainerId: cdktf.Token.asString(
            cdktf.propertyAccess(
              cdktf.Fn.jsondecode(
                cdktf.Token.asString(
                  azurermResourceGroupTemplateDeploymentStorageContainers.outputContent
                )
              ),
              ["id", "value"]
            )
          ),
          usageModel: "READ_HEAVY_INFREQ",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermHpcCacheBlobNfsTargetExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `cacheName` - (Required) The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.

* `name` - (Required) The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.

* `namespacePath` - (Required) The client-facing file path of the HPC Cache Blob NFS Target.

* `resourceGroupName` - (Required) The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.

* `storageContainerId` - (Required) The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.

-> **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azurermStorageContainer` Data Source/Resource as `resourceManagerId`.

* `usageModel` - (Required) The type of usage of the HPC Cache Blob NFS Target. Possible values are: `readHeavyInfreq`, `readHeavyCheck180`, `writeWorkload15`, `writeAround`, `writeWorkloadCheck30`, `writeWorkloadCheck60` and `writeWorkloadCloudws`.

---

* `accessPolicyName` - (Optional) The name of the access policy applied to this target. Defaults to `default`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the HPC Cache Blob NFS Target.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the HPC Cache Blob NFS Target.
* `read` - (Defaults to 5 minutes) Used when retrieving the HPC Cache Blob NFS Target.
* `update` - (Defaults to 30 minutes) Used when updating the HPC Cache Blob NFS Target.
* `delete` - (Defaults to 30 minutes) Used when deleting the HPC Cache Blob NFS Target.

## Import

HPC Cache Blob NFS Targets can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_hpc_cache_blob_nfs_target.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2765678ba7b056c638dc1745ff4a767d730d1046b04869d8696b228c2fd1dccd -->