---
subcategory: "Digital Twins"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_digital_twins_time_series_database_connection"
description: |-
  Manages a Digital Twins Time Series Database Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_digital_twins_time_series_database_connection

Manages a Digital Twins Time Series Database Connection.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermDigitalTwinsInstanceExample =
      new azurerm.digitalTwinsInstance.DigitalTwinsInstance(this, "example_1", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-DT",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDigitalTwinsInstanceExample.overrideLogicalId("example");
    const azurermEventhubNamespaceExample =
      new azurerm.eventhubNamespace.EventhubNamespace(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "exampleEventHubNamespace",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubNamespaceExample.overrideLogicalId("example");
    const azurermKustoClusterExample = new azurerm.kustoCluster.KustoCluster(
      this,
      "example_3",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplekc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          capacity: 1,
          name: "Dev(No SLA)_Standard_D11_v2",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKustoClusterExample.overrideLogicalId("example");
    const azurermKustoDatabaseExample = new azurerm.kustoDatabase.KustoDatabase(
      this,
      "example_4",
      {
        clusterName: cdktf.Token.asString(azurermKustoClusterExample.name),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-kusto-database",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKustoDatabaseExample.overrideLogicalId("example");
    const azurermKustoDatabasePrincipalAssignmentExample =
      new azurerm.kustoDatabasePrincipalAssignment.KustoDatabasePrincipalAssignment(
        this,
        "example_5",
        {
          clusterName: cdktf.Token.asString(azurermKustoClusterExample.name),
          databaseName: cdktf.Token.asString(azurermKustoDatabaseExample.name),
          name: "dataadmin",
          principalId: cdktf.Token.asString(
            cdktf.propertyAccess(azurermDigitalTwinsInstanceExample.identity, [
              "0",
              "principal_id",
            ])
          ),
          principalType: "App",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          role: "Admin",
          tenantId: cdktf.Token.asString(
            cdktf.propertyAccess(azurermDigitalTwinsInstanceExample.identity, [
              "0",
              "tenant_id",
            ])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKustoDatabasePrincipalAssignmentExample.overrideLogicalId("example");
    const azurermRoleAssignmentDatabaseContributor =
      new azurerm.roleAssignment.RoleAssignment(this, "database_contributor", {
        principalId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermDigitalTwinsInstanceExample.identity, [
            "0",
            "principal_id",
          ])
        ),
        roleDefinitionName: "Contributor",
        scope: cdktf.Token.asString(azurermKustoDatabaseExample.id),
      });
    const azurermEventhubExample = new azurerm.eventhub.Eventhub(
      this,
      "example_7",
      {
        messageRetention: 7,
        name: "exampleEventHub",
        namespaceName: cdktf.Token.asString(
          azurermEventhubNamespaceExample.name
        ),
        partitionCount: 2,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubExample.overrideLogicalId("example");
    const azurermEventhubConsumerGroupExample =
      new azurerm.eventhubConsumerGroup.EventhubConsumerGroup(
        this,
        "example_8",
        {
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          name: "example-consumergroup",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceExample.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubConsumerGroupExample.overrideLogicalId("example");
    const azurermRoleAssignmentEventhubDataOwner =
      new azurerm.roleAssignment.RoleAssignment(this, "eventhub_data_owner", {
        principalId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermDigitalTwinsInstanceExample.identity, [
            "0",
            "principal_id",
          ])
        ),
        roleDefinitionName: "Azure Event Hubs Data Owner",
        scope: cdktf.Token.asString(azurermEventhubExample.id),
      });
    const azurermDigitalTwinsTimeSeriesDatabaseConnectionExample =
      new azurerm.digitalTwinsTimeSeriesDatabaseConnection.DigitalTwinsTimeSeriesDatabaseConnection(
        this,
        "example_10",
        {
          dependsOn: [
            azurermRoleAssignmentDatabaseContributor,
            azurermRoleAssignmentEventhubDataOwner,
            azurermKustoDatabasePrincipalAssignmentExample,
          ],
          digitalTwinsId: cdktf.Token.asString(
            azurermDigitalTwinsInstanceExample.id
          ),
          eventhubConsumerGroupName: cdktf.Token.asString(
            azurermEventhubConsumerGroupExample.name
          ),
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          eventhubNamespaceEndpointUri:
            "sb://${" +
            azurermEventhubNamespaceExample.name +
            "}.servicebus.windows.net",
          eventhubNamespaceId: cdktf.Token.asString(
            azurermEventhubNamespaceExample.id
          ),
          kustoClusterId: cdktf.Token.asString(azurermKustoClusterExample.id),
          kustoClusterUri: cdktf.Token.asString(azurermKustoClusterExample.uri),
          kustoDatabaseName: cdktf.Token.asString(
            azurermKustoDatabaseExample.name
          ),
          kustoTableName: "exampleTable",
          name: "example-connection",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDigitalTwinsTimeSeriesDatabaseConnectionExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Digital Twins Time Series Database Connection. Changing this forces a new resource to be created.

* `digitalTwinsId` - (Required) The ID of the Digital Twins. Changing this forces a new resource to be created.

* `eventhubName` - (Required) Name of the Event Hub. Changing this forces a new resource to be created.

* `eventhubNamespaceEndpointUri` - (Required) URI of the Event Hub Namespace. Changing this forces a new resource to be created.

* `eventhubNamespaceId` - (Required) The ID of the Event Hub Namespace. Changing this forces a new resource to be created.

* `kustoClusterId` - (Required) The ID of the Kusto Cluster. Changing this forces a new resource to be created.

* `kustoClusterUri` - (Required) URI of the Kusto Cluster. Changing this forces a new resource to be created.

* `kustoDatabaseName` - (Required) Name of the Kusto Database. Changing this forces a new resource to be created.

---

* `eventhubConsumerGroupName` - (Optional) Name of the Event Hub Consumer Group. Changing this forces a new resource to be created. Defaults to `$default`.

* `kustoTableName` - (Optional) Name of the Kusto Table. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported: 

* `id` - The ID of the Digital Twins Time Series Database Connection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Digital Twins Time Series Database Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Digital Twins Time Series Database Connection.
* `delete` - (Defaults to 30 minutes) Used when deleting the Digital Twins Time Series Database Connection.

## Import

Digital Twins Time Series Database Connections can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_digital_twins_time_series_database_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DigitalTwins/digitalTwinsInstances/dt1/timeSeriesDatabaseConnections/connection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ddc079c0526e6288d2c0bf349bb94a7f1d3a785ff727fc8c923ea140447584ae -->