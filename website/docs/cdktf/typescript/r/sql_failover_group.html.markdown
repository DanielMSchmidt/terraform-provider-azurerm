---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_sql_failover_group"
description: |-
  Manages a SQL Failover Group.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_sql_failover_group

Create a failover group of databases on a collection of Azure SQL servers.

-> **Note:** The `azurermSqlFailoverGroup` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the [`azurermMssqlFailoverGroup`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_failover_group) resource instead.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSqlServerPrimary = new azurerm.sqlServer.SqlServer(
      this,
      "primary",
      {
        administratorLogin: "sqladmin",
        administratorLoginPassword: "pa$w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "sql-primary",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        version: "12.0",
      }
    );
    const azurermSqlServerSecondary = new azurerm.sqlServer.SqlServer(
      this,
      "secondary",
      {
        administratorLogin: "sqladmin",
        administratorLoginPassword: "pa$w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "sql-secondary",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        version: "12.0",
      }
    );
    const azurermSqlDatabaseDb1 = new azurerm.sqlDatabase.SqlDatabase(
      this,
      "db1",
      {
        location: cdktf.Token.asString(azurermSqlServerPrimary.location),
        name: "db1",
        resourceGroupName: cdktf.Token.asString(
          azurermSqlServerPrimary.resourceGroupName
        ),
        serverName: cdktf.Token.asString(azurermSqlServerPrimary.name),
      }
    );
    const azurermSqlFailoverGroupExample =
      new azurerm.sqlFailoverGroup.SqlFailoverGroup(this, "example_4", {
        databases: [cdktf.Token.asString(azurermSqlDatabaseDb1.id)],
        name: "example-failover-group",
        partnerServers: [
          {
            id: cdktf.Token.asString(azurermSqlServerSecondary.id),
          },
        ],
        readWriteEndpointFailoverPolicy: {
          graceMinutes: 60,
          mode: "Automatic",
        },
        resourceGroupName: cdktf.Token.asString(
          azurermSqlServerPrimary.resourceGroupName
        ),
        serverName: cdktf.Token.asString(azurermSqlServerPrimary.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSqlFailoverGroupExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `n`name` (Required) The name of the failover group. Changing this forces a new resource to be created.

* `r`resourceGroupName` (Required) The name of the resource group containing the SQL server Changing this forces a new resource to be created.

* `s`serverName` (Required) The name of the primary SQL server. Changing this forces a new resource to be created. 

* `d`databases` (Optional) A list of database ids to add to the failover group

-> **NOTE:** The failover group will create a secondary database for each database listed in `d`databases`If the secondary databases need to be managed through Terraform, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first. Please refer to the detailed example which can be found in [the `.`/examples/sqlAzure/failoverGroup`irectory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/sql-azure/failover_group)

* `p`partnerServers` (Required) A list of secondary servers as documented below

* `r`readWriteEndpointFailoverPolicy` (Required) A read/write policy as documented below

* `r`readonlyEndpointFailoverPolicy` (Optional) a read-only policy as documented below

* `t`tags` (Optional) A mapping of tags to assign to the resource.

---

The `p`partnerServers`lock supports the following:

* `i`id` (Required) the SQL server ID

---

The `r`readWriteEndpointFailoverPolicy`lock supports the following:

* `m`mode` (Required) the failover mode. Possible values are `M`manual``A`automatic`* `g`graceMinutes` (Optional) Applies only if `m`mode`s `A`automatic`The grace period in minutes before failover with data loss is attempted

---

The `r`readonlyEndpointFailoverPolicy`lock supports the following:

* `m`mode` (Required) Failover policy for the read-only endpoint. Possible values are `E`enabled`and `D`disabled`## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `i`id` The failover group ID.
* `l`location` the location of the failover group.
* `s`serverName` (Required) the name of the primary SQL Database Server. Changing this forces a new resource to be created.
* `r`role` local replication role of the failover group instance.
* `d`databases` (Optional) list of databases in the failover group.
* `p`partnerServers` (Required) list of partner server information for the failover group.

## Timeouts

The `t`timeouts`lock allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `c`create` (Defaults to 30 minutes) Used when creating the SQL Failover Group.
* `u`update` (Defaults to 30 minutes) Used when updating the SQL Failover Group.
* `r`read` (Defaults to 5 minutes) Used when retrieving the SQL Failover Group.
* `d`delete` (Defaults to 30 minutes) Used when deleting the SQL Failover Group.

## Import

SQL Failover Groups can be imported using the `r`resource id`e.g.

```shell
terraform import azurerm_sql_failover_group.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/failoverGroups/group1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d4c61a834a8f5b49c3cc5c20e75fb8a833459106301838e21a1ef8eeee5b723a -->