---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_sql_firewall_rule"
description: |-
  Manages a SQL Firewall Rule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_sql_firewall_rule

Allows you to manage an Azure SQL Firewall Rule.

-> **Note:** The `azurermSqlFirewallRule` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the [`azurermMssqlFirewallRule`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_firewall_rule) resource instead.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSqlServerExample = new azurerm.sqlServer.SqlServer(
      this,
      "example_1",
      {
        administratorLogin: "4dm1n157r470r",
        administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "mysqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        version: "12.0",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSqlServerExample.overrideLogicalId("example");
    const azurermSqlFirewallRuleExample =
      new azurerm.sqlFirewallRule.SqlFirewallRule(this, "example_2", {
        endIpAddress: "10.0.17.62",
        name: "FirewallRule1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermSqlServerExample.name),
        startIpAddress: "10.0.17.62",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSqlFirewallRuleExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the firewall rule. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which to create the SQL Server. Changing this forces a new resource to be created.

* `serverName` - (Required) The name of the SQL Server on which to create the Firewall Rule. Changing this forces a new resource to be created.

* `startIpAddress` - (Required) The starting IP address to allow through the firewall for this rule.

* `endIpAddress` - (Required) The ending IP address to allow through the firewall for this rule.

-> **NOTE:** The Azure feature `Allow access to Azure services` can be enabled by setting `startIpAddress` and `endIpAddress` to `0000` which ([is documented in the Azure API Docs](https://docs.microsoft.com/rest/api/sql/firewallrules/createorupdate)).

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The SQL Firewall Rule ID.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the SQL Firewall Rule.
* `update` - (Defaults to 30 minutes) Used when updating the SQL Firewall Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the SQL Firewall Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the SQL Firewall Rule.

## Import

SQL Firewall Rules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_sql_firewall_rule.rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/firewallRules/rule1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-c6833c6d5635a85de386545ba4cbc3302e07625673dc65ae37815086ea2b8305 -->