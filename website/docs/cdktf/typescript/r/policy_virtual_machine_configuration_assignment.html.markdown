---
subcategory: "Policy"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_policy_virtual_machine_configuration_assignment"
description: |-
  Applies a Guest Configuration Policy to a Virtual Machine.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_policy_virtual_machine_configuration_assignment

Applies a Guest Configuration Policy to a Virtual Machine.

~> **NOTE:** You can create Guest Configuration Policies without defining a `azurermVirtualMachineExtension` resource, however the policies will not be executed until a `azurermVirtualMachineExtension` has been provisioned to the virtual machine.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-gca",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_2", {
      addressPrefixes: ["10.0.2.0/24"],
      name: "internal",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermNetworkInterfaceExample =
      new azurerm.networkInterface.NetworkInterface(this, "example_3", {
        ipConfiguration: [
          {
            name: "internal",
            privateIpAddressAllocation: "Dynamic",
            subnetId: cdktf.Token.asString(azurermSubnetExample.id),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-nic",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkInterfaceExample.overrideLogicalId("example");
    const azurermWindowsVirtualMachineExample =
      new azurerm.windowsVirtualMachine.WindowsVirtualMachine(
        this,
        "example_4",
        {
          adminPassword: "P@$w0rd1234!",
          adminUsername: "adminuser",
          identity: {
            type: "SystemAssigned",
          },
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "examplevm",
          networkInterfaceIds: [
            cdktf.Token.asString(azurermNetworkInterfaceExample.id),
          ],
          osDisk: {
            caching: "ReadWrite",
            storageAccountType: "Standard_LRS",
          },
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          size: "Standard_F2",
          sourceImageReference: {
            offer: "WindowsServer",
            publisher: "MicrosoftWindowsServer",
            sku: "2019-Datacenter",
            version: "latest",
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermWindowsVirtualMachineExample.overrideLogicalId("example");
    const azurermPolicyVirtualMachineConfigurationAssignmentExample =
      new azurerm.policyVirtualMachineConfigurationAssignment.PolicyVirtualMachineConfigurationAssignment(
        this,
        "example_5",
        {
          configuration: {
            assignmentType: "ApplyAndMonitor",
            parameter: [
              {
                name: "Minimum Password Length;ExpectedValue",
                value: "16",
              },
              {
                name: "Minimum Password Age;ExpectedValue",
                value: "0",
              },
              {
                name: "Maximum Password Age;ExpectedValue",
                value: "30,45",
              },
              {
                name: "Enforce Password History;ExpectedValue",
                value: "10",
              },
              {
                name: "Password Must Meet Complexity Requirements;ExpectedValue",
                value: "1",
              },
            ],
            version: "1.*",
          },
          location: cdktf.Token.asString(
            azurermWindowsVirtualMachineExample.location
          ),
          name: "AzureWindowsBaseline",
          virtualMachineId: cdktf.Token.asString(
            azurermWindowsVirtualMachineExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPolicyVirtualMachineConfigurationAssignmentExample.overrideLogicalId(
      "example"
    );
    const azurermVirtualMachineExtensionExample =
      new azurerm.virtualMachineExtension.VirtualMachineExtension(
        this,
        "example_6",
        {
          autoUpgradeMinorVersion: cdktf.Token.asBoolean("true"),
          name: "AzurePolicyforWindows",
          publisher: "Microsoft.GuestConfiguration",
          type: "ConfigurationforWindows",
          typeHandlerVersion: "1.29",
          virtualMachineId: cdktf.Token.asString(
            azurermWindowsVirtualMachineExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualMachineExtensionExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* ``name`- (Required) The name of the Guest Configuration that will be assigned in this Guest Configuration Assignment. Changing this forces a new resource to be created.

* ``location`- (Required) The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.

* ``virtualMachineId`- (Required) The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.

* ``configuration`- (Required) A ``configuration`block as defined below.

---

A ``configuration`block supports the following:

* ``assignmentType`- (Optional) The assignment type for the Guest Configuration Assignment. Possible values are ``audit` ``applyAndAutoCorrect` ``applyAndMonitor`and ``deployAndAutoCorrect`

* ``contentHash`- (Optional) The content hash for the Guest Configuration package.

* ``contentUri`- (Optional) The content URI where the Guest Configuration package is stored.

~> **NOTE:** When deploying a Custom Guest Configuration package the ``contentHash`and ``contentUri`fields must be defined. For Built-in Guest Configuration packages, such as the ``azureWindowsBaseline`package, the ``contentHash`and ``contentUri`should not be defined, rather these fields will be returned after the Built-in Guest Configuration package has been provisioned. For more information on guest configuration assignments please see the [product documentation](https://docs.microsoft.com/azure/governance/policy/concepts/guest-configuration-assignments).

* ``parameter`- (Optional) One or more ``parameter`blocks as defined below which define what configuration parameters and values against.

* ``version`- (Optional) The version of the Guest Configuration that will be assigned in this Guest Configuration Assignment.

---

A ``parameter`block supports the following:

* ``name`- (Required) The name of the configuration parameter to check.

* ``value`- (Required) The value to check the configuration parameter with.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* ``id`- The ID of the Policy Virtual Machine Configuration Assignment.

## Timeouts

The ``timeouts`block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* ``create`- (Defaults to 30 minutes) Used when creating the Policy Virtual Machine Configuration Assignment.
* ``update`- (Defaults to 30 minutes) Used when updating the Policy Virtual Machine Configuration Assignment.
* ``read`- (Defaults to 5 minutes) Used when retrieving the Policy Virtual Machine Configuration Assignment.
* ``delete`- (Defaults to 30 minutes) Used when deleting the Policy Virtual Machine Configuration Assignment.

## Import

Policy Virtual Machine Configuration Assignments can be imported using the ``resource id` e.g.

```shell
terraform import azurerm_policy_virtual_machine_configuration_assignment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/assignment1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-317dc300961f4807840360737c78595eea36a842c9055c630713c5bb73b26c73 -->