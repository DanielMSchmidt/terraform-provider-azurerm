---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_dev_tool_portal"
description: |-
  Manages a Spring Cloud Dev Tool Portal.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_dev_tool_portal

-> **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

Manages a Spring Cloud Dev Tool Portal.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "E0",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermSpringCloudDevToolPortalExample =
      new azurerm.springCloudDevToolPortal.SpringCloudDevToolPortal(
        this,
        "example_3",
        {
          applicationAcceleratorEnabled: true,
          applicationLiveViewEnabled: true,
          name: "default",
          publicNetworkAccessEnabled: true,
          springCloudServiceId: cdktf.Token.asString(
            azurermSpringCloudServiceExample.id
          ),
          sso: {
            clientId: "example id",
            clientSecret: "example secret",
            metadataUrl: "https://www.example.com/metadata",
            scope: ["openid", "profile", "email"],
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudDevToolPortalExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.

* `springCloudServiceId` - (Required) The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.

---

* `applicationAcceleratorEnabled` - (Optional) Should the Accelerator plugin be enabled?

* `applicationLiveViewEnabled` - (Optional) Should the Application Live View be enabled?

* `publicNetworkAccessEnabled` - (Optional) Is public network access enabled?

* `sso` - (Optional) A `sso` block as defined below.

---

A `sso` block supports the following:

* `clientId` - (Optional) Specifies the public identifier for the application.

* `clientSecret` - (Optional) Specifies the secret known only to the application and the authorization server.

* `metadataUrl` - (Optional) Specifies the URI of a JSON file with generic OIDC provider configuration.

* `scope` - (Optional) Specifies a list of specific actions applications can be allowed to do on a user's behalf.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported: 

* `id` - The ID of the Spring Cloud Dev Tool Portal.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Dev Tool Portal.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Dev Tool Portal.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Dev Tool Portal.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Dev Tool Portal.

## Import

Spring Cloud Dev Tool Portals can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_dev_tool_portal.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/Spring/service1/DevToolPortals/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-c4e8ba8b2ddb1cbf654bfe0aa3fb1f66481b76556adc44168472d2aaa021c84d -->