---
subcategory: "App Service (Web Apps)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_app_service_virtual_network_swift_connection"
description: |-
  Manages an App Service Virtual Network Association.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_app_service_virtual_network_swift_connection

Manages an App Service Virtual Network Association for [Regional VNet Integration](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration).

This resource can be used for both App Services and Function Apps.

~> **Note:** The following resources support associating the vNet for Regional vNet Integration directly on the resource and via the `azurermAppServiceVirtualNetworkSwiftConnection` resource. You can't use both simultaneously.

- [azurerm_linux_function_app](linux_function_app.html)
- [azurerm_linux_function_app_slot](linux_function_app_slot.html)
- [azurerm_linux_web_app](linux_web_app.html)
- [azurerm_linux_web_app_slot](linux_web_app_slot.html)
- [azurerm_logic_app_standard](logic_app_standard.html)
- [azurerm_windows_function_app](windows_function_app.html)
- [azurerm_windows_function_app_slot](windows_function_app_slot.html)
- [azurerm_windows_web_app](windows_web_app.html)
- [azurerm_windows_web_app_slot](windows_web_app_slot.html)

This resource requires the `microsoftNetwork/virtualNetworks/subnets/write` permission scope on the subnet.  

The resource specific vNet integration requires the `microsoftNetwork/virtualNetworks/subnets/join/action` permission scope.

There is a hard limit of [one VNet integration per App Service Plan](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration).
Multiple apps in the same App Service plan can use the same VNet.

## Example Usage (with App Service)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-virtual-network",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermAppServicePlanExample =
      new azurerm.appServicePlan.AppServicePlan(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-app-service-plan",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          size: "S1",
          tier: "Standard",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermAppServicePlanExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.0.1.0/24"],
      delegation: [
        {
          name: "example-delegation",
          serviceDelegation: {
            actions: ["Microsoft.Network/virtualNetworks/subnets/action"],
            name: "Microsoft.Web/serverFarms",
          },
        },
      ],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermAppServiceExample = new azurerm.appService.AppService(
      this,
      "example_4",
      {
        appServicePlanId: cdktf.Token.asString(azurermAppServicePlanExample.id),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-app-service",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermAppServiceExample.overrideLogicalId("example");
    const azurermAppServiceVirtualNetworkSwiftConnectionExample =
      new azurerm.appServiceVirtualNetworkSwiftConnection.AppServiceVirtualNetworkSwiftConnection(
        this,
        "example_5",
        {
          appServiceId: cdktf.Token.asString(azurermAppServiceExample.id),
          subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermAppServiceVirtualNetworkSwiftConnectionExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Example Usage (with Function App)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "functionsappexamplesa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_2", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-virtual-network",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermAppServicePlanExample =
      new azurerm.appServicePlan.AppServicePlan(this, "example_3", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-app-service-plan",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          size: "S1",
          tier: "Standard",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermAppServicePlanExample.overrideLogicalId("example");
    const azurermFunctionAppExample = new azurerm.functionApp.FunctionApp(
      this,
      "example_4",
      {
        appServicePlanId: cdktf.Token.asString(azurermAppServicePlanExample.id),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-function-app",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        storageAccountAccessKey: cdktf.Token.asString(
          azurermStorageAccountExample.primaryAccessKey
        ),
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermFunctionAppExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_5", {
      addressPrefixes: ["10.0.1.0/24"],
      delegation: [
        {
          name: "example-delegation",
          serviceDelegation: {
            actions: ["Microsoft.Network/virtualNetworks/subnets/action"],
            name: "Microsoft.Web/serverFarms",
          },
        },
      ],
      name: "example-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermAppServiceVirtualNetworkSwiftConnectionExample =
      new azurerm.appServiceVirtualNetworkSwiftConnection.AppServiceVirtualNetworkSwiftConnection(
        this,
        "example_6",
        {
          appServiceId: cdktf.Token.asString(azurermFunctionAppExample.id),
          subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermAppServiceVirtualNetworkSwiftConnectionExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `appServiceId` - (Required) The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.

* `subnetId` - (Required) The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `microsoftWeb/serverFarms`).

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the App Service Virtual Network Association

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the App Service Virtual Network Association.
* `update` - (Defaults to 30 minutes) Used when updating the App Service Virtual Network Association.
* `read` - (Defaults to 5 minutes) Used when retrieving the App Service Virtual Network Association.
* `delete` - (Defaults to 30 minutes) Used when deleting the App Service Virtual Network Association.

## Import

App Service Virtual Network Associations can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_app_service_virtual_network_swift_connection.myassociation /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/config/virtualNetwork
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-18c1ad312c40db552fa9e54ef5ec8ac0a86ba2c55c2308e2418e472ee8abbd66 -->