---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_server"
description: |-
  Manages a Microsoft SQL Azure Database Server.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_server

Manages a Microsoft SQL Azure Database Server.

~> **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text.
[Read more about sensitive data in state](/docs/state/sensitive-data.html).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "database-rg",
      }
    );
    const azurermMssqlServerExample = new azurerm.mssqlServer.MssqlServer(
      this,
      "example_1",
      {
        administratorLogin: "missadministrator",
        administratorLoginPassword: "thisIsKat11",
        azureadAdministrator: {
          loginUsername: "AzureAD Admin",
          objectId: "00000000-0000-0000-0000-000000000000",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        minimumTlsVersion: "1.2",
        name: "mssqlserver",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        tags: {
          environment: "production",
        },
        version: "12.0",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlServerExample.overrideLogicalId("example");
  }
}

```

## Example Usage for Transparent Data Encryption(TDE) with a Customer Managed Key(CMK) during Create

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermUserAssignedIdentityExample =
      new azurerm.userAssignedIdentity.UserAssignedIdentity(this, "example_1", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-admin",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermUserAssignedIdentityExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_3",
      {
        accessPolicy: [
          {
            keyPermissions: [
              "Get",
              "List",
              "Create",
              "Delete",
              "Update",
              "Recover",
              "Purge",
              "GetRotationPolicy",
            ],
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
          {
            keyPermissions: ["Get", "WrapKey", "UnwrapKey"],
            objectId: cdktf.Token.asString(
              azurermUserAssignedIdentityExample.principalId
            ),
            tenantId: cdktf.Token.asString(
              azurermUserAssignedIdentityExample.tenantId
            ),
          },
        ],
        enabledForDiskEncryption: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "mssqltdeexample",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        softDeleteRetentionDays: 7,
        tenantId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.tenantId
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_4",
      {
        dependsOn: [azurermKeyVaultExample],
        keyOpts: ["unwrapKey", "wrapKey"],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "example-key",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermMssqlServerExample = new azurerm.mssqlServer.MssqlServer(
      this,
      "example_5",
      {
        administratorLogin: "Example-Administrator",
        administratorLoginPassword: "Example_Password!",
        azureadAdministrator: {
          loginUsername: cdktf.Token.asString(
            azurermUserAssignedIdentityExample.name
          ),
          objectId: cdktf.Token.asString(
            azurermUserAssignedIdentityExample.principalId
          ),
        },
        identity: {
          identityIds: [
            cdktf.Token.asString(azurermUserAssignedIdentityExample.id),
          ],
          type: "UserAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        minimumTlsVersion: "1.2",
        name: "example-resource",
        primaryUserAssignedIdentityId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.id
        ),
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        transparentDataEncryptionKeyVaultKeyId: cdktf.Token.asString(
          azurermKeyVaultKeyExample.id
        ),
        version: "12.0",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMssqlServerExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `version` - (Required) The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.

---

* `administratorLogin` - (Optional) The administrator login name for the new server. Required unless `azureadAuthenticationOnly` in the `azureadAdministrator` block is `true`. When omitted, Azure will generate a default username which cannot be subsequently changed. Changing this forces a new resource to be created.

* `administratorLoginPassword` - (Optional) The password associated with the `administratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx). Required unless `azureadAuthenticationOnly` in the `azureadAdministrator` block is `true`.

* `azureadAdministrator` - (Optional) An `azureadAdministrator` block as defined below.

* `connectionPolicy` - (Optional) The connection policy the server will use. Possible values are `default`, `proxy`, and `redirect`. Defaults to `default`.

* `identity` - (Optional) An `identity` block as defined below.

* `transparentDataEncryptionKeyVaultKeyId` - (Optional) The fully versioned `Key Vault` `key` URL (e.g. `'https://<yourVaultName>VaultAzureNet/keys/<yourKeyName>/<yourKeyVersion>`) to be used as the `Customer Managed Key`(CMK/BYOK) for the `Transparent Data Encryption`(TDE) layer.

~> **NOTE:**  To use `transparentDataEncryptionKeyVaultKeyId` a User Assigned identity must be specified in `primaryUserAssignedIdentityId`. System Assigned Identities are not supported.

~> **NOTE:** To successfully deploy a `Microsoft SQL Server` in CMK/BYOK TDE the `Key Vault` must have `softDelete` and `purge protection` enabled to protect from data loss due to accidental key and/or key vault deletion. The `Key Vault` and the `Microsoft SQL Server` `User Managed Identity Instance` must belong to the same `Azure Active Directory` `tenant`. 

~> **NOTE:**  Cross-tenant `Key Vault` and `Microsoft SQL Server` interactions are not supported. Please see the [product documentation](https://learn.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview?view=azuresql#requirements-for-configuring-customer-managed-tde) for more information. 

~> **NOTE:** When using a firewall with a `Key Vault`, you must enable the option `Allow trusted Microsoft services to bypass the firewall`.

* `minimumTlsVersion` - (Optional) The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: `10`, `11` , `12` and `disabled`. Defaults to `12`.

~> **NOTE:** The `minimumTlsVersion` is set to `disabled` means all TLS versions are allowed. After you enforce a version of `minimumTlsVersion`, it's not possible to revert to `disabled`.

* `publicNetworkAccessEnabled` - (Optional) Whether public network access is allowed for this server. Defaults to `true`.

* `outboundNetworkRestrictionEnabled` - (Optional) Whether outbound network traffic is restricted for this server. Defaults to `false`.

* `primaryUserAssignedIdentityId` - (Optional) Specifies the primary user managed identity id. Required if `type` is `userAssigned` and should be combined with `identityIds`.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

An `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be configured on this SQL Server. Possible values are `systemAssigned`, `userAssigned`.

* `identityIds` - (Optional) Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Server.

~> **NOTE:** This is required when `type` is set to `userAssigned`

~> **NOTE:** When `type` is set to `systemAssigned`, the assigned `principalId` and `tenantId` can be retrieved after the Microsoft SQL Server has been created. More details are available below.

---

An `azureadAdministrator` block supports the following:

* `loginUsername` - (Required) The login username of the Azure AD Administrator of this SQL Server.

* `objectId` - (Required) The object id of the Azure AD Administrator of this SQL Server.

* `tenantId` - (Optional) The tenant id of the Azure AD Administrator of this SQL Server.

* `azureadAuthenticationOnly` - (Optional) Specifies whether only AD Users and administrators (e.g. `azureadAdministrator0LoginUsername`) can be used to login, or also local database users (e.g. `administratorLogin`). When `true`, the `administratorLogin` and `administratorLoginPassword` properties can be omitted.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - the Microsoft SQL Server ID.

* `fullyQualifiedDomainName` - The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)

* `restorableDroppedDatabaseIds` - A list of dropped restorable database IDs on the server.

---

A `identity` block exports the following:

* `principalId` - The Principal ID for the Service Principal associated with the Identity of this SQL Server.

* `tenantId` - The Tenant ID for the Service Principal associated with the Identity of this SQL Server.

-> You can access the Principal ID via `azurermMssqlServerExampleIdentity0PrincipalId` and the Tenant ID via `azurermMssqlServerExampleIdentity0TenantId`

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Microsoft SQL Server.
* `update` - (Defaults to 60 minutes) Used when updating the Microsoft SQL Server.
* `read` - (Defaults to 5 minutes) Used when retrieving the Microsoft SQL Server.
* `delete` - (Defaults to 60 minutes) Used when deleting the Microsoft SQL Server.

## Import

SQL Servers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_server.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-676c88c0d63e354088eb2b53556dcedf4537f64f88b1068bf806b5ab0b3db697 -->