---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_object_replication"
description: |-
  Copy Block Blobs between a source storage account and a destination account
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_object_replication

Manages a Storage Object Replication.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupDst = new azurerm.resourceGroup.ResourceGroup(
      this,
      "dst",
      {
        location: "East US",
        name: "dstResourceGroupName",
      }
    );
    const azurermResourceGroupSrc = new azurerm.resourceGroup.ResourceGroup(
      this,
      "src",
      {
        location: "West Europe",
        name: "srcResourceGroupName",
      }
    );
    const azurermStorageAccountDst = new azurerm.storageAccount.StorageAccount(
      this,
      "dst_2",
      {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        blobProperties: {
          changeFeedEnabled: true,
          versioningEnabled: true,
        },
        location: cdktf.Token.asString(azurermResourceGroupDst.location),
        name: "dststorageaccount",
        resourceGroupName: cdktf.Token.asString(azurermResourceGroupDst.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountDst.overrideLogicalId("dst");
    const azurermStorageAccountSrc = new azurerm.storageAccount.StorageAccount(
      this,
      "src_3",
      {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        blobProperties: {
          changeFeedEnabled: true,
          versioningEnabled: true,
        },
        location: cdktf.Token.asString(azurermResourceGroupSrc.location),
        name: "srcstorageaccount",
        resourceGroupName: cdktf.Token.asString(azurermResourceGroupSrc.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountSrc.overrideLogicalId("src");
    const azurermStorageContainerDst =
      new azurerm.storageContainer.StorageContainer(this, "dst_4", {
        containerAccessType: "private",
        name: "dststrcontainer",
        storageAccountName: cdktf.Token.asString(azurermStorageAccountDst.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerDst.overrideLogicalId("dst");
    const azurermStorageContainerSrc =
      new azurerm.storageContainer.StorageContainer(this, "src_5", {
        containerAccessType: "private",
        name: "srcstrcontainer",
        storageAccountName: cdktf.Token.asString(azurermStorageAccountSrc.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerSrc.overrideLogicalId("src");
    new azurerm.storageObjectReplication.StorageObjectReplication(
      this,
      "example",
      {
        destinationStorageAccountId: cdktf.Token.asString(
          azurermStorageAccountDst.id
        ),
        rules: [
          {
            destinationContainerName: cdktf.Token.asString(
              azurermStorageContainerDst.name
            ),
            sourceContainerName: cdktf.Token.asString(
              azurermStorageContainerSrc.name
            ),
          },
        ],
        sourceStorageAccountId: cdktf.Token.asString(
          azurermStorageAccountSrc.id
        ),
      }
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `sourceStorageAccountId` - (Required) The ID of the source storage account. Changing this forces a new Storage Object Replication to be created.

* `destinationStorageAccountId` - (Required) The ID of the destination storage account. Changing this forces a new Storage Object Replication to be created.

* `rules` - (Required) One or more `rules` blocks as defined below.

---

A `rules` block supports the following:

* `sourceContainerName` - (Required) The source storage container name. Changing this forces a new Storage Object Replication to be created.

* `destinationContainerName` - (Required) The destination storage container name. Changing this forces a new Storage Object Replication to be created.

* `copyBlobsCreatedAfter` - (Optional) The time after which the Block Blobs created will be copies to the destination. Possible values are `onlyNewObjects`, `everything` and time in RFC3339 format: `20060102T15:04:00Z`.

* `filterOutBlobsWithPrefix` - (Optional) Specifies a list of filters prefixes, the blobs whose names begin with which will be replicated.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Object Replication in the destination storage account. It's composed as format `sourceObjectReplicationId;destinationObjectReplicationId`.

* `sourceObjectReplicationId` - The ID of the Object Replication in the source storage account.

* `destinationObjectReplicationId` - The ID of the Object Replication in the destination storage account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Object Replication.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Object Replication.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Object Replication.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Object Replication.

## Import

Storage Object Replication Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_object_replication.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/storageAccount1/objectReplicationPolicies/objectReplicationPolicy1;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group2/providers/Microsoft.Storage/storageAccounts/storageAccount2/objectReplicationPolicies/objectReplicationPolicy2
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e57941579a51c12a553ef3ab00c6ff3c1e2edb06f24cfcb8978620e4d5e3fed9 -->