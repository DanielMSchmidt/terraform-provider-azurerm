---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_postgresql_configuration"
description: |-
  Sets a PostgreSQL Configuration value on a PostgreSQL Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_postgresql_configuration

Sets a PostgreSQL Configuration value on a PostgreSQL Server.

## Disclaimers

~> **Note:** Since this resource is provisioned by default, the Azure Provider will not check for the presence of an existing resource prior to attempting to create it.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "api-rg-pro",
      }
    );
    const azurermPostgresqlServerExample =
      new azurerm.postgresqlServer.PostgresqlServer(this, "example_1", {
        administratorLogin: "psqladmin",
        administratorLoginPassword: "H@Sh1CoR3!",
        autoGrowEnabled: true,
        backupRetentionDays: 7,
        geoRedundantBackupEnabled: false,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "postgresql-server-1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "B_Gen5_2",
        sslEnforcementEnabled: true,
        storageMb: 5120,
        version: "9.5",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlServerExample.overrideLogicalId("example");
    const azurermPostgresqlConfigurationExample =
      new azurerm.postgresqlConfiguration.PostgresqlConfiguration(
        this,
        "example_2",
        {
          name: "backslash_quote",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          serverName: cdktf.Token.asString(azurermPostgresqlServerExample.name),
          value: "on",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPostgresqlConfigurationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the PostgreSQL Configuration, which needs [to be a valid PostgreSQL configuration name](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER). Changing this forces a new resource to be created.

* `serverName` - (Required) Specifies the name of the PostgreSQL Server. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which the PostgreSQL Server exists. Changing this forces a new resource to be created.

* `value` - (Required) Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the PostgreSQL Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the PostgreSQL Configuration.
* `update` - (Defaults to 30 minutes) Used when updating the PostgreSQL Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the PostgreSQL Configuration.
* `delete` - (Defaults to 30 minutes) Used when deleting the PostgreSQL Configuration.

## Import

PostgreSQL Configurations can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_postgresql_configuration.backslash_quote /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforPostgreSQL/servers/server1/configurations/backslash_quote
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-da9674f4725e018307fc86f7874f4c06761a19280b688a510a31178f5407ab54 -->