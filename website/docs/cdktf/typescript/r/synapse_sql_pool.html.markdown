---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_sql_pool"
description: |-
  Manages a Synapse SQL Pool.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_sql_pool

Manages a Synapse SQL Pool.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "BlobStorage",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_3", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermSynapseSqlPoolExample =
      new azurerm.synapseSqlPool.SynapseSqlPool(this, "example_4", {
        createMode: "Default",
        name: "examplesqlpool",
        skuName: "DW100c",
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseSqlPoolExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Synapse SQL Pool. Changing this forces a new synapse SQL Pool to be created.

* `synapseWorkspaceId` - (Required) The ID of Synapse Workspace within which this SQL Pool should be created. Changing this forces a new Synapse SQL Pool to be created.

* `skuName` - (Required) Specifies the SKU Name for this Synapse SQL Pool. Possible values are `dw100C`, `dw200C`, `dw300C`, `dw400C`, `dw500C`, `dw1000C`, `dw1500C`, `dw2000C`, `dw2500C`, `dw3000C`, `dw5000C`, `dw6000C`, `dw7500C`, `dw10000C`, `dw15000C` or `dw30000C`.

* `createMode` - (Optional) Specifies how to create the SQL Pool. Valid values are: `default`, `recovery` or `pointInTimeRestore`. Must be `default` to create a new database. Defaults to `default`. Changing this forces a new resource to be created.

* `collation` - (Optional) The name of the collation to use with this pool, only applicable when `createMode` is set to `default`. Azure default is `sqlLatin1GeneralCp1CiAs`. Changing this forces a new resource to be created.

* `dataEncrypted` - (Optional) Is transparent data encryption enabled? 

* `recoveryDatabaseId` - (Optional) The ID of the Synapse SQL Pool or SQL Database which is to back up, only applicable when `createMode` is set to `recovery`. Changing this forces a new Synapse SQL Pool to be created.

* `restore` - (Optional) A `restore` block as defined below. only applicable when `createMode` is set to `pointInTimeRestore`. Changing this forces a new resource to be created.

* `geoBackupPolicyEnabled` - (Optional) Is geo-backup policy enabled? Defaults to `true`.

* `tags` - (Optional) A mapping of tags which should be assigned to the Synapse SQL Pool.

---

An `restore` block supports the following:

* `sourceDatabaseId` - (Required) The ID of the Synapse SQL Pool or SQL Database which is to restore. Changing this forces a new Synapse SQL Pool to be created.

* `pointInTime` - (Required) Specifies the Snapshot time to restore formatted as an RFC3339 date string. Changing this forces a new Synapse SQL Pool to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse SQL Pool.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse SQL Pool.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse SQL Pool.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse SQL Pool.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse SQL Pool.

## Import

Synapse SQL Pool can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_sql_pool.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b8492dd5787ecbe9909036c98d8411dc6d3f38b63071cd2ffc17257914ec149b -->