---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_manager_deployment"
description: |-
  Manages a Network Manager Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_manager_deployment

Manages a Network Manager Deployment.

~> **NOTE on Virtual Network Peering:** Using Network Manager Deployment to deploy Connectivity Configuration may modify or delete existing Virtual Network Peering. At this time you should not use [Network Peering resource](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_network_peering) in conjunction with Network Manager Deployment. Doing so may cause a conflict of Peering configurations.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        flowTimeoutInMinutes: 10,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-net",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const dataAzurermSubscriptionCurrent =
      new azurerm.dataAzurermSubscription.DataAzurermSubscription(
        this,
        "current",
        {}
      );
    const azurermNetworkManagerExample =
      new azurerm.networkManager.NetworkManager(this, "example_3", {
        description: "example network manager",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-network-manager",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        scope: {
          subscriptionIds: [
            cdktf.Token.asString(dataAzurermSubscriptionCurrent.id),
          ],
        },
        scopeAccesses: ["Connectivity", "SecurityAdmin"],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerExample.overrideLogicalId("example");
    const azurermNetworkManagerNetworkGroupExample =
      new azurerm.networkManagerNetworkGroup.NetworkManagerNetworkGroup(
        this,
        "example_4",
        {
          name: "example-group",
          networkManagerId: cdktf.Token.asString(
            azurermNetworkManagerExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerNetworkGroupExample.overrideLogicalId("example");
    const azurermNetworkManagerConnectivityConfigurationExample =
      new azurerm.networkManagerConnectivityConfiguration.NetworkManagerConnectivityConfiguration(
        this,
        "example_5",
        {
          appliesToGroup: [
            {
              groupConnectivity: "None",
              networkGroupId: cdktf.Token.asString(
                azurermNetworkManagerNetworkGroupExample.id
              ),
            },
          ],
          connectivityTopology: "HubAndSpoke",
          hub: {
            resourceId: cdktf.Token.asString(azurermVirtualNetworkExample.id),
            resourceType: "Microsoft.Network/virtualNetworks",
          },
          name: "example-connectivity-conf",
          networkManagerId: cdktf.Token.asString(
            azurermNetworkManagerExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerConnectivityConfigurationExample.overrideLogicalId(
      "example"
    );
    const azurermNetworkManagerDeploymentExample =
      new azurerm.networkManagerDeployment.NetworkManagerDeployment(
        this,
        "example_6",
        {
          configurationIds: [
            cdktf.Token.asString(
              azurermNetworkManagerConnectivityConfigurationExample.id
            ),
          ],
          location: "eastus",
          networkManagerId: cdktf.Token.asString(
            azurermNetworkManagerExample.id
          ),
          scopeAccess: "Connectivity",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerDeploymentExample.overrideLogicalId("example");
  }
}

```

## example usage (Triggers)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        flowTimeoutInMinutes: 10,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-net",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const dataAzurermSubscriptionCurrent =
      new azurerm.dataAzurermSubscription.DataAzurermSubscription(
        this,
        "current",
        {}
      );
    const azurermNetworkManagerExample =
      new azurerm.networkManager.NetworkManager(this, "example_3", {
        description: "example network manager",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-network-manager",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        scope: {
          subscriptionIds: [
            cdktf.Token.asString(dataAzurermSubscriptionCurrent.id),
          ],
        },
        scopeAccesses: ["Connectivity", "SecurityAdmin"],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerExample.overrideLogicalId("example");
    const azurermNetworkManagerNetworkGroupExample =
      new azurerm.networkManagerNetworkGroup.NetworkManagerNetworkGroup(
        this,
        "example_4",
        {
          name: "example-group",
          networkManagerId: cdktf.Token.asString(
            azurermNetworkManagerExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerNetworkGroupExample.overrideLogicalId("example");
    const azurermNetworkManagerSecurityAdminConfigurationExample =
      new azurerm.networkManagerSecurityAdminConfiguration.NetworkManagerSecurityAdminConfiguration(
        this,
        "example_5",
        {
          name: "example-nmsac",
          networkManagerId: cdktf.Token.asString(
            azurermNetworkManagerExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerSecurityAdminConfigurationExample.overrideLogicalId(
      "example"
    );
    const azurermNetworkManagerAdminRuleCollectionExample =
      new azurerm.networkManagerAdminRuleCollection.NetworkManagerAdminRuleCollection(
        this,
        "example_6",
        {
          name: "example-nmarc",
          networkGroupIds: [
            cdktf.Token.asString(azurermNetworkManagerNetworkGroupExample.id),
          ],
          securityAdminConfigurationId: cdktf.Token.asString(
            azurermNetworkManagerSecurityAdminConfigurationExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerAdminRuleCollectionExample.overrideLogicalId(
      "example"
    );
    const azurermNetworkManagerAdminRuleExample =
      new azurerm.networkManagerAdminRule.NetworkManagerAdminRule(
        this,
        "example_7",
        {
          action: "Deny",
          adminRuleCollectionId: cdktf.Token.asString(
            azurermNetworkManagerAdminRuleCollectionExample.id
          ),
          description: "example",
          destination: [
            {
              addressPrefix: "*",
              addressPrefixType: "IPPrefix",
            },
          ],
          destinationPortRanges: ["80"],
          direction: "Inbound",
          name: "example-nmar",
          priority: 1,
          protocol: "Tcp",
          source: [
            {
              addressPrefix: "Internet",
              addressPrefixType: "ServiceTag",
            },
          ],
          sourcePortRanges: ["80"],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerAdminRuleExample.overrideLogicalId("example");
    const azurermNetworkManagerDeploymentExample =
      new azurerm.networkManagerDeployment.NetworkManagerDeployment(
        this,
        "example_8",
        {
          configurationIds: [
            cdktf.Token.asString(
              azurermNetworkManagerSecurityAdminConfigurationExample.id
            ),
          ],
          dependsOn: [azurermNetworkManagerAdminRuleExample],
          location: "eastus",
          networkManagerId: cdktf.Token.asString(
            azurermNetworkManagerExample.id
          ),
          scopeAccess: "SecurityAdmin",
          triggers: {
            source_port_ranges: cdktf.Fn.join(
              ",",
              cdktf.Token.asList(
                azurermNetworkManagerAdminRuleExample.sourcePortRanges
              )
            ),
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkManagerDeploymentExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `networkManagerId` - (Required) Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.

* `location` - (Required) Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.

* `scopeAccess` - (Required) Specifies the configuration deployment type. Possible values are `connectivity` and `securityAdmin`. Changing this forces a new Network Manager Deployment to be created.

* `configurationIds` - (Required) A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.

* `triggers` - (Optional) A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Network Manager Admin Rule Collection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 24 hours) Used when creating the Network Manager Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Network Manager Deployment.
* `update` - (Defaults to 24 hours) Used when updating the Network Manager Deployment.
* `delete` - (Defaults to 24 hour) Used when deleting the Network Manager Deployment.

## Import

Network Manager Deployment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_manager_deployment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/commit|eastus|Connectivity
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-74f915c0f2189c9c13d65b75eaa25d9a693e6042e1fe7e8f17d878a8d42c3947 -->