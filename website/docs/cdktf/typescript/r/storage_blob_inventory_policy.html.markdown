---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_blob_inventory_policy"
description: |-
  Manages a Storage Blob Inventory Policy.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_blob_inventory_policy

Manages a Storage Blob Inventory Policy.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        blobProperties: {
          versioningEnabled: true,
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestoracc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageContainerExample =
      new azurerm.storageContainer.StorageContainer(this, "example_3", {
        containerAccessType: "private",
        name: "examplecontainer",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerExample.overrideLogicalId("example");
    const azurermStorageBlobInventoryPolicyExample =
      new azurerm.storageBlobInventoryPolicy.StorageBlobInventoryPolicy(
        this,
        "example_4",
        {
          rules: [
            {
              format: "Csv",
              name: "rule1",
              schedule: "Daily",
              schemaFields: ["Name", "Last-Modified"],
              scope: "Container",
              storageContainerName: cdktf.Token.asString(
                azurermStorageContainerExample.name
              ),
            },
          ],
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageBlobInventoryPolicyExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `storageAccountId` - (Required) The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.

* `rules` - (Required) One or more `rules` blocks as defined below.

---

A `filter` block supports the following:

* `blobTypes` - (Required) A set of blob types. Possible values are `blockBlob`, `appendBlob`, and `pageBlob`. The storage account with `isHnsEnabled` is `true` doesn't support `pageBlob`.

~> **NOTE**: The `rules.*SchemaFields` for this rule has to include `blobType` so that you can specify the `blobTypes`.

* `includeBlobVersions` - (Optional) Includes blob versions in blob inventory or not? Defaults to `false`.

~> **NOTE**: The `rules.*SchemaFields` for this rule has to include `isCurrentVersion` and `versionId` so that you can specify the `includeBlobVersions`.

* `includeDeleted` - (Optional) Includes deleted blobs in blob inventory or not? Defaults to `false`.

~> **NOTE:** If `rules.*Scope` is `container`, the `rules.*SchemaFields` for this rule must include `deleted`, `version`, `deletedTime`, and `remainingRetentionDays` so that you can specify the `includeDeleted`. If `rules.*Scope` is `blob`, the `rules.*SchemaFields` must include `deleted` and `remainingRetentionDays` so that you can specify the `includeDeleted`. If `rules.*Scope` is `blob` and the storage account specified by `storageAccountId` has hierarchical namespaces enabled (`isHnsEnabled` is `true` on the storage account), the `rules.*SchemaFields` for this rule must include `deleted`, `version`, `deletedTime`, and `remainingRetentionDays` so that you can specify the `includeDeleted`.

* `includeSnapshots` - (Optional) Includes blob snapshots in blob inventory or not? Defaults to `false`.

~> **NOTE**: The `rules.*SchemaFields` for this rule has to include `snapshot` so that you can specify the `includeSnapshots`.

* `prefixMatch` - (Optional) A set of strings for blob prefixes to be matched. Maximum of 10 blob prefixes.

* `excludePrefixes` - (Optional) A set of strings for blob prefixes to be excluded. Maximum of 10 blob prefixes.

---

A `rules` block supports the following:

* `name` - (Required) The name which should be used for this Blob Inventory Policy Rule.

* `storageContainerName` - (Required) The storage container name to store the blob inventory files for this rule.

* `format` - (Required) The format of the inventory files. Possible values are `csv` and `parquet`.

* `schedule` - (Required) The inventory schedule applied by this rule. Possible values are `daily` and `weekly`.

* `scope` - (Required) The scope of the inventory for this rule. Possible values are `blob` and `container`.

* `schemaFields` - (Required) A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.

* `filter` - (Optional) A `filter` block as defined above. Can only be set when the `scope` is `blob`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Blob Inventory Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Blob Inventory Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Blob Inventory Policy.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Blob Inventory Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Blob Inventory Policy.

## Import

Storage Blob Inventory Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_blob_inventory_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/storageAccount1/inventoryPolicies/inventoryPolicy1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-84b8f048d4a4019405dd07b2bdacb283a2623524c4c6d09359b6fb062f4ac751 -->