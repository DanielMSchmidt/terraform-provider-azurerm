---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_workspace_sql_aad_admin"
description: |-
  Manages Synapse Workspace AAD Admin
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_workspace_aad_admin

Manages an Azure Active Directory SQL Administrator setting for a Synapse Workspace

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        isHnsEnabled: cdktf.Token.asBoolean("true"),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_3", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
        tags: {
          Env: "production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_5",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyDeployer =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "deployer", {
        keyPermissions: [
          "Create",
          "Get",
          "Delete",
          "Purge",
          "GetRotationPolicy",
        ],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(dataAzurermClientConfigCurrent.objectId),
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_7",
      {
        dependsOn: [azurermKeyVaultAccessPolicyDeployer],
        keyOpts: ["unwrapKey", "wrapKey"],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "workspace-encryption-key",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceSqlAadAdminExample =
      new azurerm.synapseWorkspaceSqlAadAdmin.SynapseWorkspaceSqlAadAdminA(
        this,
        "example_8",
        {
          login: "AzureAD Admin",
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          synapseWorkspaceId: cdktf.Token.asString(
            azurermSynapseWorkspaceExample.id
          ),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceSqlAadAdminExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `synapseWorkspaceId` - (Required) The ID of the Synapse Workspace where the Azure AD Administrator should be configured.

* `login` - (Required) The login name of the Azure AD Administrator of this Synapse Workspace.

* `objectId` - (Required) The object id of the Azure AD Administrator of this Synapse Workspace.

* `tenantId` - (Required) The tenant id of the Azure AD Administrator of this Synapse Workspace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Workspace.

## Import

Synapse Workspace Azure AD Administrator can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_workspace_sql_aad_admin.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlAdministrators/activeDirectory
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b70f34bf1d06dcd578e91e07bb03c0f5581034d192e03bada7bf545c92963ae4 -->