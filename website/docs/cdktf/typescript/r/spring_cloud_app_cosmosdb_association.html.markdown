---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_app_cosmosdb_association"
description: |-
  Associates a [Spring Cloud Application](spring_cloud_app.html) with a [CosmosDB Account](cosmosdb_account.html).
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_app_cosmosdb_association

Associates a [Spring Cloud Application](spring_cloud_app.html) with a [CosmosDB Account](cosmosdb_account.html).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_1", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-springcloud",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const azurermCosmosdbAccountExample =
      new azurerm.cosmosdbAccount.CosmosdbAccount(this, "example_2", {
        consistencyPolicy: {
          consistencyLevel: "Strong",
        },
        geoLocation: [
          {
            failoverPriority: 0,
            location: cdktf.Token.asString(
              azurermResourceGroupExample.location
            ),
          },
        ],
        kind: "GlobalDocumentDB",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-cosmosdb-account",
        offerType: "Standard",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermCosmosdbAccountExample.overrideLogicalId("example");
    const azurermSpringCloudAppExample =
      new azurerm.springCloudApp.SpringCloudApp(this, "example_3", {
        name: "example-springcloudapp",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serviceName: cdktf.Token.asString(
          azurermSpringCloudServiceExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppExample.overrideLogicalId("example");
    const azurermSpringCloudAppCosmosdbAssociationExample =
      new azurerm.springCloudAppCosmosdbAssociation.SpringCloudAppCosmosdbAssociation(
        this,
        "example_4",
        {
          apiType: "table",
          cosmosdbAccessKey: cdktf.Token.asString(
            azurermCosmosdbAccountExample.primaryKey
          ),
          cosmosdbAccountId: cdktf.Token.asString(
            azurermCosmosdbAccountExample.id
          ),
          name: "example-bind",
          springCloudAppId: cdktf.Token.asString(
            azurermSpringCloudAppExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudAppCosmosdbAssociationExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.

* `springCloudAppId` - (Required) Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.

* `cosmosdbAccountId` - (Required) Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.

* `apiType` - (Required) Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
  
* `cosmosdbAccessKey` - (Required) Specifies the CosmosDB Account access key.

* `cosmosdbCassandraKeyspaceName` - (Optional) Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `apiType` is `cassandra`.

* `cosmosdbGremlinDatabaseName` - (Optional) Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `apiType` is `gremlin`.

* `cosmosdbGremlinGraphName` - (Optional) Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `apiType` is `gremlin`.

* `cosmosdbMongoDatabaseName` - (Optional) Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `apiType` is `mongo`.

* `cosmosdbSqlDatabaseName` - (Optional) Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `apiType` is `sql`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Application CosmosDB Association.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Application CosmosDB Association.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Application CosmosDB Association.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Application CosmosDB Association.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Application CosmosDB Association.

## Import

Spring Cloud Application CosmosDB Association can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_app_cosmosdb_association.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/service1/apps/app1/bindings/bind1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-71364ce1982f640f5d64dc908c6acf705e0645454ca347a63056ffe43a7f3a00 -->