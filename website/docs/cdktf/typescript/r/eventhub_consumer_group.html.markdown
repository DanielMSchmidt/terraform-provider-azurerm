---
subcategory: "Messaging"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_eventhub_consumer_group"
description: |-
  Manages a Event Hubs Consumer Group as a nested resource within an Event Hub.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_eventhub_consumer_group

Manages a Event Hubs Consumer Group as a nested resource within an Event Hub.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermEventhubNamespaceExample =
      new azurerm.eventhubNamespace.EventhubNamespace(this, "example_1", {
        capacity: 2,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "acceptanceTestEventHubNamespace",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Basic",
        tags: {
          environment: "Production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubNamespaceExample.overrideLogicalId("example");
    const azurermEventhubExample = new azurerm.eventhub.Eventhub(
      this,
      "example_2",
      {
        messageRetention: 2,
        name: "acceptanceTestEventHub",
        namespaceName: cdktf.Token.asString(
          azurermEventhubNamespaceExample.name
        ),
        partitionCount: 2,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubExample.overrideLogicalId("example");
    const azurermEventhubConsumerGroupExample =
      new azurerm.eventhubConsumerGroup.EventhubConsumerGroup(
        this,
        "example_3",
        {
          eventhubName: cdktf.Token.asString(azurermEventhubExample.name),
          name: "acceptanceTestEventHubConsumerGroup",
          namespaceName: cdktf.Token.asString(
            azurermEventhubNamespaceExample.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          userMetadata: "some-meta-data",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermEventhubConsumerGroupExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the EventHub Consumer Group resource. Changing this forces a new resource to be created.

* `namespaceName` - (Required) Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.

* `eventhubName` - (Required) Specifies the name of the EventHub. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which the EventHub Consumer Group's grandparent Namespace exists. Changing this forces a new resource to be created.

* `userMetadata` - (Optional) Specifies the user metadata.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the EventHub Consumer Group.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the EventHub Consumer Group.
* `update` - (Defaults to 30 minutes) Used when updating the EventHub Consumer Group.
* `read` - (Defaults to 5 minutes) Used when retrieving the EventHub Consumer Group.
* `delete` - (Defaults to 30 minutes) Used when deleting the EventHub Consumer Group.

## Import

EventHub Consumer Groups can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_eventhub_consumer_group.consumerGroup1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/eventhubs/eventhub1/consumerGroups/consumerGroup1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d0f41e0be05c0f28a37c3d0259183b2e8813dd10efd8fc97546b134168880a7b -->