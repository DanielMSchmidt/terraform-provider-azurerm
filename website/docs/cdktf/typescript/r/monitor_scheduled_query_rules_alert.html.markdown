---
subcategory: "Monitor"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_monitor_scheduled_query_rules_alert"
description: |-
  Manages an AlertingAction Scheduled Query Rules resource within Azure Monitor
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_monitor_scheduled_query_rules_alert

Manages an AlertingAction Scheduled Query Rules resource within Azure Monitor.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "monitoring-resources",
      }
    );
    const azurermApplicationInsightsExample =
      new azurerm.applicationInsights.ApplicationInsights(this, "example_1", {
        applicationType: "web",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "appinsights",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermApplicationInsightsExample.overrideLogicalId("example");
    const azurermApplicationInsightsExample2 =
      new azurerm.applicationInsights.ApplicationInsights(this, "example2", {
        applicationType: "web",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "appinsights2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermMonitorScheduledQueryRulesAlertExample =
      new azurerm.monitorScheduledQueryRulesAlert.MonitorScheduledQueryRulesAlert(
        this,
        "example_3",
        {
          action: {
            actionGroup: [],
            customWebhookPayload: "{}",
            emailSubject: "Email Header",
          },
          dataSourceId: cdktf.Token.asString(
            azurermApplicationInsightsExample.id
          ),
          description: "Alert when total results cross threshold",
          enabled: true,
          frequency: 5,
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          query:
            "requests\n  | where tolong(resultCode) >= 500\n  | summarize count() by bin(timestamp, 5m)\n",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          severity: 1,
          tags: {
            foo: "bar",
          },
          timeWindow: 30,
          trigger: {
            operator: "GreaterThan",
            threshold: 3,
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMonitorScheduledQueryRulesAlertExample.overrideLogicalId("example");
    const azurermMonitorScheduledQueryRulesAlertExample2 =
      new azurerm.monitorScheduledQueryRulesAlert.MonitorScheduledQueryRulesAlert(
        this,
        "example2_4",
        {
          action: {
            actionGroup: [],
            customWebhookPayload: "{}",
            emailSubject: "Email Header",
          },
          authorizedResourceIds: [
            cdktf.Token.asString(azurermApplicationInsightsExample2.id),
          ],
          dataSourceId: cdktf.Token.asString(
            azurermApplicationInsightsExample.id
          ),
          description: "Query may access data within multiple resources",
          enabled: true,
          frequency: 5,
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          query: cdktf.Token.asString(
            cdktf.Fn.format(
              "let a=requests\n  | where toint(resultCode) >= 500\n  | extend fail=1; let b=app('%s').requests\n  | where toint(resultCode) >= 500 | extend fail=1; a\n  | join b on fail\n",
              [azurermApplicationInsightsExample2.id]
            )
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          severity: 1,
          tags: {
            foo: "bar",
          },
          timeWindow: 30,
          trigger: {
            operator: "GreaterThan",
            threshold: 3,
          },
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMonitorScheduledQueryRulesAlertExample2.overrideLogicalId(
      "example2"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the scheduled query rule. Changing this forces a new resource to be created.
* `resourceGroupName` - (Required) The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
* `location` - (Required) Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
* `dataSourceId` - (Required) The resource URI over which log search query is to be run.
* `frequency` - (Required) Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).
* `query` - (Required) Log search query.
* `timeWindow` - (Required) Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`). Values must be between 5 and 2880 (inclusive).
* `trigger` - (Required) A `trigger` block as defined below.
* `action` - (Required) An `action` block as defined below.
* `authorizedResourceIds` - (Optional) List of Resource IDs referred into query.
* `autoMitigationEnabled` - (Optional) Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
-> **NOTE** `autoMitigationEnabled` and `throttling` are mutually exclusive and cannot both be set.
* `description` - (Optional) The description of the scheduled query rule.
* `enabled` - (Optional) Whether this scheduled query rule is enabled. Default is `true`.
* `queryType` - (Optional) The type of query results. Possible values are `resultCount` and `number`. Default is `resultCount`. If set to `number`, `query` must include an `aggregatedValue` column of a numeric type, for example, `Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)`.
* `severity` - (Optional) Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
* `throttling` - (Optional) Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).
* `tags` - (Optional) A mapping of tags to assign to the resource.

---

The `action` block supports the following:

* `actionGroup` - (Required) List of action group reference resource IDs.
* `customWebhookPayload` - (Optional) Custom payload to be sent for all webhook payloads in alerting action.
* `emailSubject` - (Optional) Custom subject override for all email ids in Azure action group.

---

The `metricTrigger` block supports the following:

* `metricTriggerType` - (Required) Metric Trigger Type - 'Consecutive' or 'Total'.
* `operator` - (Required) Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
* `threshold` - (Required) The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
* `metricColumn` - (Optional) Evaluation of metric on a particular column.

---

The `trigger` block supports the following:

* `metricTrigger` - (Optional) A `metricTrigger` block as defined above. Trigger condition for metric query rule.
* `operator` - (Required) Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
* `threshold` - (Required) Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the scheduled query rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Scheduled Query Rule Alert.
* `update` - (Defaults to 30 minutes) Used when updating the Scheduled Query Rule Alert.
* `read` - (Defaults to 5 minutes) Used when retrieving the Scheduled Query Rule Alert.
* `delete` - (Defaults to 30 minutes) Used when deleting the Scheduled Query Rule Alert.

## Import

Scheduled Query Rule Alerts can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_monitor_scheduled_query_rules_alert.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/scheduledQueryRules/myrulename
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ef407d6faa7355d0575c37b675781493e1cc9ae33e9c5e1bcfa757c85e75f056 -->