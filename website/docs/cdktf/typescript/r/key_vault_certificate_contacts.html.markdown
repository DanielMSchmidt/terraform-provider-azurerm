---
subcategory: "Key Vault"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_key_vault_certificate_contacts"
description: |-
  Manages Key Vault Certificate Contacts.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_key_vault_certificate_contacts

Manages Key Vault Certificate Contacts.

## Disclaimers

~> **Note:** It's possible to define Key Vault Certificate Contacts both within [the `azurermKeyVault` resource](key_vault.html) via the `contact` block and by using [the `azurermKeyVaultCertificateContacts` resource](key_vault_certificate_contacts.html). However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_2",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplekeyvault",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyExample =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "example_3",
        {
          certificatePermissions: ["ManageContacts"],
          keyPermissions: ["Create"],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          secretPermissions: ["Set"],
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultAccessPolicyExample.overrideLogicalId("example");
    const azurermKeyVaultCertificateContactsExample =
      new azurerm.keyVaultCertificateContacts.KeyVaultCertificateContacts(
        this,
        "example_4",
        {
          contact: [
            {
              email: "example@example.com",
              name: "example",
              phone: "01234567890",
            },
            {
              email: "example2@example.com",
            },
          ],
          dependsOn: [azurermKeyVaultAccessPolicyExample],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultCertificateContactsExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `keyVaultId` - (Required) The ID of the Key Vault. Changing this forces a new resource to be created.

* `contact` - (Required) One or more `contact` blocks as defined below.

---

A `contact` block supports the following:

* `email` - (Required) E-mail address of the contact.

* `name` - (Optional) Name of the contact.

* `phone` - (Optional) Phone number of the contact.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported: 

* `id` - The ID of the Key Vault Certificate Contacts.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Key Vault Certificate Contacts.
* `read` - (Defaults to 5 minutes) Used when retrieving the Key Vault Certificate Contacts.
* `update` - (Defaults to 30 minutes) Used when updating the Key Vault Certificate Contacts.
* `delete` - (Defaults to 30 minutes) Used when deleting the Key Vault Certificate Contacts.

## Import

Key Vault Certificate Contacts can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_key_vault_certificate_contacts.example https://example-keyvault.vault.azure.net/certificates/contacts
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1020ab08c9369d48a2f74249968422bc7e68ebe78384c3e7e94fe411cf2f5df8 -->