---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_traffic_manager_profile"
description: |-
  Manages a Traffic Manager Profile.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_traffic_manager_profile

Manages a Traffic Manager Profile to which multiple endpoints can be attached.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
import * as random from "./.gen/providers/random";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: random.
    For a more precise conversion please use the --provider flag in convert.*/
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "trafficmanagerProfile",
      }
    );
    const randomIdServer = new random.id.Id(this, "server", {
      byte_length: 8,
      keepers: [
        {
          azi_id: 1,
        },
      ],
    });
    const azurermTrafficManagerProfileExample =
      new azurerm.trafficManagerProfile.TrafficManagerProfile(
        this,
        "example_2",
        {
          dnsConfig: {
            relativeName: cdktf.Token.asString(randomIdServer.hex),
            ttl: 100,
          },
          monitorConfig: {
            intervalInSeconds: 30,
            path: "/",
            port: 80,
            protocol: "HTTP",
            timeoutInSeconds: 9,
            toleratedNumberOfFailures: 3,
          },
          name: cdktf.Token.asString(randomIdServer.hex),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          tags: {
            environment: "Production",
          },
          trafficRoutingMethod: "Weighted",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermTrafficManagerProfileExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Traffic Manager profile. Changing this forces a new resource to be created. 

* `resourceGroupName` - (Required) The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.

* `profileStatus` - (Optional) The status of the profile, can be set to either `enabled` or `disabled`. Defaults to `enabled`.

* `trafficRoutingMethod` - (Required) Specifies the algorithm used to route traffic. Possible values are `geographic`, `weighted`, `performance`, `priority`, `subnet` and `multiValue`.
  * `geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
  * `multiValue` - All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type `external` and are specified as IPv4 or IPv6 addresses.
  * `performance` - Traffic is routed via the User's closest Endpoint
  * `priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
  * `subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
  * `weighted` - Traffic is spread across Endpoints proportional to their `weight` value.

* `trafficViewEnabled` - (Optional) Indicates whether Traffic View is enabled for the Traffic Manager profile.

* `dnsConfig` - (Required) This block specifies the DNS configuration of the Profile, it supports the fields documented below.

* `monitorConfig` - (Required) This block specifies the Endpoint monitoring configuration for the Profile, it supports the fields documented below.

* `maxReturn` - (Optional) The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.

~> **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `multiValue`.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

The `dnsConfig` block supports:

* `relativeName` - (Required) The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.

* `ttl` - (Required) The TTL value of the Profile used by Local DNS resolvers and clients.

---

The `monitorConfig` block supports:

* `protocol` - (Required) The protocol used by the monitoring checks, supported values are `http`, `https` and `tcp`.

* `port` - (Required) The port number used by the monitoring checks.

* `path` - (Optional) The path used by the monitoring checks. Required when `protocol` is set to `http` or `https` - cannot be set when `protocol` is set to `tcp`.

* `expectedStatusCodeRanges` - (Optional) A list of status code ranges in the format of `100101`.

* `customHeader` - (Optional) One or more `customHeader` blocks as defined below.

* `intervalInSeconds` - (Optional) The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.

* `timeoutInSeconds` - (Optional) The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `intervalInSeconds` is set to `30`, then `timeoutInSeconds` can be between `5` and `10`. The default value is `10`. If `intervalInSeconds` is set to `10`, then valid values are between `5` and `9` and `timeoutInSeconds` is required.

* `toleratedNumberOfFailures` - (Optional) The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`

---

A `customHeader` block supports the following:

* `name` - (Required) The name of the custom header.

* `value` - (Required) The value of custom header. Applicable for HTTP and HTTPS protocol.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Traffic Manager Profile.

* `fqdn` - The FQDN of the created Profile.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Traffic Manager Profile.
* `update` - (Defaults to 30 minutes) Used when updating the Traffic Manager Profile.
* `read` - (Defaults to 5 minutes) Used when retrieving the Traffic Manager Profile.
* `delete` - (Defaults to 30 minutes) Used when deleting the Traffic Manager Profile.

## Import

Traffic Manager Profiles can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_traffic_manager_profile.exampleProfile /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/trafficManagerProfiles/mytrafficmanagerprofile1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-6032404d342b69056bd0bb40b72d8252d9f9f1d757d9aa54241c127663b77fbb -->