---
subcategory: "Data Factory"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_data_factory_custom_dataset"
description: |-
  Manages a Dataset inside an Azure Data Factory. This is a generic resource that supports all different Dataset Types.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_data_factory_custom_dataset

Manages a Dataset inside an Azure Data Factory. This is a generic resource that supports all different Dataset Types.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "BlobStorage",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageContainerExample =
      new azurerm.storageContainer.StorageContainer(this, "example_2", {
        containerAccessType: "private",
        name: "content",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerExample.overrideLogicalId("example");
    const azurermDataFactoryExample = new azurerm.dataFactory.DataFactory(
      this,
      "example_3",
      {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataFactoryExample.overrideLogicalId("example");
    const azurermDataFactoryLinkedCustomServiceExample =
      new azurerm.dataFactoryLinkedCustomService.DataFactoryLinkedCustomService(
        this,
        "example_4",
        {
          dataFactoryId: cdktf.Token.asString(azurermDataFactoryExample.id),
          name: "example",
          type: "AzureBlobStorage",
          typePropertiesJson:
            '{\n  "connectionString":"${' +
            azurermStorageAccountExample.primaryConnectionString +
            '}"\n}\n',
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataFactoryLinkedCustomServiceExample.overrideLogicalId("example");
    const azurermDataFactoryCustomDatasetExample =
      new azurerm.dataFactoryCustomDataset.DataFactoryCustomDataset(
        this,
        "example_5",
        {
          additionalProperties: {
            bar: "test2",
            foo: "test1",
          },
          annotations: ["test1", "test2", "test3"],
          dataFactoryId: cdktf.Token.asString(azurermDataFactoryExample.id),
          description: "test description",
          folder: "testFolder",
          linkedService: {
            name: cdktf.Token.asString(
              azurermDataFactoryLinkedCustomServiceExample.name
            ),
            parameters: {
              key1: "value1",
            },
          },
          name: "example",
          parameters: {
            Bar: "Test2",
            foo: "test1",
          },
          schemaJson:
            '{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "object",\n      "properties": {\n        "firstName": {\n          "type": "string"\n        },\n        "lastName": {\n          "type": "string"\n        }\n      }\n    },\n    "age": {\n      "type": "integer"\n    }\n  }\n}\n',
          type: "Json",
          typePropertiesJson:
            '{\n  "location": {\n    "container":"${' +
            azurermStorageContainerExample.name +
            '}",\n    "fileName":"foo.txt",\n    "folderPath": "foo/bar/",\n    "type":"AzureBlobStorageLocation"\n  },\n  "encodingName":"UTF-8"\n}\n',
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDataFactoryCustomDatasetExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

* `name` - (Required) Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.

* `dataFactoryId` - (Required) The Data Factory ID in which to associate the Dataset with. Changing this forces a new resource.

* `linkedService` - (Required) A `linkedService` block as defined below.

* `type` - (Required) The type of dataset that will be associated with Data Factory. Changing this forces a new resource to be created.

* `typePropertiesJson` - (Required) A JSON object that contains the properties of the Data Factory Dataset.

* `additionalProperties` - (Optional) A map of additional properties to associate with the Data Factory Dataset.

* `annotations` - (Optional) List of tags that can be used for describing the Data Factory Dataset.

* `description` - (Optional) The description for the Data Factory Dataset.

* `folder` - (Optional) The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.

* `parameters` - (Optional) A map of parameters to associate with the Data Factory Dataset.

* `schemaJson` - (Optional) A JSON object that contains the schema of the Data Factory Dataset.

---

A `linkedService` block supports the following:

* `name` - (Required) The name of the Data Factory Linked Service.

* `parameters` - (Optional) A map of parameters to associate with the Data Factory Linked Service.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Data Factory Dataset.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Data Factory Dataset.
* `update` - (Defaults to 30 minutes) Used when updating the Data Factory Dataset.
* `read` - (Defaults to 5 minutes) Used when retrieving the Data Factory Dataset.
* `delete` - (Defaults to 30 minutes) Used when deleting the Data Factory Dataset.

## Import

Data Factory Datasets can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_data_factory_custom_dataset.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0bdaa6ad8274695fb1555a57e82a99c14d1732e2c5af22c1b77ff96056991a07 -->