---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_subnet_network_security_group_association"
description: |-
  Associates a [Network Security Group](network_security_group.html) with a [Subnet](subnet.html) within a [Virtual Network](virtual_network.html).

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_subnet_network_security_group_association

Associates a [Network Security Group](network_security_group.html) with a [Subnet](subnet.html) within a [Virtual Network](virtual_network.html).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-network",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermNetworkSecurityGroupExample =
      new azurerm.networkSecurityGroup.NetworkSecurityGroup(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-nsg",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        securityRule: [
          {
            access: "Allow",
            destinationAddressPrefix: "*",
            destinationPortRange: "*",
            direction: "Inbound",
            name: "test123",
            priority: 100,
            protocol: "Tcp",
            sourceAddressPrefix: "*",
            sourcePortRange: "*",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermNetworkSecurityGroupExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.0.2.0/24"],
      name: "frontend",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermSubnetNetworkSecurityGroupAssociationExample =
      new azurerm.subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociation(
        this,
        "example_4",
        {
          networkSecurityGroupId: cdktf.Token.asString(
            azurermNetworkSecurityGroupExample.id
          ),
          subnetId: cdktf.Token.asString(azurermSubnetExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetNetworkSecurityGroupAssociationExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `networkSecurityGroupId` - (Required) The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.

* `subnetId` - (Required) The ID of the Subnet. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Subnet.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Subnet Network Security Group Association.
* `update` - (Defaults to 30 minutes) Used when updating the Subnet Network Security Group Association.
* `read` - (Defaults to 5 minutes) Used when retrieving the Subnet Network Security Group Association.
* `delete` - (Defaults to 30 minutes) Used when deleting the Subnet Network Security Group Association.

## Import

Subnet `<->` Network Security Group Associations can be imported using the `resource id` of the Subnet, e.g.

```shell
terraform import azurerm_subnet_network_security_group_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/subnets/mysubnet1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-60dcf7a2221844a77f1f4fc0bbd3f620f4410c578eea7011a5ee54fed0365c86 -->