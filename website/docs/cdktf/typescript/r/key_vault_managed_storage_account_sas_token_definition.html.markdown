---
subcategory: "Key Vault"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_key_vault_managed_storage_account_sas_token_definition"
description: |-
  Manages a Key Vault Managed Storage Account SAS Definition.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_key_vault_managed_storage_account_sas_token_definition

Manages a Key Vault Managed Storage Account SAS Definition.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "storageaccountname",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const dataAzurermClientConfigExample =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "example_2",
        {}
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzurermClientConfigExample.overrideLogicalId("example");
    const dataAzurermStorageAccountSasExample =
      new azurerm.dataAzurermStorageAccountSas.DataAzurermStorageAccountSas(
        this,
        "example_3",
        {
          connectionString: cdktf.Token.asString(
            azurermStorageAccountExample.primaryConnectionString
          ),
          expiry: "2023-04-30T00:00:00Z",
          httpsOnly: true,
          permissions: {
            add: true,
            create: true,
            delete: false,
            filter: false,
            list: false,
            process: false,
            read: true,
            tag: false,
            update: false,
            write: true,
          },
          resourceTypes: {
            container: false,
            object: false,
            service: true,
          },
          services: {
            blob: true,
            file: false,
            queue: false,
            table: false,
          },
          start: "2021-04-30T00:00:00Z",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzurermStorageAccountSasExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_4",
      {
        accessPolicy: [
          {
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigExample.objectId
            ),
            secretPermissions: ["Get", "Delete"],
            storagePermissions: [
              "Get",
              "List",
              "Set",
              "SetSAS",
              "GetSAS",
              "DeleteSAS",
              "Update",
              "RegenerateKey",
            ],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigExample.tenantId
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-keyvault",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigExample.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultManagedStorageAccountExample =
      new azurerm.keyVaultManagedStorageAccount.KeyVaultManagedStorageAccount(
        this,
        "example_5",
        {
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          name: "examplemanagedstorage",
          regenerateKeyAutomatically: false,
          regenerationPeriod: "P1D",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
          storageAccountKey: "key1",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultManagedStorageAccountExample.overrideLogicalId("example");
    const azurermKeyVaultManagedStorageAccountSasTokenDefinitionExample =
      new azurerm.keyVaultManagedStorageAccountSasTokenDefinition.KeyVaultManagedStorageAccountSasTokenDefinition(
        this,
        "example_6",
        {
          managedStorageAccountId: cdktf.Token.asString(
            azurermKeyVaultManagedStorageAccountExample.id
          ),
          name: "examplesasdefinition",
          sasTemplateUri: cdktf.Token.asString(
            dataAzurermStorageAccountSasExample.sas
          ),
          sasType: "account",
          validityPeriod: "P1D",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultManagedStorageAccountSasTokenDefinitionExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this SAS Definition.

* `managedStorageAccountId` - (Required) The ID of the Managed Storage Account.

* `sasTemplateUri` - (Required) The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.

* `sasType` - (Required) The type of SAS token the SAS definition will create. Possible values are `account` and `service`.

* `validityPeriod` - (Required) Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).

---

* `tags` - (Optional) A mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Managed Storage Account SAS Definition.

* `secretId` - The ID of the Secret that is created by Managed Storage Account SAS Definition.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Key Vault.
* `read` - (Defaults to 5 minutes) Used when retrieving the Key Vault.
* `update` - (Defaults to 30 minutes) Used when updating the Key Vault.
* `delete` - (Defaults to 30 minutes) Used when deleting the Key Vault.

## Import

Key Vaults can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_key_vault_managed_storage_account_sas_token_definition.example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01/sas/exampleSasDefinition01
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-95822bbb343eb46ee342d17598c43c86101fe105aa74a9ce590061e19f50148d -->