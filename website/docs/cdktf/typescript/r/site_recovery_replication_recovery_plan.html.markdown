---
subcategory: "Recovery Services"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_site_recovery_replication_recovery_plan"
description: |-
    Manages a Site Recovery Replication Recovery Plan within a Recovery Services vault.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_site_recovery_replication_recovery_plan

Manages a Site Recovery Replication Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupPrimary = new azurerm.resourceGroup.ResourceGroup(
      this,
      "primary",
      {
        location: "West US",
        name: "tfex-replicated-vm-primary",
      }
    );
    const azurermResourceGroupSecondary =
      new azurerm.resourceGroup.ResourceGroup(this, "secondary", {
        location: "East US",
        name: "tfex-replicated-vm-secondary",
      });
    const azurermStorageAccountPrimary =
      new azurerm.storageAccount.StorageAccount(this, "primary_2", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "primaryrecoverycache",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupPrimary.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountPrimary.overrideLogicalId("primary");
    const azurermVirtualNetworkPrimary =
      new azurerm.virtualNetwork.VirtualNetwork(this, "primary_3", {
        addressSpace: ["192.168.1.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "network1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupPrimary.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPrimary.overrideLogicalId("primary");
    const azurermVirtualNetworkSecondary =
      new azurerm.virtualNetwork.VirtualNetwork(this, "secondary_4", {
        addressSpace: ["192.168.2.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupSecondary.location),
        name: "network2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupSecondary.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkSecondary.overrideLogicalId("secondary");
    const azurermPublicIpPrimary = new azurerm.publicIp.PublicIp(
      this,
      "primary_5",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "vm-public-ip-primary",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupPrimary.name
        ),
        sku: "Basic",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpPrimary.overrideLogicalId("primary");
    const azurermPublicIpSecondary = new azurerm.publicIp.PublicIp(
      this,
      "secondary_6",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupSecondary.location),
        name: "vm-public-ip-secondary",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupSecondary.name
        ),
        sku: "Basic",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpSecondary.overrideLogicalId("secondary");
    const azurermRecoveryServicesVaultVault =
      new azurerm.recoveryServicesVault.RecoveryServicesVault(this, "vault", {
        location: cdktf.Token.asString(azurermResourceGroupSecondary.location),
        name: "example-recovery-vault",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupSecondary.name
        ),
        sku: "Standard",
      });
    const azurermSiteRecoveryFabricPrimary =
      new azurerm.siteRecoveryFabric.SiteRecoveryFabric(this, "primary_8", {
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "primary-fabric",
        recoveryVaultName: cdktf.Token.asString(
          azurermRecoveryServicesVaultVault.name
        ),
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupSecondary.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSiteRecoveryFabricPrimary.overrideLogicalId("primary");
    const azurermSiteRecoveryFabricSecondary =
      new azurerm.siteRecoveryFabric.SiteRecoveryFabric(this, "secondary_9", {
        location: cdktf.Token.asString(azurermResourceGroupSecondary.location),
        name: "secondary-fabric",
        recoveryVaultName: cdktf.Token.asString(
          azurermRecoveryServicesVaultVault.name
        ),
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupSecondary.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSiteRecoveryFabricSecondary.overrideLogicalId("secondary");
    const azurermSiteRecoveryNetworkMappingNetworkMapping =
      new azurerm.siteRecoveryNetworkMapping.SiteRecoveryNetworkMapping(
        this,
        "network-mapping",
        {
          name: "network-mapping",
          recoveryVaultName: cdktf.Token.asString(
            azurermRecoveryServicesVaultVault.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupSecondary.name
          ),
          sourceNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkPrimary.id
          ),
          sourceRecoveryFabricName: cdktf.Token.asString(
            azurermSiteRecoveryFabricPrimary.name
          ),
          targetNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkSecondary.id
          ),
          targetRecoveryFabricName: cdktf.Token.asString(
            azurermSiteRecoveryFabricSecondary.name
          ),
        }
      );
    const azurermSiteRecoveryProtectionContainerPrimary =
      new azurerm.siteRecoveryProtectionContainer.SiteRecoveryProtectionContainer(
        this,
        "primary_11",
        {
          name: "primary-protection-container",
          recoveryFabricName: cdktf.Token.asString(
            azurermSiteRecoveryFabricPrimary.name
          ),
          recoveryVaultName: cdktf.Token.asString(
            azurermRecoveryServicesVaultVault.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupSecondary.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSiteRecoveryProtectionContainerPrimary.overrideLogicalId("primary");
    const azurermSiteRecoveryProtectionContainerSecondary =
      new azurerm.siteRecoveryProtectionContainer.SiteRecoveryProtectionContainer(
        this,
        "secondary_12",
        {
          name: "secondary-protection-container",
          recoveryFabricName: cdktf.Token.asString(
            azurermSiteRecoveryFabricSecondary.name
          ),
          recoveryVaultName: cdktf.Token.asString(
            azurermRecoveryServicesVaultVault.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupSecondary.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSiteRecoveryProtectionContainerSecondary.overrideLogicalId(
      "secondary"
    );
    const azurermSiteRecoveryReplicationPolicyPolicy =
      new azurerm.siteRecoveryReplicationPolicy.SiteRecoveryReplicationPolicy(
        this,
        "policy",
        {
          applicationConsistentSnapshotFrequencyInMinutes: cdktf.Token.asNumber(
            cdktf.Op.mul(4, 60)
          ),
          name: "policy",
          recoveryPointRetentionInMinutes: cdktf.Token.asNumber(
            cdktf.Op.mul(24, 60)
          ),
          recoveryVaultName: cdktf.Token.asString(
            azurermRecoveryServicesVaultVault.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupSecondary.name
          ),
        }
      );
    const azurermSubnetPrimary = new azurerm.subnet.Subnet(this, "primary_14", {
      addressPrefixes: ["192.168.1.0/24"],
      name: "network1-subnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupPrimary.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkPrimary.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetPrimary.overrideLogicalId("primary");
    const azurermSubnetSecondary = new azurerm.subnet.Subnet(
      this,
      "secondary_15",
      {
        addressPrefixes: ["192.168.2.0/24"],
        name: "network2-subnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupSecondary.name
        ),
        virtualNetworkName: cdktf.Token.asString(
          azurermVirtualNetworkSecondary.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetSecondary.overrideLogicalId("secondary");
    const azurermNetworkInterfaceVm =
      new azurerm.networkInterface.NetworkInterface(this, "vm", {
        ipConfiguration: [
          {
            name: "vm",
            privateIpAddressAllocation: "Dynamic",
            publicIpAddressId: cdktf.Token.asString(azurermPublicIpPrimary.id),
            subnetId: cdktf.Token.asString(azurermSubnetPrimary.id),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "vm-nic",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupPrimary.name
        ),
      });
    const azurermSiteRecoveryProtectionContainerMappingContainerMapping =
      new azurerm.siteRecoveryProtectionContainerMapping.SiteRecoveryProtectionContainerMapping(
        this,
        "container-mapping",
        {
          name: "container-mapping",
          recoveryFabricName: cdktf.Token.asString(
            azurermSiteRecoveryFabricPrimary.name
          ),
          recoveryReplicationPolicyId: cdktf.Token.asString(
            azurermSiteRecoveryReplicationPolicyPolicy.id
          ),
          recoverySourceProtectionContainerName: cdktf.Token.asString(
            azurermSiteRecoveryProtectionContainerPrimary.name
          ),
          recoveryTargetProtectionContainerId: cdktf.Token.asString(
            azurermSiteRecoveryProtectionContainerSecondary.id
          ),
          recoveryVaultName: cdktf.Token.asString(
            azurermRecoveryServicesVaultVault.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupSecondary.name
          ),
        }
      );
    const azurermVirtualMachineVm = new azurerm.virtualMachine.VirtualMachine(
      this,
      "vm_18",
      {
        location: cdktf.Token.asString(azurermResourceGroupPrimary.location),
        name: "vm",
        networkInterfaceIds: [
          cdktf.Token.asString(azurermNetworkInterfaceVm.id),
        ],
        osProfile: {
          adminPassword: "test-pwd-123",
          adminUsername: "test-admin-123",
          computerName: "vm",
        },
        osProfileLinuxConfig: {
          disablePasswordAuthentication: false,
        },
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupPrimary.name
        ),
        storageImageReference: {
          offer: "CentOS",
          publisher: "OpenLogic",
          sku: "7.5",
          version: "latest",
        },
        storageOsDisk: {
          caching: "ReadWrite",
          createOption: "FromImage",
          managedDiskType: "Premium_LRS",
          name: "vm-os-disk",
          osType: "Linux",
        },
        vmSize: "Standard_B1s",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualMachineVm.overrideLogicalId("vm");
    const azurermSiteRecoveryReplicatedVmVmReplication =
      new azurerm.siteRecoveryReplicatedVm.SiteRecoveryReplicatedVm(
        this,
        "vm-replication",
        {
          dependsOn: [
            azurermSiteRecoveryProtectionContainerMappingContainerMapping,
            azurermSiteRecoveryNetworkMappingNetworkMapping,
          ],
          managedDisk: [
            {
              diskId: cdktf.Token.asString(
                cdktf.propertyAccess(azurermVirtualMachineVm.storageOsDisk, [
                  "0",
                  "managed_disk_id",
                ])
              ),
              stagingStorageAccountId: cdktf.Token.asString(
                azurermStorageAccountPrimary.id
              ),
              targetDiskType: "Premium_LRS",
              targetReplicaDiskType: "Premium_LRS",
              targetResourceGroupId: cdktf.Token.asString(
                azurermResourceGroupSecondary.id
              ),
            },
          ],
          name: "vm-replication",
          networkInterface: [
            {
              recoveryPublicIpAddressId: cdktf.Token.asString(
                azurermPublicIpSecondary.id
              ),
              sourceNetworkInterfaceId: cdktf.Token.asString(
                azurermNetworkInterfaceVm.id
              ),
              targetSubnetName: cdktf.Token.asString(
                azurermSubnetSecondary.name
              ),
            },
          ],
          recoveryReplicationPolicyId: cdktf.Token.asString(
            azurermSiteRecoveryReplicationPolicyPolicy.id
          ),
          recoveryVaultName: cdktf.Token.asString(
            azurermRecoveryServicesVaultVault.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupSecondary.name
          ),
          sourceRecoveryFabricName: cdktf.Token.asString(
            azurermSiteRecoveryFabricPrimary.name
          ),
          sourceRecoveryProtectionContainerName: cdktf.Token.asString(
            azurermSiteRecoveryProtectionContainerPrimary.name
          ),
          sourceVmId: cdktf.Token.asString(azurermVirtualMachineVm.id),
          targetRecoveryFabricId: cdktf.Token.asString(
            azurermSiteRecoveryFabricSecondary.id
          ),
          targetRecoveryProtectionContainerId: cdktf.Token.asString(
            azurermSiteRecoveryProtectionContainerSecondary.id
          ),
          targetResourceGroupId: cdktf.Token.asString(
            azurermResourceGroupSecondary.id
          ),
        }
      );
    new azurerm.siteRecoveryReplicationRecoveryPlan.SiteRecoveryReplicationRecoveryPlan(
      this,
      "example",
      {
        name: "example-recover-plan",
        recoveryGroup: [
          {
            replicatedProtectedItems: [
              cdktf.Token.asString(
                azurermSiteRecoveryReplicatedVmVmReplication.id
              ),
            ],
            type: "Boot",
          },
          {
            type: "Failover",
          },
          {
            type: "Shutdown",
          },
        ],
        recoveryVaultId: cdktf.Token.asString(
          azurermRecoveryServicesVaultVault.id
        ),
        sourceRecoveryFabricId: cdktf.Token.asString(
          azurermSiteRecoveryFabricPrimary.id
        ),
        targetRecoveryFabricId: cdktf.Token.asString(
          azurermSiteRecoveryFabricSecondary.id
        ),
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.

* `recoveryVaultId` - (Required) The ID of the vault that should be updated. Changing this forces a new resource to be created.

* `sourceRecoveryFabricId` - (Required) ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.

* `targetRecoveryFabricId` - (Required) ID of target fabric to recover. Changing this forces a new Replication Plan to be created.

* `recoveryGroup` - (Optional) Three or more `recoveryGroup` block defined as below.

* `azureToAzureSettings` - (Optional) An `azureToAzureSettings` block defined as block.

---

A `recoveryGroup` block supports the following:

* `type` - (Required) The Recovery Plan Group Type. Possible values are `boot`, `failover` and `shutdown`.

* `replicatedProtectedItems` - (Optional) (required) one or more id of protected VM.

* `preAction` - (Optional) one or more `action` block as defined below. which will be executed before the group recovery.

* `postAction` - (Optional) one or more `action` block as defined below. which will be executed after the group recovery.

---

An `action` block supports the following:

* `name` - (Required) Name of the Action.

* `type` - (Required) Type of the action detail. Possible values are `automationRunbookActionDetails`, `manualActionDetails` and `scriptActionDetails`.

* `failOverDirections` - (Required) Directions of fail over. Possible values are `primaryToRecovery` and `recoveryToPrimary`

* `failOverTypes` - (Required) Types of fail over. Possible values are `testFailover`, `plannedFailover` and `unplannedFailover`

* `fabricLocation` - (Optional) The fabric location of runbook or script. Possible values are `primary` and `recovery`.

-> **NOTE:** This is required when `type` is set to `automationRunbookActionDetails` or `scriptActionDetails`.

* `runbookId` - (Optional) Id of runbook.

-> **NOTE:** This property is required when `type` is set to `automationRunbookActionDetails`.

* `manualActionInstruction` - (Optional) Instructions of manual action.

-> **NOTE:** This property is required when `type` is set to `manualActionDetails`.

* `scriptPath` - (Optional) Path of action script.

-> **NOTE:** This property is required when `type` is set to `scriptActionDetails`.

---

An `azureToAzureSettings` block supports the following:

* `primaryZone` - (Optional) The Availability Zone in which the VM is located. Changing this forces a new Site Recovery Replication Recovery Plan to be created.

* `recoveryZone` - (Optional) The Availability Zone in which the VM is recovered. Changing this forces a new Site Recovery Replication Recovery Plan to be created.

-> **Note:** `primaryZone` and `recoveryZone` must be specified together.

* `primaryEdgeZone` - (Optional) The Edge Zone within the Azure Region where the VM exists. Changing this forces a new Site Recovery Replication Recovery Plan to be created.

* `recoveryEdgeZone` - (Optional) The Edge Zone within the Azure Region where the VM is recovered. Changing this forces a new Site Recovery Replication Recovery Plan to be created.

-> **Note:** `primaryEdgeZone` and `recoveryEdgeZone` must be specified together.

## Attributes Reference

In addition to the arguments above, the following attributes are exported:

* `id` - The ID of the Site Recovery Fabric.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Site Recovery Replication Plan.
* `update` - (Defaults to 30 minutes) Used when updating the Site Recovery Replication Plan.
* `read` - (Defaults to 5 minutes) Used when retrieving the Site Recovery Replication Plan.
* `delete` - (Defaults to 30 minutes) Used when deleting the Site Recovery Replication Plan.

## Import

Site Recovery Fabric can be imported using the `resource id`, e.g.

```shell
terraform import  azurerm_site_recovery_replication_recovery_plan.example /subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/groupName/providers/Microsoft.RecoveryServices/vaults/vaultName/replicationRecoveryPlans/planName
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1f02f817e6d53687beeca57144d0afdd73918c8a4a29f11eabbd742464b7f13e -->