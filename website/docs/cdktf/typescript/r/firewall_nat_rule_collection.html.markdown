---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_firewall_nat_rule_collection"
description: |-
  Manages a NAT Rule Collection within an Azure Firewall.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_firewall_nat_rule_collection

Manages a NAT Rule Collection within an Azure Firewall.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "testvnet",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_2",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "testpip",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.0.1.0/24"],
      name: "AzureFirewallSubnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermFirewallExample = new azurerm.firewall.Firewall(
      this,
      "example_4",
      {
        ipConfiguration: [
          {
            name: "configuration",
            publicIpAddressId: cdktf.Token.asString(azurermPublicIpExample.id),
            subnetId: cdktf.Token.asString(azurermSubnetExample.id),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "testfirewall",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "AZFW_VNet",
        skuTier: "Standard",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermFirewallExample.overrideLogicalId("example");
    const azurermFirewallNatRuleCollectionExample =
      new azurerm.firewallNatRuleCollection.FirewallNatRuleCollection(
        this,
        "example_5",
        {
          action: "Dnat",
          azureFirewallName: cdktf.Token.asString(azurermFirewallExample.name),
          name: "testcollection",
          priority: 100,
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          rule: [
            {
              destinationAddresses: [
                cdktf.Token.asString(azurermPublicIpExample.ipAddress),
              ],
              destinationPorts: ["53"],
              name: "testrule",
              protocols: ["TCP", "UDP"],
              sourceAddresses: ["10.0.0.0/16"],
              translatedAddress: "8.8.8.8",
              translatedPort: cdktf.Token.asString(53),
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermFirewallNatRuleCollectionExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the NAT Rule Collection which must be unique within the Firewall. Changing this forces a new resource to be created.

* `azureFirewallName` - (Required) Specifies the name of the Firewall in which the NAT Rule Collection should be created. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the name of the Resource Group in which the Firewall exists. Changing this forces a new resource to be created.

* `priority` - (Required) Specifies the priority of the rule collection. Possible values are between `100` - `65000`.

* `action` - (Required) Specifies the action the rule will apply to matching traffic. Possible values are `dnat` and `snat`.

* `rule` - (Required) One or more `rule` blocks as defined below.

---

A `rule` block supports the following:

* `name` - (Required) Specifies the name of the rule.

* `description` - (Optional) Specifies a description for the rule.

* `destinationAddresses` - (Required) A list of destination IP addresses and/or IP ranges.

* `destinationPorts` - (Required) A list of destination ports.

* `protocols` - (Required) A list of protocols. Possible values are `any`, `icmp`, `tcp` and `udp`. If `action` is `dnat`, protocols can only be `tcp` and `udp`.

* `sourceAddresses` - (Optional) A list of source IP addresses and/or IP ranges.

* `sourceIpGroups` - (Optional) A list of source IP Group IDs for the rule.

-> **NOTE** At least one of `sourceAddresses` and `sourceIpGroups` must be specified for a rule.

* `translatedAddress` - (Optional) The address of the service behind the Firewall.

* `translatedFqdn` - (Optional) The fqdn of the service behind the Firewall.

-> **NOTE** At least one of `translatedAddress` and `translatedFqdn` must be specified for a rule.

* `translatedPort` - (Required) The port of the service behind the Firewall.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Firewall NAT Rule Collection.
* `update` - (Defaults to 30 minutes) Used when updating the Firewall NAT Rule Collection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Firewall NAT Rule Collection.
* `delete` - (Defaults to 30 minutes) Used when deleting the Firewall NAT Rule Collection.

## Import

Azure Firewall NAT Rule Collections can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_firewall_nat_rule_collection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/azureFirewalls/myfirewall/natRuleCollections/mycollection
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9e71f37af97782552abdb7babfdac1c30fa3126dfd9a2926b859ca8d7203264f -->