---
subcategory: "Compute"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_disk_encryption_set"
description: |-
  Manages a Disk Encryption Set.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_disk_encryption_set

Manages a Disk Encryption Set.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_2",
      {
        enabledForDiskEncryption: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "des-example-keyvault",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyExampleUser =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "example-user",
        {
          keyPermissions: [
            "Create",
            "Delete",
            "Get",
            "Purge",
            "Recover",
            "Update",
            "List",
            "Decrypt",
            "Sign",
            "GetRotationPolicy",
          ],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_4",
      {
        dependsOn: [azurermKeyVaultAccessPolicyExampleUser],
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "des-example-key",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermDiskEncryptionSetExample =
      new azurerm.diskEncryptionSet.DiskEncryptionSet(this, "example_5", {
        identity: {
          type: "SystemAssigned",
        },
        keyVaultKeyId: cdktf.Token.asString(azurermKeyVaultKeyExample.id),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "des",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDiskEncryptionSetExample.overrideLogicalId("example");
    new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
      this,
      "example-disk",
      {
        keyPermissions: [
          "Create",
          "Delete",
          "Get",
          "Purge",
          "Recover",
          "Update",
          "List",
          "Decrypt",
          "Sign",
        ],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermDiskEncryptionSetExample.identity, [
            "0",
            "principal_id",
          ])
        ),
        tenantId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermDiskEncryptionSetExample.identity, [
            "0",
            "tenant_id",
          ])
        ),
      }
    );
    const azurermRoleAssignmentExampleDisk =
      new azurerm.roleAssignment.RoleAssignment(this, "example-disk_7", {
        principalId: cdktf.Token.asString(
          cdktf.propertyAccess(azurermDiskEncryptionSetExample.identity, [
            "0",
            "principal_id",
          ])
        ),
        roleDefinitionName: "Key Vault Crypto Service Encryption User",
        scope: cdktf.Token.asString(azurermKeyVaultExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRoleAssignmentExampleDisk.overrideLogicalId("example-disk");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Disk Encryption Set. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.

* `keyVaultKeyId` - (Required) Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).

-> **NOTE** Access to the KeyVault must be granted for this Disk Encryption Set, if you want to further use this Disk Encryption Set in a Managed Disk or Virtual Machine, or Virtual Machine Scale Set. For instructions, please refer to the doc of [Server side encryption of Azure managed disks](https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption).

-> **NOTE** A KeyVault using [enable_rbac_authorization](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#enable_rbac_authorization) requires to use `azurermRoleAssignment` to assigne the role `Key Vault Crypto Service Encryption User` to this Disk Encryption Set.
In this case, `azurermKeyVaultAccessPolicy` is not needed.

* `autoKeyRotationEnabled` - (Optional) Boolean flag to specify whether Azure Disk Encryption Set automatically rotates encryption Key to latest version.

* `encryptionType` - (Optional) The type of key used to encrypt the data of the disk. Possible values are `encryptionAtRestWithCustomerKey`, `encryptionAtRestWithPlatformAndCustomerKeys` and `confidentialVmEncryptedWithCustomerKey`. Defaults to `encryptionAtRestWithCustomerKey`. Changing this forces a new resource to be created.

* `federatedClientId` - (Optional) Multi-tenant application client id to access key vault in a different tenant.

* `identity` - (Required) An `identity` block as defined below.

* `tags` - (Optional) A mapping of tags to assign to the Disk Encryption Set.

---

An `identity` block supports the following:

* `type` - (Required) The type of Managed Service Identity that is configured on this Disk Encryption Set. Possible values are `systemAssigned`, `userAssigned`, `SystemAssigned, UserAssigned` (to enable both). 

* `identityIds` - (Optional) A list of User Assigned Managed Identity IDs to be assigned to this Disk Encryption Set.

~> **NOTE:** This is required when `type` is set to `userAssigned` or `SystemAssigned, UserAssigned`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Disk Encryption Set.

---

An `identity` block exports the following:

* `principalId` - The (Client) ID of the Service Principal.

* `tenantId` - The ID of the Tenant the Service Principal is assigned in.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Disk Encryption Set.
* `update` - (Defaults to 60 minutes) Used when updating the Disk Encryption Set.
* `read` - (Defaults to 5 minutes) Used when retrieving the Disk Encryption Set.
* `delete` - (Defaults to 60 minutes) Used when deleting the Disk Encryption Set.

## Import

Disk Encryption Sets can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_disk_encryption_set.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/diskEncryptionSets/encryptionSet1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-010557148a05bda41da92b5e42212215bcfba3ad5007bb512e1c433352ccb06c -->