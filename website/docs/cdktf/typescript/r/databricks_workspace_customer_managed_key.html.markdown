---
subcategory: "Databricks"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_databricks_workspace_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a Databricks Workspace
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_databricks_workspace_customer_managed_key

Manages a Customer Managed Key for a Databricks Workspace

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermDatabricksWorkspaceExample =
      new azurerm.databricksWorkspace.DatabricksWorkspace(this, "example_2", {
        customerManagedKeyEnabled: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "databricks-test",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "premium",
        tags: {
          Environment: "Production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDatabricksWorkspaceExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_3",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplekeyvault",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyDatabricks =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "databricks",
        {
          dependsOn: [azurermDatabricksWorkspaceExample],
          keyPermissions: [
            "Create",
            "Delete",
            "Get",
            "Purge",
            "Recover",
            "Update",
            "List",
            "Decrypt",
            "Sign",
          ],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            cdktf.propertyAccess(
              azurermDatabricksWorkspaceExample.storageAccountIdentity,
              ["0", "principal_id"]
            )
          ),
          tenantId: cdktf.Token.asString(
            cdktf.propertyAccess(
              azurermDatabricksWorkspaceExample.storageAccountIdentity,
              ["0", "tenant_id"]
            )
          ),
        }
      );
    const azurermKeyVaultAccessPolicyTerraform =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "terraform",
        {
          keyPermissions: [
            "Create",
            "Delete",
            "Get",
            "Purge",
            "Recover",
            "Update",
            "List",
            "Decrypt",
            "Sign",
            "GetRotationPolicy",
          ],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          tenantId: cdktf.Token.asString(azurermKeyVaultExample.tenantId),
        }
      );
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_6",
      {
        dependsOn: [azurermKeyVaultAccessPolicyTerraform],
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "example-certificate",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermDatabricksWorkspaceCustomerManagedKeyExample =
      new azurerm.databricksWorkspaceCustomerManagedKey.DatabricksWorkspaceCustomerManagedKey(
        this,
        "example_7",
        {
          dependsOn: [azurermKeyVaultAccessPolicyDatabricks],
          keyVaultKeyId: cdktf.Token.asString(azurermKeyVaultKeyExample.id),
          workspaceId: cdktf.Token.asString(
            azurermDatabricksWorkspaceExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermDatabricksWorkspaceCustomerManagedKeyExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Example HCL Configurations

* [Databricks Workspace with Databricks File System Customer Managed Keys](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/databricks/customer-managed-key/dbfs)
* [Databricks Workspace with Customer Managed Keys for Managed Services](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/databricks/customer-managed-key/managed-services)
* [Databricks Workspace with Private Endpoint, Customer Managed Keys for Managed Services and Databricks File System Customer Managed Keys](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/databricks/managed-services)

## Argument Reference

The following arguments are supported:

* `workspaceId` - (Required) The ID of the Databricks Workspace..

* `keyVaultKeyId` - (Required) The ID of the Key Vault.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Databricks Workspace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Customer Managed Key for this Databricks Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Customer Managed Key for this Databricks Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Customer Managed Key for this Databricks Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Customer Managed Key for this Databricks Workspace.

## Import

Databricks Workspace Customer Managed Key can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_databricks_workspace_customer_managed_key.workspace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2d8244d9d8bd30741b8f424ed79f692df5ae83459af362a76b00eef44d888458 -->