---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_virtual_hub_security_partner_provider"
description: |-
  Manages a Security Partner Provider which could be associated to virtual hub.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_virtual_hub_security_partner_provider

Manages a Security Partner Provider which could be associated to virtual hub.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualWanExample = new azurerm.virtualWan.VirtualWan(
      this,
      "example_1",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vwan",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualWanExample.overrideLogicalId("example");
    const azurermVirtualHubExample = new azurerm.virtualHub.VirtualHub(
      this,
      "example_2",
      {
        addressPrefix: "10.0.2.0/24",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vhub",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        virtualWanId: cdktf.Token.asString(azurermVirtualWanExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualHubExample.overrideLogicalId("example");
    const azurermVpnGatewayExample = new azurerm.vpnGateway.VpnGateway(
      this,
      "example_3",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vpngw",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        virtualHubId: cdktf.Token.asString(azurermVirtualHubExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVpnGatewayExample.overrideLogicalId("example");
    const azurermVirtualHubSecurityPartnerProviderExample =
      new azurerm.virtualHubSecurityPartnerProvider.VirtualHubSecurityPartnerProvider(
        this,
        "example_4",
        {
          dependsOn: [azurermVpnGatewayExample],
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-spp",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          securityProviderName: "IBoss",
          tags: {
            ENV: "Prod",
          },
          virtualHubId: cdktf.Token.asString(azurermVirtualHubExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualHubSecurityPartnerProviderExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Security Partner Provider. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the Resource Group where the Security Partner Provider should exist. Changing this forces a new resource to be created.

* `location` - (Required) The Azure Region where the Security Partner Provider should exist. Changing this forces a new resource to be created.

* `securityProviderName` - (Required) The security provider name. Possible values are `zScaler`, `iBoss` and `checkpoint` is allowed. Changing this forces a new resource to be created.

* `virtualHubId` - (Optional) The ID of the Virtual Hub within which this Security Partner Provider should be created. Changing this forces a new resource to be created.

* `tags` - (Optional) A mapping of tags which should be assigned to the Security Partner Provider.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Security Partner Provider.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Security Partner Provider.
* `read` - (Defaults to 5 minutes) Used when retrieving the Security Partner Provider.
* `update` - (Defaults to 30 minutes) Used when updating the Security Partner Provider.
* `delete` - (Defaults to 30 minutes) Used when deleting the Security Partner Provider.

## Import

Security Partner Providers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_virtual_hub_security_partner_provider.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-c4883c53b6c951b6a0631cfaaa8e29f74680351e8c2c66c16565e74735fd25bc -->