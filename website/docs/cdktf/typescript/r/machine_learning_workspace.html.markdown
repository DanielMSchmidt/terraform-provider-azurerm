---
subcategory: "Machine Learning"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_machine_learning_workspace"
description: |-
  Manages a Azure Machine Learning Workspace.
---

<!-- Please do not edit this file, it is generated. -->
# azurerm_machine_learning_workspace

Manages a Azure Machine Learning Workspace

~> **NOTE:** For examples on how to set up the Azure Machine Learning workspace, together with compute and integrated services, see [Terraform Quickstart](https://github.com/Azure/terraform/tree/master/quickstart)

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountReplicationType: "GRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "workspacestorageaccount",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermApplicationInsightsExample =
      new azurerm.applicationInsights.ApplicationInsights(this, "example_4", {
        applicationType: "web",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "workspace-example-ai",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermApplicationInsightsExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_5",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "workspaceexamplekeyvault",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermMachineLearningWorkspaceExample =
      new azurerm.machineLearningWorkspace.MachineLearningWorkspace(
        this,
        "example_6",
        {
          applicationInsightsId: cdktf.Token.asString(
            azurermApplicationInsightsExample.id
          ),
          identity: {
            type: "SystemAssigned",
          },
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-workspace",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMachineLearningWorkspaceExample.overrideLogicalId("example");
  }
}

```

## Example Usage with Data encryption

~> **NOTE:** The Key Vault must enable purge protection.

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {
        keyVault: {
          purgeSoftDeleteOnDestroy: false,
        },
      },
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountReplicationType: "GRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "workspacestorageaccount",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermApplicationInsightsExample =
      new azurerm.applicationInsights.ApplicationInsights(this, "example_4", {
        applicationType: "web",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "workspace-example-ai",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermApplicationInsightsExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_5",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "workspaceexamplekeyvault",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyExample =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "example_6",
        {
          keyPermissions: [
            "Create",
            "Get",
            "Delete",
            "Purge",
            "GetRotationPolicy",
          ],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultAccessPolicyExample.overrideLogicalId("example");
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_7",
      {
        dependsOn: [azurermKeyVaultExample, azurermKeyVaultAccessPolicyExample],
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "workspaceexamplekeyvaultkey",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermMachineLearningWorkspaceExample =
      new azurerm.machineLearningWorkspace.MachineLearningWorkspace(
        this,
        "example_8",
        {
          applicationInsightsId: cdktf.Token.asString(
            azurermApplicationInsightsExample.id
          ),
          encryption: {
            keyId: cdktf.Token.asString(azurermKeyVaultKeyExample.id),
            keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          },
          identity: {
            type: "SystemAssigned",
          },
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-workspace",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMachineLearningWorkspaceExample.overrideLogicalId("example");
  }
}

```

## Example Usage with User Assigned Identity and Data Encryption

~> **NOTE:** The Key Vault must enable purge protection.

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
import * as azuread from "./.gen/providers/azuread";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
    For a more precise conversion please use the --provider flag in convert.*/
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {
        keyVault: {
          purgeSoftDeleteOnDestroy: false,
        },
      },
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountReplicationType: "GRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageaccount",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermUserAssignedIdentityExample =
      new azurerm.userAssignedIdentity.UserAssignedIdentity(this, "example_3", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-identity",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermUserAssignedIdentityExample.overrideLogicalId("example");
    const dataAzureadServicePrincipalTest =
      new azuread.dataAzureadServicePrincipal.DataAzureadServicePrincipal(
        this,
        "test",
        {
          display_name: "Azure Cosmos DB",
        }
      );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermApplicationInsightsExample =
      new azurerm.applicationInsights.ApplicationInsights(this, "example_6", {
        applicationType: "web",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-ai",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermApplicationInsightsExample.overrideLogicalId("example");
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_7",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-keyvalut",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyExampleCosmosdb =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "example-cosmosdb",
        {
          dependsOn: [
            dataAzureadServicePrincipalTest,
            dataAzurermClientConfigCurrent,
          ],
          keyPermissions: ["Get", "Recover", "UnwrapKey", "WrapKey"],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            dataAzureadServicePrincipalTest.objectId
          ),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
      this,
      "example-identity",
      {
        keyPermissions: ["WrapKey", "UnwrapKey", "Get", "Recover"],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.principalId
        ),
        secretPermissions: [
          "Get",
          "List",
          "Set",
          "Delete",
          "Recover",
          "Backup",
          "Restore",
        ],
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    const azurermKeyVaultAccessPolicyExampleSp =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "example-sp",
        {
          keyPermissions: [
            "Get",
            "Create",
            "Recover",
            "Delete",
            "Purge",
            "GetRotationPolicy",
          ],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.objectId
          ),
          tenantId: cdktf.Token.asString(
            dataAzurermClientConfigCurrent.tenantId
          ),
        }
      );
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_11",
      {
        dependsOn: [
          azurermKeyVaultExample,
          azurermKeyVaultAccessPolicyExampleSp,
        ],
        keyOpts: [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey",
        ],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "example-keyvaultkey",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermRoleAssignmentExampleRole1 =
      new azurerm.roleAssignment.RoleAssignment(this, "example-role1", {
        principalId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.principalId
        ),
        roleDefinitionName: "Contributor",
        scope: cdktf.Token.asString(azurermKeyVaultExample.id),
      });
    const azurermRoleAssignmentExampleRole2 =
      new azurerm.roleAssignment.RoleAssignment(this, "example-role2", {
        principalId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.principalId
        ),
        roleDefinitionName: "Storage Blob Data Contributor",
        scope: cdktf.Token.asString(azurermStorageAccountExample.id),
      });
    const azurermRoleAssignmentExampleRole3 =
      new azurerm.roleAssignment.RoleAssignment(this, "example-role3", {
        principalId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.principalId
        ),
        roleDefinitionName: "Contributor",
        scope: cdktf.Token.asString(azurermStorageAccountExample.id),
      });
    const azurermRoleAssignmentExampleRole4 =
      new azurerm.roleAssignment.RoleAssignment(this, "example-role4", {
        principalId: cdktf.Token.asString(
          azurermUserAssignedIdentityExample.principalId
        ),
        roleDefinitionName: "Contributor",
        scope: cdktf.Token.asString(azurermApplicationInsightsExample.id),
      });
    const azurermMachineLearningWorkspaceExample =
      new azurerm.machineLearningWorkspace.MachineLearningWorkspace(
        this,
        "example_16",
        {
          applicationInsightsId: cdktf.Token.asString(
            azurermApplicationInsightsExample.id
          ),
          dependsOn: [
            azurermRoleAssignmentExampleRole1,
            azurermRoleAssignmentExampleRole2,
            azurermRoleAssignmentExampleRole3,
            azurermRoleAssignmentExampleRole4,
            azurermKeyVaultAccessPolicyExampleCosmosdb,
          ],
          encryption: {
            keyId: cdktf.Token.asString(azurermKeyVaultKeyExample.id),
            keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
            userAssignedIdentityId: cdktf.Token.asString(
              azurermUserAssignedIdentityExample.id
            ),
          },
          highBusinessImpact: true,
          identity: {
            identityIds: [
              cdktf.Token.asString(azurermUserAssignedIdentityExample.id),
            ],
            type: "UserAssigned",
          },
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-workspace",
          primaryUserAssignedIdentity: cdktf.Token.asString(
            azurermUserAssignedIdentityExample.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMachineLearningWorkspaceExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Machine Learning Workspace. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the name of the Resource Group in which the Machine Learning Workspace should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the Machine Learning Workspace should exist. Changing this forces a new resource to be created.

* `applicationInsightsId` - (Required) The ID of the Application Insights associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

* `keyVaultId` - (Required) The ID of key vault associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

* `storageAccountId` - (Required) The ID of the Storage Account associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

-> **NOTE:** The `accountTier` cannot be `premium` in order to associate the Storage Account to this Machine Learning Workspace.

* `identity` - (Required) An `identity` block as defined below.

* `containerRegistryId` - (Optional) The ID of the container registry associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

-> **NOTE:** The `adminEnabled` should be `true` in order to associate the Container Registry to this Machine Learning Workspace.

* `publicAccessBehindVirtualNetworkEnabled` - (Optional) Enable public access when this Machine Learning Workspace is behind a VNet. Changing this forces a new resource to be created.

* `publicNetworkAccessEnabled` - (Optional) Enable public access when this Machine Learning Workspace is behind VNet.

~> **NOTE:** `publicAccessBehindVirtualNetworkEnabled` is deprecated and will be removed in favour of the property `publicNetworkAccessEnabled`.

* `imageBuildComputeName` - (Optional) The compute name for image build of the Machine Learning Workspace.

* `description` - (Optional) The description of this Machine Learning Workspace.

* `encryption` - (Optional) An `encryption` block as defined below. Changing this forces a new resource to be created.

* `friendlyName` - (Optional) Display name for this Machine Learning Workspace.

* `highBusinessImpact` - (Optional) Flag to signal High Business Impact (HBI) data in the workspace and reduce diagnostic data collected by the service

* `primaryUserAssignedIdentity` - (Optional) The user assigned identity id that represents the workspace identity.

* `v1LegacyModeEnabled` - (Optional) Enable V1 API features, enabling `v1LegacyMode` may prevent you from using features provided by the v2 API. Defaults to `false`.

* `skuName` - (Optional) SKU/edition of the Machine Learning Workspace, possible values are `basic`. Defaults to `basic`.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

An `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be configured on this Machine Learning Workspace. Possible values are `systemAssigned`, `userAssigned`, `SystemAssigned, UserAssigned` (to enable both).

* `identityIds` - (Optional) Specifies a list of User Assigned Managed Identity IDs to be assigned to this Machine Learning Workspace.

~> **NOTE:** This is required when `type` is set to `userAssigned` or `SystemAssigned, UserAssigned`.

---

An `encryption` block supports the following:

* `keyVaultId` - (Required) The ID of the keyVault where the customer owned encryption key is present.

* `keyId` - (Required) The Key Vault URI to access the encryption key.

* `userAssignedIdentityId` - (Optional) The Key Vault URI to access the encryption key.

~> **Note**: `userAssignedIdentityId` must set when`identityType` is `userAssigned` or service won't be able to find the assigned permissions.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Machine Learning Workspace.

* `discoveryUrl` - The url for the discovery service to identify regional endpoints for machine learning experimentation services.

* `workspaceId` - The immutable id associated with this workspace.

---

An `identity` block exports the following:

* `principalId` - The Principal ID associated with this Managed Service Identity.

* `tenantId` - The Tenant ID associated with this Managed Service Identity.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Machine Learning Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Machine Learning Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Machine Learning Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Machine Learning Workspace.

## Import

Machine Learning Workspace can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_machine_learning_workspace.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/workspace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-44f46c51f0292c831b83a981c899315a304fd8edbe0cb5e650f4d95ef6728781 -->