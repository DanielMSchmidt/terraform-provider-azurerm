---
subcategory: "App Service (Web Apps)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_web_app_hybrid_connection"
description: |-
  Manages a Web App Hybrid Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_web_app_hybrid_connection

Manages a Web App Hybrid Connection.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-rg",
      }
    );
    const azurermServicePlanExample = new azurerm.servicePlan.ServicePlan(
      this,
      "example_2",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-plan",
        osType: "Windows",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "S1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermServicePlanExample.overrideLogicalId("example");
    const azurermWindowsWebAppExample = new azurerm.windowsWebApp.WindowsWebApp(
      this,
      "example_3",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-web-app",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        servicePlanId: cdktf.Token.asString(azurermServicePlanExample.id),
        siteConfig: {},
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermWindowsWebAppExample.overrideLogicalId("example");
    const azurermRelayNamespaceExample =
      new azurerm.relayNamespace.RelayNamespace(this, "example_4", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-relay",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "Standard",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRelayNamespaceExample.overrideLogicalId("example");
    const azurermRelayHybridConnectionExample =
      new azurerm.relayHybridConnection.RelayHybridConnection(
        this,
        "example_5",
        {
          name: "examplerhc1",
          relayNamespaceName: cdktf.Token.asString(
            azurermRelayNamespaceExample.name
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRelayHybridConnectionExample.overrideLogicalId("example");
    const azurermWebAppHybridConnectionExample =
      new azurerm.webAppHybridConnection.WebAppHybridConnection(
        this,
        "example_6",
        {
          hostname: "myhostname.example",
          port: 8081,
          relayId: cdktf.Token.asString(azurermRelayHybridConnectionExample.id),
          webAppId: cdktf.Token.asString(azurermWindowsWebAppExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermWebAppHybridConnectionExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `webAppId` - (Required) The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.

* `relayId` - (Required) The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.

* `hostname` - (Required) The hostname of the endpoint.

* `port` - (Required) The port to use for the endpoint.

---

* `sendKeyName` - (Optional) The name of the Relay key with `send` permission to use. Defaults to `rootManageSharedAccessKey`

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Web App Hybrid Connection

* `namespaceName` - The name of the Relay Namespace.

* `relayName` - The name of the Relay in use.

* `sendKeyValue` - The Primary Access Key for the `sendKeyName`

* `serviceBusNamespace` - The Service Bus Namespace.

* `serviceBusSuffix` - The suffix for the endpoint.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Web App Hybrid Connection.
* `update` - (Defaults to 30 minutes) Used when updating the Web App Hybrid Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Web App Hybrid Connection.
* `delete` - (Defaults to 5 minutes) Used when deleting the Web App Hybrid Connection.

## Import

a Web App Hybrid Connection can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_web_app_hybrid_connection.example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/hybridConnectionNamespaces/hybridConnectionNamespace1/relays/relay1"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ba3d434395ab42635a5d368eed83de755e5cc8177e12434a1c0dcbc25bbe2aff -->