---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_sql_pool_workload_classifier"
description: |-
  Manages a Synapse SQL Pool Workload Classifier.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_sql_pool_workload_classifier

Manages a Synapse SQL Pool Workload Classifier.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_2", {
        accountKind: "BlobStorage",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_3",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_4", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermSynapseSqlPoolExample =
      new azurerm.synapseSqlPool.SynapseSqlPool(this, "example_5", {
        createMode: "Default",
        name: "example",
        skuName: "DW100c",
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseSqlPoolExample.overrideLogicalId("example");
    const azurermSynapseSqlPoolWorkloadGroupExample =
      new azurerm.synapseSqlPoolWorkloadGroup.SynapseSqlPoolWorkloadGroup(
        this,
        "example_6",
        {
          importance: "normal",
          maxResourcePercent: 100,
          maxResourcePercentPerRequest: 3,
          minResourcePercent: 0,
          minResourcePercentPerRequest: 3,
          name: "example",
          queryExecutionTimeoutInSeconds: 0,
          sqlPoolId: cdktf.Token.asString(azurermSynapseSqlPoolExample.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseSqlPoolWorkloadGroupExample.overrideLogicalId("example");
    const azurermSynapseSqlPoolWorkloadClassifierExample =
      new azurerm.synapseSqlPoolWorkloadClassifier.SynapseSqlPoolWorkloadClassifier(
        this,
        "example_7",
        {
          context: "example_context",
          endTime: "14:00",
          importance: "high",
          label: "example_label",
          memberName: "dbo",
          name: "example",
          startTime: "12:00",
          workloadGroupId: cdktf.Token.asString(
            azurermSynapseSqlPoolWorkloadGroupExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseSqlPoolWorkloadClassifierExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.

* `workloadGroupId` - (Required) The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.

* `memberName` - (Required) The workload classifier member name used to classified against.

---

* `context` - (Optional) Specifies the session context value that a request can be classified against.

* `endTime` - (Optional) The workload classifier end time for classification. It's of the `hh:mm` format in UTC time zone.

* `importance` - (Optional) The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.

* `label` - (Optional) Specifies the label value that a request can be classified against.

* `startTime` - (Optional) The workload classifier start time for classification. It's of the `hh:mm` format in UTC time zone.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse SQL Pool Workload Classifier.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse SQL Pool Workload Classifier.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse SQL Pool Workload Classifier.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse SQL Pool Workload Classifier.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse SQL Pool Workload Classifier.

## Import

Synapse SQL Pool Workload Classifiers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_sql_pool_workload_classifier.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/workloadGroups/workloadGroup1/workloadClassifiers/workloadClassifier1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5738d18c1f83f7df83e70a296e02e5b62d70a15a400ffe83c0143bac1b4ecd39 -->