---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_express_route_circuit_connection"
description: |-
  Manages an Express Route Circuit Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_express_route_circuit_connection

Manages an Express Route Circuit Connection.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermExpressRoutePortExample =
      new azurerm.expressRoutePort.ExpressRoutePort(this, "example_1", {
        bandwidthInGbps: 10,
        encapsulation: "Dot1Q",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-erport",
        peeringLocation: "Equinix-Seattle-SE2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRoutePortExample.overrideLogicalId("example");
    const azurermExpressRoutePortExample2 =
      new azurerm.expressRoutePort.ExpressRoutePort(this, "example2", {
        bandwidthInGbps: 10,
        encapsulation: "Dot1Q",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-erport2",
        peeringLocation: "Allied-Toronto-King-West",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermExpressRouteCircuitExample =
      new azurerm.expressRouteCircuit.ExpressRouteCircuit(this, "example_3", {
        bandwidthInGbps: 5,
        expressRoutePortId: cdktf.Token.asString(
          azurermExpressRoutePortExample.id
        ),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-ercircuit",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          family: "MeteredData",
          tier: "Standard",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitExample.overrideLogicalId("example");
    const azurermExpressRouteCircuitExample2 =
      new azurerm.expressRouteCircuit.ExpressRouteCircuit(this, "example2_4", {
        bandwidthInGbps: 5,
        expressRoutePortId: cdktf.Token.asString(
          azurermExpressRoutePortExample2.id
        ),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-ercircuit2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: {
          family: "MeteredData",
          tier: "Standard",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitExample2.overrideLogicalId("example2");
    const azurermExpressRouteCircuitPeeringExample =
      new azurerm.expressRouteCircuitPeering.ExpressRouteCircuitPeering(
        this,
        "example_5",
        {
          expressRouteCircuitName: cdktf.Token.asString(
            azurermExpressRouteCircuitExample.name
          ),
          peerAsn: 100,
          peeringType: "AzurePrivatePeering",
          primaryPeerAddressPrefix: "192.168.1.0/30",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          secondaryPeerAddressPrefix: "192.168.1.0/30",
          sharedKey: "ItsASecret",
          vlanId: 100,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitPeeringExample.overrideLogicalId("example");
    const azurermExpressRouteCircuitPeeringExample2 =
      new azurerm.expressRouteCircuitPeering.ExpressRouteCircuitPeering(
        this,
        "example2_6",
        {
          expressRouteCircuitName: cdktf.Token.asString(
            azurermExpressRouteCircuitExample2.name
          ),
          peerAsn: 100,
          peeringType: "AzurePrivatePeering",
          primaryPeerAddressPrefix: "192.168.1.0/30",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          secondaryPeerAddressPrefix: "192.168.1.0/30",
          sharedKey: "ItsASecret",
          vlanId: 100,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitPeeringExample2.overrideLogicalId("example2");
    const azurermExpressRouteCircuitConnectionExample =
      new azurerm.expressRouteCircuitConnection.ExpressRouteCircuitConnection(
        this,
        "example_7",
        {
          addressPrefixIpv4: "192.169.9.0/29",
          authorizationKey: "846a1918-b7a2-4917-b43c-8c4cdaee006a",
          name: "example-ercircuitconnection",
          peerPeeringId: cdktf.Token.asString(
            azurermExpressRouteCircuitPeeringExample2.id
          ),
          peeringId: cdktf.Token.asString(
            azurermExpressRouteCircuitPeeringExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermExpressRouteCircuitConnectionExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.

* `peeringId` - (Required) The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
  
* `peerPeeringId` - (Required) The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.

* `addressPrefixIpv4` - (Required) The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.

---

* `authorizationKey` - (Optional) The authorization key which is associated with the Express Route Circuit Connection.

* `addressPrefixIpv6` - (Optional) The IPv6 address space from which to allocate customer addresses for global reach.

-> **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Express Route Circuit Connection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Express Route Circuit Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Express Route Circuit Connection.
* `update` - (Defaults to 30 minutes) Used when updating the Express Route Circuit Connection.
* `delete` - (Defaults to 30 minutes) Used when deleting the Express Route Circuit Connection.

## Import

Express Route Circuit Connections can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_express_route_circuit_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRouteCircuits/circuit1/peerings/peering1/connections/connection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5cd3f74b5e4bf4ea49ba3b4e402bab2ea7ee4d489186af0eaace6386bef28ae1 -->