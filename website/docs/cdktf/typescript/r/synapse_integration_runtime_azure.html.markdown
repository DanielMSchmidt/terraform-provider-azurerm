---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_integration_runtime_azure"
description: |-
  Manages a Synapse Azure Integration Runtime.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_integration_runtime_azure

Manages a Synapse Azure Integration Runtime.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "LRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageContainerExample =
      new azurerm.storageContainer.StorageContainer(this, "example_2", {
        containerAccessType: "private",
        name: "content",
        storageAccountName: cdktf.Token.asString(
          azurermStorageAccountExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageContainerExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_3",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_4", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        managedVirtualNetworkEnabled: true,
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermSynapseFirewallRuleExample =
      new azurerm.synapseFirewallRule.SynapseFirewallRule(this, "example_5", {
        endIpAddress: "255.255.255.255",
        name: "AllowAll",
        startIpAddress: "0.0.0.0",
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseFirewallRuleExample.overrideLogicalId("example");
    const azurermSynapseIntegrationRuntimeAzureExample =
      new azurerm.synapseIntegrationRuntimeAzure.SynapseIntegrationRuntimeAzure(
        this,
        "example_6",
        {
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example",
          synapseWorkspaceId: cdktf.Token.asString(
            azurermSynapseWorkspaceExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseIntegrationRuntimeAzureExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Synapse Azure Integration Runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.

* `synapseWorkspaceId` - (Required) The Synapse Workspace ID in which to associate the Integration Runtime with. Changing this forces a new Synapse Azure Integration Runtime to be created.

* `location` - (Required) The Azure Region where the Synapse Azure Integration Runtime should exist. Use `autoResolve` to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.

---

* `computeType` - (Optional) Compute type of the cluster which will execute data flow job. Valid values are `general`, `computeOptimized` and `memoryOptimized`. Defaults to `general`.

* `coreCount` - (Optional) Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.

* `description` - (Optional) Integration runtime description.

* `timeToLiveMin` - (Optional) Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse Azure Integration Runtime.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Azure Integration Runtime.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Azure Integration Runtime.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Azure Integration Runtime.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Azure Integration Runtime.

## Import

Synapse Azure Integration Runtimes can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_integration_runtime_azure.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/integrationRuntimes/IntegrationRuntime1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a222df13a724ed9f60c96e4f42ca83951676a17d000571b6d910abdf67e70c5e -->