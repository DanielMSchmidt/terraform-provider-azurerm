---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_virtual_network_peering"
description: |-
  Manages a virtual network peering which allows resources to access other
  resources in the linked virtual network.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_virtual_network_peering

Manages a virtual network peering which allows resources to access other
resources in the linked virtual network.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "peeredvnets-rg",
      }
    );
    const azurermVirtualNetworkExample1 =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example-1", {
        addressSpace: ["10.0.1.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "peternetwork1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermVirtualNetworkExample2 =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example-2", {
        addressSpace: ["10.0.2.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "peternetwork2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermVirtualNetworkPeeringExample1 =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "example-1_3",
        {
          name: "peer1to2",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkExample2.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkExample1.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPeeringExample1.overrideLogicalId("example-1");
    const azurermVirtualNetworkPeeringExample2 =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "example-2_4",
        {
          name: "peer2to1",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkExample1.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkExample2.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPeeringExample2.overrideLogicalId("example-2");
  }
}

```

## Example Usage (Global virtual network peering)

```hcl
variable "location" {
  default = [
    "uksouth",
    "southeastasia",
  ]
}

variable "vnet_address_space" {
  default = [
    "10.0.0.0/16",
    "10.1.0.0/16",
  ]
}

resource "azurerm_resource_group" "example" {
  count    = length(var.location)
  name     = "rg-global-vnet-peering-${count.index}"
  location = element(var.location, count.index)
}

resource "azurerm_virtual_network" "vnet" {
  count               = length(var.location)
  name                = "vnet-${count.index}"
  resource_group_name = element(azurerm_resource_group.example.*.name, count.index)
  address_space       = [element(var.vnet_address_space, count.index)]
  location            = element(azurerm_resource_group.example.*.location, count.index)
}

resource "azurerm_subnet" "nva" {
  count                = length(var.location)
  name                 = "nva"
  resource_group_name  = element(azurerm_resource_group.example.*.name, count.index)
  virtual_network_name = element(azurerm_virtual_network.vnet.*.name, count.index)
  address_prefix = cidrsubnet(
    element(
      azurerm_virtual_network.vnet[count.index].address_space,
      count.index,
    ),
    13,
    0,
  ) # /29
}

# enable global peering between the two virtual network
resource "azurerm_virtual_network_peering" "peering" {
  count                        = length(var.location)
  name                         = "peering-to-${element(azurerm_virtual_network.vnet.*.name, 1 - count.index)}"
  resource_group_name          = element(azurerm_resource_group.example.*.name, count.index)
  virtual_network_name         = element(azurerm_virtual_network.vnet.*.name, count.index)
  remote_virtual_network_id    = element(azurerm_virtual_network.vnet.*.id, 1 - count.index)
  allow_virtual_network_access = true
  allow_forwarded_traffic      = true

  # `allowGatewayTransit` must be set to false for vnet Global Peering
  allow_gateway_transit = false
}
```


## Example Usage (Triggers)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "peeredvnets-rg",
      }
    );
    const azurermVirtualNetworkExample1 =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example-1", {
        addressSpace: ["10.0.1.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "peternetwork1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermVirtualNetworkExample2 =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example-2", {
        addressSpace: ["10.0.2.0/24"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "peternetwork2",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermVirtualNetworkPeeringExample1 =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "example-1_3",
        {
          name: "peer1to2",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkExample2.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          triggers: {
            remote_address_space: cdktf.Fn.join(
              ",",
              cdktf.Token.asList(azurermVirtualNetworkExample2.addressSpace)
            ),
          },
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkExample1.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPeeringExample1.overrideLogicalId("example-1");
    const azurermVirtualNetworkPeeringExample2 =
      new azurerm.virtualNetworkPeering.VirtualNetworkPeering(
        this,
        "example-2_4",
        {
          name: "peer2to1",
          remoteVirtualNetworkId: cdktf.Token.asString(
            azurermVirtualNetworkExample1.id
          ),
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          triggers: {
            remote_address_space: cdktf.Fn.join(
              ",",
              cdktf.Token.asList(azurermVirtualNetworkExample1.addressSpace)
            ),
          },
          virtualNetworkName: cdktf.Token.asString(
            azurermVirtualNetworkExample2.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkPeeringExample2.overrideLogicalId("example-2");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the virtual network peering. Changing this forces a new resource to be created.

* `virtualNetworkName` - (Required) The name of the virtual network. Changing this forces a new resource to be created.

* `remoteVirtualNetworkId` - (Required) The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.

* `allowVirtualNetworkAccess` - (Optional) Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.

* `allowForwardedTraffic` - (Optional) Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.

* `allowGatewayTransit` - (Optional) Controls gatewayLinks can be used in the remote virtual networkâ€™s link to the local virtual network. Defaults to `false`.

* `useRemoteGateways` - (Optional) Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.

-> **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.

* `triggers` - (Optional) A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See [the trigger example](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_network_peering#example-usage-triggers) for an example on how to set it up.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Virtual Network Peering.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Virtual Network Peering.
* `update` - (Defaults to 30 minutes) Used when updating the Virtual Network Peering.
* `read` - (Defaults to 5 minutes) Used when retrieving the Virtual Network Peering.
* `delete` - (Defaults to 30 minutes) Used when deleting the Virtual Network Peering.

## Note

Virtual Network peerings cannot be created, updated or deleted concurrently.

## Import

Virtual Network Peerings can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_virtual_network_peering.examplePeering /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/virtualNetworkPeerings/myvnet1peering
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-00ad9f365642d99103fa2f16984927ebb93483a4e05c6ec91c24fbf93676a07b -->