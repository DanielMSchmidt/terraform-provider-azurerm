---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_route_server"
description: |-
  Manages an Azure Route Server 
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_route_server

Manages an Azure Route Server

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermVirtualNetworkExample =
      new azurerm.virtualNetwork.VirtualNetwork(this, "example_1", {
        addressSpace: ["10.0.0.0/16"],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-vn",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        tags: {
          environment: "Production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermVirtualNetworkExample.overrideLogicalId("example");
    const azurermPublicIpExample = new azurerm.publicIp.PublicIp(
      this,
      "example_2",
      {
        allocationMethod: "Static",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-pip",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermPublicIpExample.overrideLogicalId("example");
    const azurermSubnetExample = new azurerm.subnet.Subnet(this, "example_3", {
      addressPrefixes: ["10.0.1.0/24"],
      name: "RouteServerSubnet",
      resourceGroupName: cdktf.Token.asString(azurermResourceGroupExample.name),
      virtualNetworkName: cdktf.Token.asString(
        azurermVirtualNetworkExample.name
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetExample.overrideLogicalId("example");
    const azurermRouteServerExample = new azurerm.routeServer.RouteServer(
      this,
      "example_4",
      {
        branchToBranchTrafficEnabled: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-routerserver",
        publicIpAddressId: cdktf.Token.asString(azurermPublicIpExample.id),
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sku: "Standard",
        subnetId: cdktf.Token.asString(azurermSubnetExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRouteServerExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name of the Route Server. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.

* `subnetId` - (Required) The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.

-> **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you'll receive an error message when deploying the Route Server

* `sku` - (Required) The SKU of the Route Server. The only possible value is `standard`. Changing this forces a new resource to be created.

* `publicIpAddressId` - (Required) The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.

* `branchToBranchTrafficEnabled` - (Optional) Whether to enable route exchange between Azure Route Server and the gateway(s)

* `tags` - (Optional) A mapping of tags to assign to the resource.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Route Server .

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Route Server.
* `read` - (Defaults to 5 minutes) Used when retrieving the Route Server.
* `update` - (Defaults to 60 minutes) Used when updating the Route Server.
* `delete` - (Defaults to 60 minutes) Used when deleting the Route Server.

## Import

Route Server can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_route_server.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/routeServer1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-13cf2aab90f21f97b4f4373a1ab0bb9eba6c38a31a9b6822b6da0577d1f6bada -->