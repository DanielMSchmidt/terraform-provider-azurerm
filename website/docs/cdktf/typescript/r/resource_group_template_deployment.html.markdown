---
subcategory: "Template"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_resource_group_template_deployment"
description: |-
  Manages a Resource Group Template Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_resource_group_template_deployment

Manages a Resource Group Template Deployment.

~> **Note:** This resource will automatically attempt to delete resources deployed by the ARM Template when it is deleted. This behavior can be disabled in the provider `features` block by setting the `deleteNestedItemsDuringDeletion` field to `false` within the `templateDeployment` block.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const vnetName = "example-vnet";
    const azurermResourceGroupTemplateDeploymentExample =
      new azurerm.resourceGroupTemplateDeployment.ResourceGroupTemplateDeployment(
        this,
        "example",
        {
          deploymentMode: "Incremental",
          name: "example-deploy",
          parametersContent: cdktf.Fn.jsonencode({
            vnetName: {
              value: vnetName,
            },
          }),
          resourceGroupName: "example-group",
          templateContent:
            '{\n    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",\n    "contentVersion": "1.0.0.0",\n    "parameters": {\n        "vnetName": {\n            "type": "string",\n            "metadata": {\n                "description": "Name of the VNET"\n            }\n        }\n    },\n    "variables": {},\n    "resources": [\n        {\n            "type": "Microsoft.Network/virtualNetworks",\n            "apiVersion": "2020-05-01",\n            "name": "[parameters(\'vnetName\')]",\n            "location": "[resourceGroup().location]",\n            "properties": {\n                "addressSpace": {\n                    "addressPrefixes": [\n                        "10.0.0.0/16"\n                    ]\n                }\n            }\n        }\n    ],\n    "outputs": {\n      "exampleOutput": {\n        "type": "string",\n        "value": "someoutput"\n      }\n    }\n}\n',
        }
      );
    new cdktf.TerraformOutput(this, "arm_example_output", {
      value: cdktf.propertyAccess(
        cdktf.Fn.jsondecode(
          cdktf.Token.asString(
            azurermResourceGroupTemplateDeploymentExample.outputContent
          )
        ),
        ["exampleOutput", "value"]
      ),
    });
  }
}

```

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAzurermTemplateSpecVersionExample =
      new azurerm.dataAzurermTemplateSpecVersion.DataAzurermTemplateSpecVersion(
        this,
        "example",
        {
          name: "myTemplateForResourceGroup",
          resourceGroupName: "myResourceGroup",
          version: "v3.4.0",
        }
      );
    const azurermResourceGroupTemplateDeploymentExample =
      new azurerm.resourceGroupTemplateDeployment.ResourceGroupTemplateDeployment(
        this,
        "example_1",
        {
          deploymentMode: "Incremental",
          name: "example-deploy",
          resourceGroupName: "example-group",
          templateSpecVersionId: cdktf.Token.asString(
            dataAzurermTemplateSpecVersionExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermResourceGroupTemplateDeploymentExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `deploymentMode` - (Required) The Deployment Mode for this Resource Group Template Deployment. Possible values are `complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `incremental` (where resources are additive only).
  
~> **Note:** If `deploymentMode` is set to `complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.

* `name` - (Required) The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.

* `resourceGroupName` - (Required) The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.

---

* `debugLevel` - (Optional) The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.

* `templateContent` - (Optional) The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.

* `templateSpecVersionId` - (Optional) The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.

* `parametersContent` - (Optional) The contents of the ARM Template parameters file - containing a JSON list of parameters.

-> An example of how to pass Terraform variables into an ARM Template can be seen in the example.

* `tags` - (Optional) A mapping of tags which should be assigned to the Resource Group Template Deployment.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Resource Group Template Deployment.

* `outputContent` - The JSON Content of the Outputs of the ARM Template Deployment.

-> An example of how to consume ARM Template outputs in Terraform can be seen in the example.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 3 hours) Used when creating the Resource Group Template Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Resource Group Template Deployment.
* `update` - (Defaults to 3 hours) Used when updating the Resource Group Template Deployment.
* `delete` - (Defaults to 3 hours) Used when deleting the Resource Group Template Deployment.

## Import

Resource Group Template Deployments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_resource_group_template_deployment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Resources/deployments/template1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ea7f432bf5f8e1369d56b802effd88ad06c8ca053539786c6ff5c06cb1ae28a3 -->