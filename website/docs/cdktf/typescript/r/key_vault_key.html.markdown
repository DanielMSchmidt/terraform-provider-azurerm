---
subcategory: "Key Vault"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_key_vault_key"
description: |-
  Manages a Key Vault Key.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_key_vault_key

Manages a Key Vault Key.

## Example Usage

~> **Note:** To use this resource, your client should have RBAC roles with permissions like `Key Vault Crypto Officer` or `Key Vault Administrator` or an assigned Key Vault Access Policy with permissions `create`,`delete`,`get`,`purge`,`recover`,`update` and `getRotationPolicy` for keys without Rotation Policy. Include `setRotationPolicy` for keys with Rotation Policy.

~> **Note:** the Azure Provider includes a Feature Toggle which will purge a Key Vault Key resource on destroy, rather than the default soft-delete. See [`purgeSoftDeletedKeysOnDestroy`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/features-block#purge_soft_deleted_keys_on_destroy) for more information.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {
        keyVault: {
          purgeSoftDeletedKeysOnDestroy: true,
          recoverSoftDeletedKeys: true,
        },
      },
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_3",
      {
        accessPolicy: [
          {
            keyPermissions: [
              "Create",
              "Delete",
              "Get",
              "Purge",
              "Recover",
              "Update",
              "GetRotationPolicy",
              "SetRotationPolicy",
            ],
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            secretPermissions: ["Set"],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplekeyvault",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "premium",
        softDeleteRetentionDays: 7,
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    new azurerm.keyVaultKey.KeyVaultKey(this, "generated", {
      keyOpts: ["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"],
      keySize: 2048,
      keyType: "RSA",
      keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
      name: "generated-certificate",
      rotationPolicy: {
        automatic: {
          timeBeforeExpiry: "P30D",
        },
        expireAfter: "P90D",
        notifyBeforeExpiry: "P29D",
      },
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.

* `keyVaultId` - (Required) The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.

* `keyType` - (Required) Specifies the Key Type to use for this Key Vault Key. Possible values are `ec` (Elliptic Curve), `ecHsm`, `rsa` and `rsaHsm`. Changing this forces a new resource to be created.

* `keySize` - (Optional) Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `keyType` is `rsa` or `rsaHsm`. Changing this forces a new resource to be created.

* `curve` - (Optional) Specifies the curve to use when creating an `ec` key. Possible values are `p256`, `p256K`, `p384`, and `p521`. This field will be required in a future release if `keyType` is `ec` or `ecHsm`. The API will default to `p256` if nothing is specified. Changing this forces a new resource to be created.

* `keyOpts` - (Required) A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.

* `notBeforeDate` - (Optional) Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').

* `expirationDate` - (Optional) Expiration UTC datetime (Y-m-d'T'H:M:S'Z').

* `tags` - (Optional) A mapping of tags to assign to the resource.

* `rotationPolicy` - (Optional) A `rotationPolicy` block as defined below.

---

A `rotationPolicy` block supports the following:

* `expireAfter` - (Optional) Expire a Key Vault Key after given duration as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).

* `automatic` - (Optional) An `automatic` block as defined below.

* `notifyBeforeExpiry` - (Optional) Notify at a given duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Default is `p30D`.

---

An `automatic` block supports the following:

* `timeAfterCreation` - (Optional) Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).

* `timeBeforeExpiry` - (Optional) Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Key Vault Key ID.
* `resourceId` - The (Versioned) ID for this Key Vault Key. This property points to a specific version of a Key Vault Key, as such using this won't auto-rotate values if used in other Azure Services.
* `resourceVersionlessId` - The Versionless ID of the Key Vault Key. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Key is updated.
* `version` - The current version of the Key Vault Key.
* `versionlessId` - The Base ID of the Key Vault Key.
* `n` - The RSA modulus of this Key Vault Key.
* `e` - The RSA public exponent of this Key Vault Key.
* `x` - The EC X component of this Key Vault Key.
* `y` - The EC Y component of this Key Vault Key.
* `publicKeyPem` - The PEM encoded public key of this Key Vault Key.
* `publicKeyOpenssh` - The OpenSSH encoded public key of this Key Vault Key.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Key Vault Key.
* `update` - (Defaults to 30 minutes) Used when updating the Key Vault Key.
* `read` - (Defaults to 30 minutes) Used when retrieving the Key Vault Key.
* `delete` - (Defaults to 30 minutes) Used when deleting the Key Vault Key.

## Import

Key Vault Key which is Enabled can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_key_vault_key.example "https://example-keyvault.vault.azure.net/keys/example/fdf067c93bbb4b22bff4d8b7a9a56217"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-6279ec5d8570fdafd85a687f474d8bdd30f4d3fb08d2333e65f998107a66e44e -->