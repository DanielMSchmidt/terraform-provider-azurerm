---
subcategory: "Redis Enterprise"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_redis_enterprise_database"
description: |-
  Manages a Redis Enterprise Database.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_redis_enterprise_database

Manages a Redis Enterprise Database.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-redisenterprise",
      }
    );
    const azurermRedisEnterpriseClusterExample =
      new azurerm.redisEnterpriseCluster.RedisEnterpriseCluster(
        this,
        "example_1",
        {
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-redisenterprise",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          skuName: "Enterprise_E20-4",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRedisEnterpriseClusterExample.overrideLogicalId("example");
    const azurermRedisEnterpriseClusterExample1 =
      new azurerm.redisEnterpriseCluster.RedisEnterpriseCluster(
        this,
        "example1",
        {
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-redisenterprise1",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          skuName: "Enterprise_E20-4",
        }
      );
    const azurermRedisEnterpriseDatabaseExample =
      new azurerm.redisEnterpriseDatabase.RedisEnterpriseDatabase(
        this,
        "example_3",
        {
          clientProtocol: "Encrypted",
          clusterId: cdktf.Token.asString(
            azurermRedisEnterpriseClusterExample.id
          ),
          clusteringPolicy: "EnterpriseCluster",
          evictionPolicy: "NoEviction",
          linkedDatabaseGroupNickname: "tftestGeoGroup",
          linkedDatabaseId: [
            "${" +
              azurermRedisEnterpriseClusterExample.id +
              "}/databases/default",
            "${" +
              azurermRedisEnterpriseClusterExample1.id +
              "}/databases/default",
          ],
          name: "default",
          port: 10000,
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRedisEnterpriseDatabaseExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Optional) The name which should be used for this Redis Enterprise Database. Currently the acceptable value for this argument is `default`. Defaults to `default`. Changing this forces a new Redis Enterprise Database to be created.

* `resourceGroupName` - (Optional) The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.

* `clusterId` - (Required) The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.

* `clientProtocol` - (Optional) Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. Possible values are `encrypted` and `plaintext`. Defaults to `encrypted`. Changing this forces a new Redis Enterprise Database to be created.

* `clusteringPolicy` - (Optional) Clustering policy - default is OSSCluster. Specified at create time. Possible values are `enterpriseCluster` and `ossCluster`. Defaults to `ossCluster`. Changing this forces a new Redis Enterprise Database to be created.

* `evictionPolicy` - (Optional) Redis eviction policy - default is `volatileLru`. Possible values are `allKeysLfu`, `allKeysLru`, `allKeysRandom`, `volatileLru`, `volatileLfu`, `volatileTtl`, `volatileRandom` and `noEviction`. Changing this forces a new Redis Enterprise Database to be created.

* `module` - (Optional) A `module` block as defined below. Changing this forces a new resource to be created.

-> **NOTE:** Only RediSearch module is allowed with geo-replication

* `linkedDatabaseId` - (Optional) A list of database resources to link with this database with a maximum of 5.

-> **NOTE:** Only the newly created databases can be added to an existing geo-replication group. Existing regular databases or recreated databases cannot be added to the existing geo-replication group. Any linked database be removed from the list will be forcefully unlinked.The only recommended operation is to delete after force-unlink and the recommended scenario of force-unlink is region outrage. The database cannot be linked again after force-unlink.

* `linkedDatabaseGroupNickname` - (Optional) Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.

* `port` - (Optional) TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to `10000`.

---

An `module` block exports the following:

* `name` - (Required) The name which should be used for this module. Possible values are `redisBloom`, `redisTimeSeries`, `rediSearch` and `redisJson`. Changing this forces a new Redis Enterprise Database to be created.

* `args` - (Optional) Configuration options for the module (e.g. `ERROR_RATE 0.00 INITIAL_SIZE 400`). Changing this forces a new resource to be created. Defaults to `""`.

---

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Redis Enterprise Database.

* `primaryAccessKey` - The Primary Access Key for the Redis Enterprise Database Instance.

* `secondaryAccessKey` - The Secondary Access Key for the Redis Enterprise Database Instance.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Redis Enterprise Database.
* `read` - (Defaults to 5 minutes) Used when retrieving the Redis Enterprise Database.
* `update` - (Defaults to 30 minutes) Used when updating the Redis Enterprise Database.
* `delete` - (Defaults to 30 minutes) Used when deleting the Redis Enterprise Database.

## Import

Redis Enterprise Databases can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_redis_enterprise_database.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redisEnterprise/cluster1/databases/database1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e45bb5a6d00b3101a7ac3ae1f75d9554f307b79ac8b262cf78753cc3d1542480 -->