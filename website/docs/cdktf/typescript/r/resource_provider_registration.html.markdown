---
subcategory: "Base"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_resource_provider_registration"
description: |-
    Manages the Registration of a Resource Provider.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_resource_provider_registration

Manages the registration of a Resource Provider - which allows access to the API's supported by this Resource Provider.

-> The Azure Provider will automatically register all of the Resource Providers which it supports on launch (unless opted-out using the `skipProviderRegistration` field within the provider block).

!> **Note:** The errors returned from the Azure API when a Resource Provider is unregistered are unclear (example `API version '2019-01-01' was not found for 'Microsoft.Foo'`) - please ensure that all of the necessary Resource Providers you're using are registered - if in doubt **we strongly recommend letting Terraform register these for you**.

-> **Note:** Adding or Removing a Preview Feature will re-register the Resource Provider.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.resourceProviderRegistration.ResourceProviderRegistration(
      this,
      "example",
      {
        name: "Microsoft.PolicyInsights",
      }
    );
  }
}

```

## Example Usage (Registering a Preview Feature)

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
      skipProviderRegistration: true,
    });
    new azurerm.resourceProviderRegistration.ResourceProviderRegistration(
      this,
      "example",
      {
        feature: [
          {
            name: "AKS-DataPlaneAutoApprove",
            registered: true,
          },
        ],
        name: "Microsoft.ContainerService",
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The namespace of the Resource Provider which should be registered. Changing this forces a new resource to be created.

* `feature` - (Optional) A list of `feature` blocks as defined below.

~> **Note:** The `feature` block allows a Preview Feature to be explicitly Registered or Unregistered for this Resource Provider - once a Feature has been explicitly Registered or Unregistered, it must be specified in the Terraform Configuration (it's not possible to reset this to the default, unspecified, state).

---

A `feature` block supports the following:

* `name` - (Required) Specifies the name of the feature to register.

~> **Note:** Only Preview Features which have an `approvalType` of `autoApproval` can be managed in Terraform, features which require manual approval by Service Teams are unsupported. [More information on Resource Provider Preview Features can be found in this document](https://docs.microsoft.com/rest/api/resources/features)

* `registered` - (Required) Should this feature be Registered or Unregistered?

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 120 minutes) Used when registering the Resource Provider/Features.
* `read` - (Defaults to 5 minutes) Used when retrieving the Resource Provider.
* `update` - (Defaults to 120 minutes) Used when updating the Resource Provider/Features.
* `delete` - (Defaults to 30 minutes) Used when unregistering the Resource Provider.

## Import

Resource Provider Registrations can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_resource_provider_registration.example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.PolicyInsights
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-739d679fac72112af314a073ae77b8d5b6aa05ae36a7fd128208fdb45bb2adb5 -->