---
subcategory: "Stream Analytics"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_stream_analytics_output_synapse"
description: |-
  Manages a Stream Analytics Output to an Azure Synapse Analytics Workspace.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_stream_analytics_output_synapse

Manages a Stream Analytics Output to an Azure Synapse Analytics Workspace.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "rg-example",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        isHnsEnabled: cdktf.Token.asBoolean("true"),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_3", {
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const dataAzurermStreamAnalyticsJobExample =
      new azurerm.dataAzurermStreamAnalyticsJob.DataAzurermStreamAnalyticsJob(
        this,
        "example_4",
        {
          name: "example-job",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzurermStreamAnalyticsJobExample.overrideLogicalId("example");
    const azurermStreamAnalyticsOutputSynapseExample =
      new azurerm.streamAnalyticsOutputSynapse.StreamAnalyticsOutputSynapse(
        this,
        "example_5",
        {
          database: "master",
          name: "example-output-synapse",
          password: cdktf.Token.asString(
            azurermSynapseWorkspaceExample.sqlAdministratorLoginPassword
          ),
          resourceGroupName: cdktf.Token.asString(
            dataAzurermStreamAnalyticsJobExample.resourceGroupName
          ),
          server: cdktf.Token.asString(
            cdktf.propertyAccess(
              azurermSynapseWorkspaceExample.connectivityEndpoints,
              ['"sqlOnDemand"']
            )
          ),
          streamAnalyticsJobName: cdktf.Token.asString(
            dataAzurermStreamAnalyticsJobExample.name
          ),
          table: "ExampleTable",
          user: cdktf.Token.asString(
            azurermSynapseWorkspaceExample.sqlAdministratorLogin
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStreamAnalyticsOutputSynapseExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Stream Output. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.

* `streamAnalyticsJobName` - (Required) The name of the Stream Analytics Job. Changing this forces a new resource to be created.

* `server` - (Required) The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.

* `database` - (Required) The name of the Azure SQL database. Changing this forces a new resource to be created.

* `user` - (Required) The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.

* `password` - (Required) The password that will be used to connect to the Azure SQL database. 

* `table` - (Required) The name of the table in the Azure SQL database. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Stream Analytics Output to an Azure Synapse Analytics Workspace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Stream Analytics Output to an Azure Synapse Analytics Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Stream Analytics Output to an Azure Synapse Analytics Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Stream Analytics Output to an Azure Synapse Analytics Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Stream Analytics Output to an Azure Synapse Analytics Workspace.

## Import

A Stream Analytics Output to an Azure Synapse Analytics Workspace can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_stream_analytics_output_synapse.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f6c9489b7d02515a501a897792555398b2873f37fa91a63c39d40b0c4b7dc817 -->