---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_certificate"
description: |-
  Manages an Azure Spring Cloud Certificate.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_certificate

Manages an Azure Spring Cloud Certificate.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
import * as azuread from "./.gen/providers/azuread";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
    For a more precise conversion please use the --provider flag in convert.*/
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermSpringCloudServiceExample =
      new azurerm.springCloudService.SpringCloudService(this, "example_2", {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-springcloud",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudServiceExample.overrideLogicalId("example");
    const dataAzureadServicePrincipalExample =
      new azuread.dataAzureadServicePrincipal.DataAzureadServicePrincipal(
        this,
        "example_3",
        {
          display_name: "Azure Spring Cloud Resource Provider",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzureadServicePrincipalExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_5",
      {
        accessPolicy: [
          {
            certificatePermissions: ["Create", "Delete", "Get", "Update"],
            objectId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.objectId
            ),
            secretPermissions: ["Set"],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
          {
            certificatePermissions: ["Get", "List"],
            objectId: cdktf.Token.asString(
              dataAzureadServicePrincipalExample.objectId
            ),
            secretPermissions: ["Get", "List"],
            tenantId: cdktf.Token.asString(
              dataAzurermClientConfigCurrent.tenantId
            ),
          },
        ],
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "keyvaultcertexample",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultCertificateExample =
      new azurerm.keyVaultCertificate.KeyVaultCertificate(this, "example_6", {
        certificatePolicy: {
          issuerParameters: {
            name: "Self",
          },
          keyProperties: {
            exportable: true,
            keySize: 2048,
            keyType: "RSA",
            reuseKey: true,
          },
          lifetimeAction: [
            {
              action: {
                actionType: "AutoRenew",
              },
              trigger: {
                daysBeforeExpiry: 30,
              },
            },
          ],
          secretProperties: {
            contentType: "application/x-pkcs12",
          },
          x509CertificateProperties: {
            keyUsage: [
              "cRLSign",
              "dataEncipherment",
              "digitalSignature",
              "keyAgreement",
              "keyCertSign",
              "keyEncipherment",
            ],
            subject: "CN=contoso.com",
            validityInMonths: 12,
          },
        },
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "cert-example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultCertificateExample.overrideLogicalId("example");
    const azurermSpringCloudCertificateExample =
      new azurerm.springCloudCertificate.SpringCloudCertificate(
        this,
        "example_7",
        {
          excludePrivateKey: true,
          keyVaultCertificateId: cdktf.Token.asString(
            azurermKeyVaultCertificateExample.id
          ),
          name: "example-scc",
          resourceGroupName: cdktf.Token.asString(
            azurermSpringCloudServiceExample.resourceGroupName
          ),
          serviceName: cdktf.Token.asString(
            azurermSpringCloudServiceExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSpringCloudCertificateExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.

* `serviceName` - (Required) Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.

* `excludePrivateKey` - (Optional) Specifies whether the private key should be excluded from the Key Vault Certificate. Defaults to `false`.

* `keyVaultCertificateId` - (Optional) Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.

* `certificateContent` - (Optional) The content of uploaded certificate. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Certificate.

* `thumbprint` - The thumbprint of the Spring Cloud certificate.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Certificate.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Certificate.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Certificate.

## Import

Spring Cloud Certificate can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_certificate.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/spring1/certificates/cert1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8aa045b70a2239a871d7b7a5c25766c0efc434f6da3b78a396e7f1ef1a9b5676 -->