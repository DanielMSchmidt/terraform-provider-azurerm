---
subcategory: "Managed Applications"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_managed_application"
description: |-
  Manages a Managed Application.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_managed_application

Manages a Managed Application.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const dataAzurermRoleDefinitionBuiltin =
      new azurerm.dataAzurermRoleDefinition.DataAzurermRoleDefinition(
        this,
        "builtin",
        {
          name: "Contributor",
        }
      );
    const azurermManagedApplicationDefinitionExample =
      new azurerm.managedApplicationDefinition.ManagedApplicationDefinition(
        this,
        "example_4",
        {
          authorization: [
            {
              roleDefinitionId: cdktf.Token.asString(
                cdktf.propertyAccess(
                  cdktf.Fn.split(
                    "/",
                    cdktf.Token.asString(dataAzurermRoleDefinitionBuiltin.id)
                  ),
                  [
                    cdktf.Op.sub(
                      cdktf.Fn.lengthOf(
                        cdktf.Fn.split(
                          "/",
                          cdktf.Token.asString(
                            dataAzurermRoleDefinitionBuiltin.id
                          )
                        )
                      ),
                      1
                    ),
                  ]
                )
              ),
              servicePrincipalId: cdktf.Token.asString(
                dataAzurermClientConfigCurrent.objectId
              ),
            },
          ],
          description: "Test Managed App Definition",
          displayName: "TestManagedAppDefinition",
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          lockLevel: "ReadOnly",
          name: "examplemanagedapplicationdefinition",
          packageFileUri:
            "https://github.com/Azure/azure-managedapp-samples/raw/master/Managed Application Sample Packages/201-managed-storage-account/managedstorage.zip",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermManagedApplicationDefinitionExample.overrideLogicalId("example");
    const azurermManagedApplicationExample =
      new azurerm.managedApplication.ManagedApplication(this, "example_5", {
        applicationDefinitionId: cdktf.Token.asString(
          azurermManagedApplicationDefinitionExample.id
        ),
        kind: "ServiceCatalog",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        managedResourceGroupName: "infrastructureGroup",
        name: "example-managedapplication",
        parameters: {
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          storageAccountNamePrefix: "storeNamePrefix",
          storageAccountType: "Standard_LRS",
        },
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermManagedApplicationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Managed Application. Changing this forces a new resource to be created. 

* `resourceGroupName` - (Required) The name of the Resource Group where the Managed Application should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `kind` - (Required) The kind of the managed application to deploy. Possible values are `marketPlace` and `serviceCatalog`. Changing this forces a new resource to be created.

* `managedResourceGroupName` - (Required) The name of the target resource group where all the resources deployed by the managed application will reside. Changing this forces a new resource to be created.

* `applicationDefinitionId` - (Optional) The application definition ID to deploy.

* `parameters` - (Optional) A mapping of name and value pairs to pass to the managed application as parameters.

* `parameterValues` - (Optional) The parameter values to pass to the Managed Application. This field is a JSON object that allows you to assign parameters to this Managed Application.

* `plan` - (Optional) One `plan` block as defined below.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

The `plan` block exports the following:

* `name` - (Required) Specifies the name of the plan from the marketplace.

* `product` - (Required) Specifies the product of the plan from the marketplace.

* `publisher` - (Required) Specifies the publisher of the plan.

* `version` - (Required) Specifies the version of the plan from the marketplace.

* `promotionCode` - (Optional) Specifies the promotion code to use with the plan.

~> **NOTE:** When `plan` is specified, legal terms must be accepted for this item on this subscription before creating the Managed Application. The `azurermMarketplaceAgreement` resource or AZ CLI tool can be used to do this.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Managed Application.

* `outputs` - The name and value pairs that define the managed application outputs.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Managed Application.
* `update` - (Defaults to 30 minutes) Used when updating the Managed Application.
* `read` - (Defaults to 5 minutes) Used when retrieving the Managed Application.
* `delete` - (Defaults to 30 minutes) Used when deleting the Managed Application.

## Import

Managed Application can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_managed_application.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Solutions/applications/app1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-024cd3ede5e4bd561854fa96a76f5490f25c672df85a7f8d223d3c65a36d1470 -->