---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_subnet_service_endpoint_storage_policy"
description: |-
  Manages a Subnet Service Endpoint Storage Policy.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_subnet_service_endpoint_storage_policy

Manages a Subnet Service Endpoint Storage Policy.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-rg",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountReplicationType: "GRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacct",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermSubnetServiceEndpointStoragePolicyExample =
      new azurerm.subnetServiceEndpointStoragePolicy.SubnetServiceEndpointStoragePolicy(
        this,
        "example_2",
        {
          definition: [
            {
              description: "definition1",
              name: "name1",
              service: "Microsoft.Storage",
              serviceResources: [
                cdktf.Token.asString(azurermResourceGroupExample.id),
                cdktf.Token.asString(azurermStorageAccountExample.id),
              ],
            },
            {
              description: "definition2",
              name: "name2",
              service: "Global",
              serviceResources: [
                "/services/Azure",
                "/services/Azure/Batch",
                "/services/Azure/DataFactory",
                "/services/Azure/MachineLearning",
                "/services/Azure/ManagedInstance",
                "/services/Azure/WebPI",
              ],
            },
          ],
          location: cdktf.Token.asString(azurermResourceGroupExample.location),
          name: "example-policy",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSubnetServiceEndpointStoragePolicyExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Subnet Service Endpoint Storage Policy. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.

* `resourceGroupName` - (Required) The name of the Resource Group where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.

* `location` - (Required) The Azure Region where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.

---

* `definition` - (Optional) A `definition` block as defined below

* `tags` - (Optional) A mapping of tags which should be assigned to the Subnet Service Endpoint Storage Policy.

---

A `definition` block supports the following:

* `name` - (Required) The name which should be used for this Subnet Service Endpoint Storage Policy Definition.

* `service` - (Optional) The type of service resources. Valid values are `microsoftStorage` or `global`. When the `serviceResources` property contains resource IDs, this property must be `microsoftStorage`. When the `serviceResources` property contains Aliases, this property must be `global`. Defaults to `microsoftStorage`. 

* `serviceResources` - (Required) Specifies a list of resources or aliases that this Subnet Service Endpoint Storage Policy Definition applies to.

~> **NOTE** The `serviceResources` property must contain either Aliases or Resource IDs, but not both.

* `description` - (Optional) The description of this Subnet Service Endpoint Storage Policy Definition.

---

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Subnet Service Endpoint Storage Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Subnet Service Endpoint Storage Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the Subnet Service Endpoint Storage Policy.
* `update` - (Defaults to 30 minutes) Used when updating the Subnet Service Endpoint Storage Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the Subnet Service Endpoint Storage Policy.

## Import

Subnet Service Endpoint Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_subnet_service_endpoint_storage_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/serviceEndpointPolicies/policy1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-13b5689d8df1574088f6435b45262f96543eb0794566fb1c2386f2cc53fd2fdc -->