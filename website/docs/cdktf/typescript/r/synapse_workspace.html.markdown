---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_workspace"
description: |-
  Manages a Synapse Workspace.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_workspace

Manages a Synapse Workspace.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        isHnsEnabled: cdktf.Token.asBoolean("true"),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_3", {
        aadAdmin: [
          {
            login: "AzureAD Admin",
            objectId: "00000000-0000-0000-0000-000000000000",
            tenantId: "00000000-0000-0000-0000-000000000000",
          },
        ],
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
        tags: {
          Env: "production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
  }
}

```

## Example Usage - creating a workspace with Customer Managed Key and Azure AD Admin

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountExample =
      new azurerm.storageAccount.StorageAccount(this, "example_1", {
        accountKind: "StorageV2",
        accountReplicationType: "LRS",
        accountTier: "Standard",
        isHnsEnabled: cdktf.Token.asBoolean("true"),
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplestorageacc",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageAccountExample.overrideLogicalId("example");
    const azurermStorageDataLakeGen2FilesystemExample =
      new azurerm.storageDataLakeGen2Filesystem.StorageDataLakeGen2Filesystem(
        this,
        "example_2",
        {
          name: "example",
          storageAccountId: cdktf.Token.asString(
            azurermStorageAccountExample.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermStorageDataLakeGen2FilesystemExample.overrideLogicalId("example");
    const dataAzurermClientConfigCurrent =
      new azurerm.dataAzurermClientConfig.DataAzurermClientConfig(
        this,
        "current",
        {}
      );
    const azurermKeyVaultExample = new azurerm.keyVault.KeyVault(
      this,
      "example_4",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        purgeProtectionEnabled: true,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "standard",
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyDeployer =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(this, "deployer", {
        keyPermissions: [
          "Create",
          "Get",
          "Delete",
          "Purge",
          "GetRotationPolicy",
        ],
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        objectId: cdktf.Token.asString(dataAzurermClientConfigCurrent.objectId),
        tenantId: cdktf.Token.asString(dataAzurermClientConfigCurrent.tenantId),
      });
    const azurermKeyVaultKeyExample = new azurerm.keyVaultKey.KeyVaultKey(
      this,
      "example_6",
      {
        dependsOn: [azurermKeyVaultAccessPolicyDeployer],
        keyOpts: ["unwrapKey", "wrapKey"],
        keySize: 2048,
        keyType: "RSA",
        keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
        name: "workspaceencryptionkey",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultKeyExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceExample =
      new azurerm.synapseWorkspace.SynapseWorkspace(this, "example_7", {
        customerManagedKey: {
          keyName: "enckey",
          keyVersionlessId: cdktf.Token.asString(
            azurermKeyVaultKeyExample.versionlessId
          ),
        },
        identity: {
          type: "SystemAssigned",
        },
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        sqlAdministratorLogin: "sqladminuser",
        sqlAdministratorLoginPassword: "H@Sh1CoR3!",
        storageDataLakeGen2FilesystemId: cdktf.Token.asString(
          azurermStorageDataLakeGen2FilesystemExample.id
        ),
        tags: {
          Env: "production",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceExample.overrideLogicalId("example");
    const azurermKeyVaultAccessPolicyWorkspacePolicy =
      new azurerm.keyVaultAccessPolicy.KeyVaultAccessPolicyA(
        this,
        "workspace_policy",
        {
          keyPermissions: ["Get", "WrapKey", "UnwrapKey"],
          keyVaultId: cdktf.Token.asString(azurermKeyVaultExample.id),
          objectId: cdktf.Token.asString(
            cdktf.propertyAccess(azurermSynapseWorkspaceExample.identity, [
              "0",
              "principal_id",
            ])
          ),
          tenantId: cdktf.Token.asString(
            cdktf.propertyAccess(azurermSynapseWorkspaceExample.identity, [
              "0",
              "tenant_id",
            ])
          ),
        }
      );
    const azurermSynapseWorkspaceKeyExample =
      new azurerm.synapseWorkspaceKey.SynapseWorkspaceKey(this, "example_9", {
        active: true,
        customerManagedKeyName: "enckey",
        customerManagedKeyVersionlessId: cdktf.Token.asString(
          azurermKeyVaultKeyExample.versionlessId
        ),
        dependsOn: [azurermKeyVaultAccessPolicyWorkspacePolicy],
        synapseWorkspaceId: cdktf.Token.asString(
          azurermSynapseWorkspaceExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceKeyExample.overrideLogicalId("example");
    const azurermSynapseWorkspaceAadAdminExample =
      new azurerm.synapseWorkspaceAadAdmin.SynapseWorkspaceAadAdminA(
        this,
        "example_10",
        {
          dependsOn: [azurermSynapseWorkspaceKeyExample],
          login: "AzureAD Admin",
          objectId: "00000000-0000-0000-0000-000000000000",
          synapseWorkspaceId: cdktf.Token.asString(
            azurermSynapseWorkspaceExample.id
          ),
          tenantId: "00000000-0000-0000-0000-000000000000",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermSynapseWorkspaceAadAdminExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.

* `identity` - (Optional) An `identity` block as defined below.

* `storageDataLakeGen2FilesystemId` - (Required) Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.

* `sqlAdministratorLogin` - (Optional) Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.

* `sqlAdministratorLoginPassword` - (Optional) The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.

---

* `aadAdmin` - (Optional) An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.

* `computeSubnetId` - (Optional) Subnet ID used for computes in workspace Changing this forces a new resource to be created.

* `azureDevopsRepo` - (Optional) An `azureDevopsRepo` block as defined below.

* `dataExfiltrationProtectionEnabled` - (Optional) Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.

* `customerManagedKey` - (Optional) A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.

* `githubRepo` - (Optional) A `githubRepo` block as defined below.

* `linkingAllowedForAadTenantIds` - (Optional) Allowed AAD Tenant Ids For Linking.

* `managedResourceGroupName` - (Optional) Workspace managed resource group. Changing this forces a new resource to be created.

* `managedVirtualNetworkEnabled` - (Optional) Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.

* `publicNetworkAccessEnabled` - (Optional) Whether public network access is allowed for the Cognitive Account. Defaults to `true`.

* `purviewId` - (Optional) The ID of purview account.

* `sqlAadAdmin` - (Optional) An `sqlAadAdmin` block as defined below.

* `sqlIdentityControlEnabled` - (Optional) Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?

* `tags` - (Optional) A mapping of tags which should be assigned to the Synapse Workspace.

---

An `aadAdmin` block supports the following:

* `login` - (Required) The login name of the Azure AD Administrator of this Synapse Workspace.

* `objectId` - (Required) The object id of the Azure AD Administrator of this Synapse Workspace.

* `tenantId` - (Required) The tenant id of the Azure AD Administrator of this Synapse Workspace.

---

An `azureDevopsRepo` block supports the following:

* `accountName` - (Required) Specifies the Azure DevOps account name.

* `branchName` - (Required) Specifies the collaboration branch of the repository to get code from.

* `lastCommitId` - (Optional) The last commit ID.

* `projectName` - (Required) Specifies the name of the Azure DevOps project.

* `repositoryName` - (Required) Specifies the name of the git repository.

* `rootFolder` - (Required) Specifies the root folder within the repository. Set to `/` for the top level.

* `tenantId` - (Optional) the ID of the tenant for the Azure DevOps account.

---

A `customerManagedKey` block supports the following:

* `keyVersionlessId` - (Required) The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. `https://exampleKeyvaultVaultAzureNet/type/cmk/`).

* `keyName` - (Optional) An identifier for the key. Name needs to match the name of the key used with the `azurermSynapseWorkspaceKey` resource. Defaults to "cmk" if not specified.

---

The `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are `systemAssigned`, `userAssigned` and `SystemAssigned, UserAssigned` (to enable both).

* `identityIds` - (Optional) Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.

~> **NOTE:** This is required when `type` is set to `userAssigned` or `SystemAssigned, UserAssigned`.

---

A `githubRepo` block supports the following:

* `accountName` - (Required) Specifies the GitHub account name.

* `branchName` - (Required) Specifies the collaboration branch of the repository to get code from.

* `lastCommitId` - (Optional) The last commit ID.

* `repositoryName` - (Required) Specifies the name of the git repository.

* `rootFolder` - (Required) Specifies the root folder within the repository. Set to `/` for the top level.

* `gitUrl` - (Optional) Specifies the GitHub Enterprise host name. For example: <https://github.mydomain.com>.

-> **Note:** You must log in to the Synapse UI to complete the authentication to the GitHub repository.

---

An `sqlAadAdmin` block supports the following:

* `login` - (Required) The login name of the Azure AD Administrator of this Synapse Workspace SQL.

* `objectId` - (Required) The object id of the Azure AD Administrator of this Synapse Workspace SQL.

* `tenantId` - (Required) The tenant id of the Azure AD Administrator of this Synapse Workspace SQL.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the synapse Workspace.

* `connectivityEndpoints` - A list of Connectivity endpoints for this Synapse Workspace.

---

The `identity` block exports the following:

* `principalId` - The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.

* `tenantId` - The Tenant ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Workspace.

## Import

Synapse Workspace can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_workspace.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d08658607fdfe687305ba6bc8d959c3f4cc6cbb3f15b8234e17c734cc1ef86a3 -->