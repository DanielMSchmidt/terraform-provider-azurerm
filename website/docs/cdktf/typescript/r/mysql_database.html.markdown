---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mysql_database"
description: |-
  Manages a MySQL Database within a MySQL Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mysql_database

Manages a MySQL Database within a MySQL Server

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermMysqlServerExample = new azurerm.mysqlServer.MysqlServer(
      this,
      "example_2",
      {
        administratorLogin: "mysqladminun",
        administratorLoginPassword: "H@Sh1CoR3!",
        autoGrowEnabled: true,
        backupRetentionDays: 7,
        geoRedundantBackupEnabled: true,
        infrastructureEncryptionEnabled: true,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-mysqlserver",
        publicNetworkAccessEnabled: false,
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "GP_Gen5_2",
        sslEnforcementEnabled: true,
        sslMinimalTlsVersionEnforced: "TLS1_2",
        storageMb: 5120,
        version: "5.7",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlServerExample.overrideLogicalId("example");
    const azurermMysqlDatabaseExample = new azurerm.mysqlDatabase.MysqlDatabase(
      this,
      "example_3",
      {
        charset: "utf8",
        collation: "utf8_unicode_ci",
        name: "exampledb",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        serverName: cdktf.Token.asString(azurermMysqlServerExample.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMysqlDatabaseExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.

* `serverName` - (Required) Specifies the name of the MySQL Server. Changing this forces a new resource to be created.

* `resourceGroupName` - (Required) The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.

* `charset` - (Required) Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.

* `collation` - (Required) Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MySQL Database.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the MySQL Database.
* `update` - (Defaults to 60 minutes) Used when updating the MySQL Database.
* `read` - (Defaults to 5 minutes) Used when retrieving the MySQL Database.
* `delete` - (Defaults to 60 minutes) Used when deleting the MySQL Database.

## Import

MySQL Database's can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mysql_database.database1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforMySQL/servers/server1/databases/database1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-096c80c4371fcd4d4367d76fa375d31ba72902c18640f960d42e4b7f302f1967 -->