---
subcategory: "Monitor"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_monitor_activity_log_alert"
description: |-
  Manages an Activity Log Alert within Azure Monitor
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_monitor_activity_log_alert

Manages an Activity Log Alert within Azure Monitor.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermStorageAccountToMonitor =
      new azurerm.storageAccount.StorageAccount(this, "to_monitor", {
        accountReplicationType: "GRS",
        accountTier: "Standard",
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "examplesa",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
      });
    const azurermMonitorActionGroupMain =
      new azurerm.monitorActionGroup.MonitorActionGroup(this, "main", {
        name: "example-actiongroup",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        shortName: "p0action",
        webhookReceiver: [
          {
            name: "callmyapi",
            serviceUri: "http://example.com/alert",
          },
        ],
      });
    const azurermMonitorActivityLogAlertMain =
      new azurerm.monitorActivityLogAlert.MonitorActivityLogAlert(
        this,
        "main_3",
        {
          action: [
            {
              actionGroupId: cdktf.Token.asString(
                azurermMonitorActionGroupMain.id
              ),
              webhookProperties: {
                from: "terraform",
              },
            },
          ],
          criteria: {
            category: "Recommendation",
            operationName: "Microsoft.Storage/storageAccounts/write",
            resourceId: cdktf.Token.asString(azurermStorageAccountToMonitor.id),
          },
          description:
            "This alert will monitor a specific storage account updates.",
          name: "example-activitylogalert",
          resourceGroupName: cdktf.Token.asString(
            azurermResourceGroupExample.name
          ),
          scopes: [cdktf.Token.asString(azurermResourceGroupExample.id)],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermMonitorActivityLogAlertMain.overrideLogicalId("main");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the activity log alert. Changing this forces a new resource to be created.
* `resourceGroupName` - (Required) The name of the resource group in which to create the activity log alert instance. Changing this forces a new resource to be created.
* `scopes` - (Required) The Scope at which the Activity Log should be applied. A list of strings which could be a resource group , or a subscription, or a resource ID (such as a Storage Account).
* `criteria` - (Required) A `criteria` block as defined below.
* `action` - (Optional) One or more `action` blocks as defined below.
* `enabled` - (Optional) Should this Activity Log Alert be enabled? Defaults to `true`.
* `description` - (Optional) The description of this activity log alert.
* `tags` - (Optional) A mapping of tags to assign to the resource.

---

An `action` block supports the following:

* `actionGroupId` - (Required) The ID of the Action Group can be sourced from [the `azurermMonitorActionGroup` resource](./monitor_action_group.html).
* `webhookProperties` - (Optional) The map of custom string properties to include with the post operation. These data are appended to the webhook payload.

---

A `criteria` block supports the following:

* `category` - (Required) The category of the operation. Possible values are `administrative`, `autoscale`, `policy`, `recommendation`, `resourceHealth`, `security` and `serviceHealth`.
* `caller` - (Optional) The email address or Azure Active Directory identifier of the user who performed the operation.
* `operationName` - (Optional) The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
* `resourceProvider` - (Optional) The name of the resource provider monitored by the activity log alert.
* `resourceProviders` - (Optional) A list of names of resource providers monitored by the activity log alert.

~> **NOTE:** `resourceProvider` and `resourceProviders` are mutually exclusive.

* `resourceType` - (Optional) The resource type monitored by the activity log alert.
* `resourceTypes` - (Optional) A list of resource types monitored by the activity log alert.

~> **NOTE:** `resourceType` and `resourceTypes` are mutually exclusive.

* `resourceGroup` - (Optional) The name of resource group monitored by the activity log alert.
* `resourceGroups` - (Optional) A list of names of resource groups monitored by the activity log alert.

~> **NOTE:** `resourceGroup` and `resourceGroups` are mutually exclusive.

* `resourceId` - (Optional) The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
* `resourceIds` - (Optional) A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.

~> **NOTE:** `resourceId` and `resourceIds` are mutually exclusive.

* `level` - (Optional) The severity level of the event. Possible values are `verbose`, `informational`, `warning`, `error`, and `critical`.
* `levels` - (Optional) A list of severity level of the event. Possible values are `verbose`, `informational`, `warning`, `error`, and `critical`.

~> **NOTE:** `level` and `levels` are mutually exclusive.

* `status` - (Optional) The status of the event. For example, `started`, `failed`, or `succeeded`.
* `statuses` - (Optional) A list of status of the event. For example, `started`, `failed`, or `succeeded`.

~> **NOTE:** `status` and `statuses` are mutually exclusive.

* `subStatus` - (Optional) The sub status of the event.
* `subStatuses` - (Optional) A list of sub status of the event.

~> **NOTE:** `subStatus` and `subStatuses` are mutually exclusive.
 
* `recommendationType` - (Optional) The recommendation type of the event. It is only allowed when `category` is `recommendation`.
* `recommendationCategory` - (Optional) The recommendation category of the event. Possible values are `cost`, `reliability`, `operationalExcellence` and `performance`. It is only allowed when `category` is `recommendation`.
* `recommendationImpact` - (Optional) The recommendation impact of the event. Possible values are `high`, `medium` and `low`. It is only allowed when `category` is `recommendation`.
* `resourceHealth` - (Optional) A block to define fine grain resource health settings.
* `serviceHealth` - (Optional) A block to define fine grain service health settings.

---

A `resourceHealth` block supports the following:

* `current` - (Optional) The current resource health statuses that will log an alert. Possible values are `available`, `degraded`, `unavailable` and `unknown`.
* `previous` - (Optional) The previous resource health statuses that will log an alert. Possible values are `available`, `degraded`, `unavailable` and `unknown`.
* `reason` - (Optional) The reason that will log an alert. Possible values are `platformInitiated` (such as a problem with the resource in an affected region of an Azure incident), `userInitiated` (such as a shutdown request of a VM) and `unknown`.

---

A `serviceHealth` block supports the following:

* `events` - (Optional) Events this alert will monitor Possible values are `incident`, `maintenance`, `informational`, `actionRequired` and `security`.
* `locations` - (Optional) Locations this alert will monitor. For example, `West Europe`.
* `services` - (Optional) Services this alert will monitor. For example, `Activity Logs & Alerts`, `Action Groups`. Defaults to all Services.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the activity log alert.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Activity Log Alert.
* `update` - (Defaults to 30 minutes) Used when updating the Activity Log Alert.
* `read` - (Defaults to 5 minutes) Used when retrieving the Activity Log Alert.
* `delete` - (Defaults to 30 minutes) Used when deleting the Activity Log Alert.

## Import

Activity log alerts can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_monitor_activity_log_alert.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/activityLogAlerts/myalertname
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-4b3e4c10752a79f5f4f162de9cef74bcaa0f8157547b578914c2e52c17269dc3 -->