---
subcategory: "API Management"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_api_management_custom_domain"
description: |-
  Manages a API Management Custom Domain.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_api_management_custom_domain

Manages a API Management Custom Domain.

## Disclaimers

~> **Note:** It's possible to define Custom Domains both within [the `azurermApiManagement` resource](api_management.html) via the `hostnameConfigurations` block and by using this resource. However it's not possible to use both methods to manage Custom Domains within an API Management Service, since there will be conflicts.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.provider.AzurermProvider(this, "azurerm", {
      features: {},
    });
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const dataAzurermKeyVaultExample =
      new azurerm.dataAzurermKeyVault.DataAzurermKeyVault(this, "example_2", {
        name: "mykeyvault",
        resourceGroupName: "some-resource-group",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzurermKeyVaultExample.overrideLogicalId("example");
    const azurermApiManagementExample = new azurerm.apiManagement.ApiManagement(
      this,
      "example_3",
      {
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-apim",
        publisherEmail: "pub1@email.com",
        publisherName: "pub1",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        skuName: "Developer_1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermApiManagementExample.overrideLogicalId("example");
    const azurermKeyVaultCertificateExample =
      new azurerm.keyVaultCertificate.KeyVaultCertificate(this, "example_4", {
        certificatePolicy: {
          issuerParameters: {
            name: "Self",
          },
          keyProperties: {
            exportable: true,
            keySize: 2048,
            keyType: "RSA",
            reuseKey: true,
          },
          lifetimeAction: [
            {
              action: {
                actionType: "AutoRenew",
              },
              trigger: {
                daysBeforeExpiry: 30,
              },
            },
          ],
          secretProperties: {
            contentType: "application/x-pkcs12",
          },
          x509CertificateProperties: {
            keyUsage: [
              "cRLSign",
              "dataEncipherment",
              "digitalSignature",
              "keyAgreement",
              "keyCertSign",
              "keyEncipherment",
            ],
            subject: "CN=api.example.com",
            subjectAlternativeNames: {
              dnsNames: ["api.example.com", "portal.example.com"],
            },
            validityInMonths: 12,
          },
        },
        keyVaultId: cdktf.Token.asString(dataAzurermKeyVaultExample.id),
        name: "example-certificate",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermKeyVaultCertificateExample.overrideLogicalId("example");
    const azurermApiManagementCustomDomainExample =
      new azurerm.apiManagementCustomDomain.ApiManagementCustomDomain(
        this,
        "example_5",
        {
          apiManagementId: cdktf.Token.asString(azurermApiManagementExample.id),
          developerPortal: [
            {
              hostName: "portal.example.com",
              keyVaultId: cdktf.Token.asString(
                azurermKeyVaultCertificateExample.versionlessSecretId
              ),
            },
          ],
          gateway: [
            {
              hostName: "api.example.com",
              keyVaultId: cdktf.Token.asString(
                azurermKeyVaultCertificateExample.versionlessSecretId
              ),
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermApiManagementCustomDomainExample.overrideLogicalId("example");
  }
}

```

## Arguments Reference

The following arguments are supported:

* `apiManagementId` - (Required) The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.

---

* `developerPortal` - (Optional) One or more `developerPortal` blocks as defined below.

* `management` - (Optional) One or more `management` blocks as defined below.

* `portal` - (Optional) One or more `portal` blocks as defined below.

* `gateway` - (Optional) One or more `gateway` blocks as defined below.

* `scm` - (Optional) One or more `scm` blocks as defined below.

---

A `developerPortal`, `management`, `portal` or `scm` block supports the following:

* `hostName` - (Required) The Hostname to use for the corresponding endpoint.

* `certificate` - (Optional) The Base64 Encoded Certificate. (Mutually exclusive with `keyVaultId`.)

* `certificatePassword` - (Optional) The password associated with the certificate provided above.

* `keyVaultId` - (Optional) The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.

* `negotiateClientCertificate` - (Optional) Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.

* `sslKeyvaultIdentityClientId` - (Optional) System or User Assigned Managed identity clientId as generated by Azure AD, which has `get` access to the keyVault containing the SSL certificate.

-> **NOTE:** If a User Assigned Managed identity is specified for `sslKeyvaultIdentityClientId` then this identity must be associated to the `azurermApiManagement` within an `identity` block.

---

A `gateway` block supports the following:

-> **Tip:** The default gateway hostname ending with `azureApiNet` must not be added as it will be automatically created by Azure and ignored by Terraform.

* `hostName` - (Required) The Hostname to use for the API Proxy Endpoint.

* `certificate` - (Optional) The Base64 Encoded Certificate. (Mutually exclusive with `keyVaultId`.)

* `certificatePassword` - (Optional) The password associated with the certificate provided above.

* `defaultSslBinding` - (Optional) Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.

* `keyVaultId` - (Optional) The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.

* `negotiateClientCertificate` - (Optional) Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.

* `sslKeyvaultIdentityClientId` - (Optional) System or User Assigned Managed identity clientId as generated by Azure AD, which has `get` access to the keyVault containing the SSL certificate.

-> **NOTE:** If a User Assigned Managed identity is specified for `sslKeyvaultIdentityClientId` then this identity must be associated to the `azurermApiManagement` within an `identity` block.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the API Management Custom Domain.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the API Management Custom Domain.
* `read` - (Defaults to 5 minutes) Used when retrieving the API Management Custom Domain.
* `update` - (Defaults to 60 minutes) Used when updating the API Management Custom Domain.
* `delete` - (Defaults to 60 minutes) Used when deleting the API Management Custom Domain.

## Import

API Management Custom Domains can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_api_management_custom_domain.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/customDomains/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-04ad32cf09c61a7e73833fab6be0e96f7e0f01a7f8a1db5c3fa9b281307d330d -->