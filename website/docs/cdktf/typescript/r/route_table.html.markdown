---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_route_table"
description: |-
  Manages a Route Table

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_route_table

Manages a Route Table

~> **NOTE on Route Tables and Routes:** Terraform currently
provides both a standalone [Route resource](route.html), and allows for Routes to be defined in-line within the [Route Table resource](route_table.html).
At this time you cannot use a Route Table with in-line Routes in conjunction with any Route resources. Doing so will cause a conflict of Route configurations and will overwrite Routes.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
      this,
      "example",
      {
        location: "West Europe",
        name: "example-resources",
      }
    );
    const azurermRouteTableExample = new azurerm.routeTable.RouteTable(
      this,
      "example_1",
      {
        disableBgpRoutePropagation: false,
        location: cdktf.Token.asString(azurermResourceGroupExample.location),
        name: "example-route-table",
        resourceGroupName: cdktf.Token.asString(
          azurermResourceGroupExample.name
        ),
        route: [
          {
            addressPrefix: "10.1.0.0/16",
            name: "route1",
            nextHopType: "VnetLocal",
          },
        ],
        tags: {
          environment: "Production",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermRouteTableExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the route table. Changing this forces a new resource to be created. 

* `resourceGroupName` - (Required) The name of the resource group in which to create the route table. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `route` - (Optional) [List of objects](/docs/configuration/attr-as-blocks.html) representing routes. Each object accepts the arguments documented below.

-> **NOTE** Since `route` can be configured both inline and via the separate `azurermRoute` resource, we have to explicitly set it to empty slice (`[]`) to remove it.

* `disableBgpRoutePropagation` - (Optional) Boolean flag which controls propagation of routes learned by BGP on that route table. True means disable.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

A `route` block support:

* `name` - (Required) The name of the route.

* `addressPrefix` - (Required) The destination to which the route applies. Can be CIDR (such as `10100/16`) or [Azure Service Tag](https://docs.microsoft.com/azure/virtual-network/service-tags-overview) (such as `apiManagement`, `azureBackup` or `azureMonitor`) format.

* `nextHopType` - (Required) The type of Azure hop the packet should be sent to. Possible values are `virtualNetworkGateway`, `vnetLocal`, `internet`, `virtualAppliance` and `none`.

* `nextHopInIpAddress` - (Optional) Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `virtualAppliance`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Route Table ID.
* `subnets` - The collection of Subnets associated with this route table.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Route Table.
* `update` - (Defaults to 30 minutes) Used when updating the Route Table.
* `read` - (Defaults to 5 minutes) Used when retrieving the Route Table.
* `delete` - (Defaults to 30 minutes) Used when deleting the Route Table.

## Import

Route Tables can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_route_table.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/routeTables/mytable1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-001bbe84facff97a2575a27e267701cd90f1d839ed378510d58c6e737ae1e23b -->