---
subcategory: "Container Apps"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_container_app"
description: |-
  Get information of a Container App.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: azurerm_container_app

Use this data source to access information about an existing Container App.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new azurerm.dataAzurermContainerApp.DataAzurermContainerApp(
      this,
      "example",
      {
        name: "example-app",
        resourceGroupName: "example-resources",
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Container App.

* `resourceGroupName` - (Required) The name of the Resource Group where this Container App exists.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `containerAppEnvironmentId` - The ID of the Container App Environment this Container App is linked to.

* `revisionMode` - The revision mode of the Container App.

* `template` - A `template` block as detailed below.

---

* `dapr` - A `dapr` block as detailed below.

* `identity` - An `identity` block as detailed below.

* `ingress` - An `ingress` block as detailed below.

* `registry` - A `registry` block as detailed below.

* `secret` - One or more `secret` block as detailed below.

* `tags` - A mapping of tags to assign to the Container App.

---

A `secret` block supports the following:

* `name` - The Secret name.

* `value` - The value for this secret.

---

A `template` block supports the following:

* `container` - One or more `container` blocks as detailed below.

* `maxReplicas` - The maximum number of replicas for this container.

* `minReplicas` - The minimum number of replicas for this container.

* `revisionSuffix` - The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.

* `volume` - A `volume` block as detailed below.

---

A `volume` block supports the following:

* `name` - The name of the volume.

* `storageName` - The name of the `azureFile` storage.

* `storageType` - The type of storage volume. Possible values include `azureFile` and `emptyDir`. Defaults to `emptyDir`.

---

A `container` block supports the following:

* `args` - A list of extra arguments to pass to the container.

* `command` - A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.

* `cpu` - The amount of vCPU to allocate to the container. Possible values include `025`, `05`, `075`, `10`, `125`, `15`, `175`, and `20`.

* `env` - One or more `env` blocks as detailed below.

* `ephemeralStorage` - The amount of ephemeral storage available to the Container App.

* `image` - The image to use to create the container.

* `livenessProbe` - A `livenessProbe` block as detailed below.

* `memory` - The amount of memory to allocate to the container. Possible values include `05Gi`, `1Gi`, `15Gi`, `2Gi`, `25Gi`, `3Gi`, `35Gi`, and `4Gi`.

* `name` - The name of the container

* `readinessProbe` - A `readinessProbe` block as detailed below.

* `startupProbe` - A `startupProbe` block as detailed below.

* `volumeMounts` - A `volumeMounts` block as detailed below.

---

A `livenessProbe` block supports the following:

* `failureCountThreshold` - The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.

* `header` - A `header` block as detailed below.

* `host` - The probe hostname. Defaults to the pod IP address. Setting a value for `host` in `headers` can be used to override this for `http` and `https` type probes.

* `initialDelay` - The time in seconds to wait after the container has started before the probe is started.

* `intervalSeconds` - How often, in seconds, the probe should run. Possible values are in the range `1` - `240`. Defaults to `10`.

* `path` - The URI to use with the `host` for http type probes. Not valid for `tcp` type probes. Defaults to `/`.

* `port` - The port number on which to connect. Possible values are between `1` and `65535`.

* `terminationGracePeriodSeconds` -  The time in seconds after the container is sent the termination signal before the process if forcibly killed.

* `timeout` - Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.

* `transport` - Type of probe. Possible values are `tcp`, `http`, and `https`.

---

A `header` block supports the following:

* `name` - The HTTP Header Name.

* `value` - The HTTP Header value.

---

An `env` block supports the following:

* `name` - The name of the environment variable for the container.

* `secretName` - The name of the secret that contains the value for this environment variable.

* `value` - The value for this environment variable.

---

A `readinessProbe` block supports the following:

* `failureCountThreshold` - The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.

* `header` - A `header` block as detailed below.

* `host` - The probe hostname. Defaults to the pod IP address. Setting a value for `host` in `headers` can be used to override this for `http` and `https` type probes.

* `intervalSeconds` - How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`

* `path` - The URI to use for http type probes. Not valid for `tcp` type probes. Defaults to `/`.

* `port` - The port number on which to connect. Possible values are between `1` and `65535`.

* `successCountThreshold` - The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.

* `timeout` - Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.

* `transport` - Type of probe. Possible values are `tcp`, `http`, and `https`.

---

A `header` block supports the following:

* `name` - The HTTP Header Name.

* `value` - The HTTP Header value.

---

A `startupProbe` block supports the following:

* `failureCountThreshold` - The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.

* `header` - A `header` block as detailed below.

* `host` - The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `host` in `headers` can be used to override this for `http` and `https` type probes.

* `intervalSeconds` - How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`

* `path` - The URI to use with the `host` for http type probes. Not valid for `tcp` type probes. Defaults to `/`.

* `port` - The port number on which to connect. Possible values are between `1` and `65535`.

* `terminationGracePeriodSeconds` -  The time in seconds after the container is sent the termination signal before the process if forcibly killed.

* `timeout` - Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.

* `transport` - Type of probe. Possible values are `tcp`, `http`, and `https`.

---

A `header` block supports the following:

* `name` - The HTTP Header Name.

* `value` - The HTTP Header value.

---

A `volumeMounts` block supports the following:

* `name` - The name of the Volume to be mounted in the container.

* `path` - The path in the container at which to mount this volume.

---

An `identity` block supports the following:

* `type` - The type of managed identity to assign. Possible values are `userAssigned` and `systemAssigned`

* `identityIds` - A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when `type` is set to `userAssigned`.

---

An `ingress` block supports the following:

* `allowInsecureConnections` - Should this ingress allow insecure connections?

* `customDomain` - One or more `customDomain` block as detailed below.

* `fqdn` -  The FQDN of the ingress.

* `externalEnabled` - Is this an external Ingress.

* `targetPort` - The target port on the container for the Ingress traffic.

* `trafficWeight` - A `trafficWeight` block as detailed below.

* `transport` - The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`

---

A `customDomain` block supports the following:

* `certificateBindingType` - The Binding type. Possible values include `disabled` and `sniEnabled`. Defaults to `disabled`.

* `certificateId` - The ID of the Container App Environment Certificate.

* `name` - The hostname of the Certificate. Must be the CN or a named SAN in the certificate.

---

A `trafficWeight` block supports the following:

* `label` - The label to apply to the revision as a name prefix for routing traffic.

* `latestRevision` - This traffic Weight relates to the latest stable Container Revision.

* `revisionSuffix` - The suffix string to which this `trafficWeight` applies.

* `percentage` - The percentage of traffic which should be sent this revision.

---

A `dapr` block supports the following:

* `appId` - The Dapr Application Identifier.

* `appPort` - The port which the application is listening on. This is the same as the `ingress` port.

* `appProtocol` - The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.

---

A `registry` block supports the following:

* `server` - The hostname for the Container Registry.

* `identity` - Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.

* `passwordSecretName` - The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.

* `username` - The username to use for this Container Registry, `passwordSecretName` must also be supplied..

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `read` - (Defaults to 5 minutes) Used when retrieving the Container App.

<!-- cache-key: cdktf-0.17.0-pre.15 input-dac104c4dada4baa40535136b61f417f9ce4552bddc894a2076c551fcdcfb4ea -->