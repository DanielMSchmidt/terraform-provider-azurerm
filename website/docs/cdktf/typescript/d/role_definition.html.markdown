---
subcategory: "Authorization"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_role_definition"
description: |-
  Get information about an existing Role Definition.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: azurerm_role_definition

Use this data source to access information about an existing Role Definition.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAzurermRoleDefinitionBuiltin =
      new azurerm.dataAzurermRoleDefinition.DataAzurermRoleDefinition(
        this,
        "builtin",
        {
          name: "Contributor",
        }
      );
    const dataAzurermSubscriptionPrimary =
      new azurerm.dataAzurermSubscription.DataAzurermSubscription(
        this,
        "primary",
        {}
      );
    new cdktf.TerraformOutput(this, "contributor_role_definition_id", {
      value: dataAzurermRoleDefinitionBuiltin.id,
    });
    const azurermRoleDefinitionCustom =
      new azurerm.roleDefinition.RoleDefinition(this, "custom", {
        name: "CustomRoleDef",
        roleDefinitionId: "00000000-0000-0000-0000-000000000000",
        scope: cdktf.Token.asString(dataAzurermSubscriptionPrimary.id),
      });
    const dataAzurermRoleDefinitionCustom =
      new azurerm.dataAzurermRoleDefinition.DataAzurermRoleDefinition(
        this,
        "custom_4",
        {
          roleDefinitionId: cdktf.Token.asString(
            azurermRoleDefinitionCustom.roleDefinitionId
          ),
          scope: cdktf.Token.asString(dataAzurermSubscriptionPrimary.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAzurermRoleDefinitionCustom.overrideLogicalId("custom");
    new azurerm.dataAzurermRoleDefinition.DataAzurermRoleDefinition(
      this,
      "custom-byname",
      {
        name: cdktf.Token.asString(azurermRoleDefinitionCustom.name),
        scope: cdktf.Token.asString(dataAzurermSubscriptionPrimary.id),
      }
    );
    new cdktf.TerraformOutput(this, "custom_role_definition_id", {
      value: dataAzurermRoleDefinitionCustom.id,
    });
  }
}

```

## Argument Reference

* `name` - (Optional) Specifies the Name of either a built-in or custom Role Definition.

-> You can also use this for built-in roles such as `contributor`, `owner`, `reader` and `Virtual Machine Contributor`

* `roleDefinitionId` - (Optional) Specifies the ID of the Role Definition as a UUID/GUID.
* `scope` - (Optional) Specifies the Scope at which the Custom Role Definition exists.

~> **Note:** One of `name` or `roleDefinitionId` must be specified.

## Attributes Reference

* `id` - the ID of the built-in Role Definition.
* `description` - the Description of the built-in Role.
* `type` - the Type of the Role.
* `permissions` - a `permissions` block as documented below.
* `assignableScopes` - One or more assignable scopes for this Role Definition, such as `/subscriptions/0B1F64711Bf04DdaAec3111122223333`, `/subscriptions/0B1F64711Bf04DdaAec3111122223333/resourceGroups/myGroup`, or `/subscriptions/0B1F64711Bf04DdaAec3111122223333/resourceGroups/myGroup/providers/microsoftCompute/virtualMachines/myVm`.

A `permissions` block contains:

* `actions` - a list of actions supported by this role
* `notActions` - a list of actions which are denied by this role

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `read` - (Defaults to 5 minutes) Used when retrieving the Role Definition.

<!-- cache-key: cdktf-0.17.0-pre.15 input-e856c3b83d5c34c5d1112aa9f854a75afff60de8b595fe83118977c1ced0acba -->