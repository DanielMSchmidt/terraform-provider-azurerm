---
subcategory: "Load Balancer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_lb_nat_pool"
description: |-
  Manages a Load Balancer NAT Pool.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_lb_nat_pool

Manages a Load Balancer NAT pool.

-> **NOTE:** This resource cannot be used with with virtual machines, instead use the `azurerm_lb_nat_rule` resource.

~> **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="LoadBalancerRG"
        )
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_1",
            allocation_method="Static",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="PublicIPForLB",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm_lb_example = azurerm.lb.Lb(self, "example_2",
            frontend_ip_configuration=[LbFrontendIpConfiguration(
                name="PublicIPAddress",
                public_ip_address_id=cdktf.Token.as_string(azurerm_public_ip_example.id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="TestLoadBalancer",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lb_example.override_logical_id("example")
        azurerm_lb_nat_pool_example = azurerm.lb_nat_pool.LbNatPool(self, "example_3",
            backend_port=8080,
            frontend_ip_configuration_name="PublicIPAddress",
            frontend_port_end=81,
            frontend_port_start=80,
            loadbalancer_id=cdktf.Token.as_string(azurerm_lb_example.id),
            name="SampleApplicationPool",
            protocol="Tcp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lb_nat_pool_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the NAT pool. Changing this forces a new resource to be created.
* `resource_group_name` - (Required) The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
* `loadbalancer_id` - (Required) The ID of the Load Balancer in which to create the NAT pool. Changing this forces a new resource to be created.
* `frontend_ip_configuration_name` - (Required) The name of the frontend IP configuration exposing this rule.
* `protocol` - (Required) The transport protocol for the external endpoint. Possible values are `All`, `Tcp` and `Udp`.
* `frontend_port_start` - (Required) The first port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
* `frontend_port_end` - (Required) The last port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
* `backend_port` - (Required) The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
* `idle_timeout_in_minutes` - (Optional) Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30`. Defaults to `4`.
* `floating_ip_enabled` - (Optional) Are the floating IPs enabled for this Load Balancer Rule? A floating IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group.
* `tcp_reset_enabled` - (Optional) Is TCP Reset enabled for this Load Balancer Rule? 

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Load Balancer NAT pool.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Load Balancer NAT Pool.
* `update` - (Defaults to 30 minutes) Used when updating the Load Balancer NAT Pool.
* `read` - (Defaults to 5 minutes) Used when retrieving the Load Balancer NAT Pool.
* `delete` - (Defaults to 30 minutes) Used when deleting the Load Balancer NAT Pool.

## Import

Load Balancer NAT Pools can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_lb_nat_pool.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatPools/pool1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e4b0cb4a3df492bc6ca599a139018e1ab0d4ebd7349a8c952083863b743776dc -->