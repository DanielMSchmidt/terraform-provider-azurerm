---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_app_redis_association"
description: |-
  Associates a [Spring Cloud Application](spring_cloud_app.html) with a [Redis Cache](redis_cache.html).
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_app_redis_association

Associates a [Spring Cloud Application](spring_cloud_app.html) with a [Redis Cache](redis_cache.html).

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_spring_cloud_service_example =
        azurerm.spring_cloud_service.SpringCloudService(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-springcloud",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_service_example.override_logical_id("example")
        azurerm_redis_cache_example = azurerm.redis_cache.RedisCache(self, "example_3",
            capacity=0,
            enable_non_ssl_port=True,
            family="C",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-cache",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Basic"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_redis_cache_example.override_logical_id("example")
        azurerm_spring_cloud_app_example =
        azurerm.spring_cloud_app.SpringCloudApp(self, "example_4",
            name="example-springcloudapp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            service_name=cdktf.Token.as_string(azurerm_spring_cloud_service_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_app_example.override_logical_id("example")
        azurerm_spring_cloud_app_redis_association_example =
        azurerm.spring_cloud_app_redis_association.SpringCloudAppRedisAssociation(self, "example_5",
            name="example-bind",
            redis_access_key=cdktf.Token.as_string(azurerm_redis_cache_example.primary_access_key),
            redis_cache_id=cdktf.Token.as_string(azurerm_redis_cache_example.id),
            spring_cloud_app_id=cdktf.Token.as_string(azurerm_spring_cloud_app_example.id),
            ssl_enabled=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_app_redis_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.

* `spring_cloud_app_id` - (Required) Specifies the Spring Cloud Application resource ID in which the Association is created. Changing this forces a new resource to be created.

* `redis_cache_id` - (Required) Specifies the Redis Cache resource ID. Changing this forces a new resource to be created.

* `redis_access_key` - (Required) Specifies the Redis Cache access key.

* `ssl_enabled` - (Optional) Should SSL be used when connecting to Redis? Defaults to `true`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Application Redis Association.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Application Redis Association.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Application Redis Association.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Application Redis Association.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Application Redis Association.

## Import

Spring Cloud Application Redis Association can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_app_redis_association.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.AppPlatform/spring/myservice/apps/myapp/bindings/bind1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-eeeed759f1d9f42e2d4248b4ef022974085ed80c981f46e73c82f76dc9347404 -->