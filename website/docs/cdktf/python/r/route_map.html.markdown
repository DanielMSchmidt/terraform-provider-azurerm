---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_route_map"
description: |-
  Manages a Route Map.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_route_map

Manages a Route Map.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_wan_example = azurerm.virtual_wan.VirtualWan(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vwan",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_wan_example.override_logical_id("example")
        azurerm_virtual_hub_example = azurerm.virtual_hub.VirtualHub(self, "example_2",
            address_prefix="10.0.1.0/24",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vhub",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_wan_id=cdktf.Token.as_string(azurerm_virtual_wan_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_hub_example.override_logical_id("example")
        azurerm_route_map_example = azurerm.route_map.RouteMap(self, "example_3",
            name="example-rm",
            rule=[RouteMapRule(
                action=[RouteMapRuleAction(
                    parameter=[RouteMapRuleActionParameter(
                        as_path=["22334"]
                    )
                    ],
                    type="Add"
                )
                ],
                match_criterion=[RouteMapRuleMatchCriterion(
                    match_condition="Contains",
                    route_prefix=["10.0.0.0/8"]
                )
                ],
                name="rule1",
                next_step_if_matched="Continue"
            )
            ],
            virtual_hub_id=cdktf.Token.as_string(azurerm_virtual_hub_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_route_map_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Route Map. Changing this forces a new resource to be created.

* `virtual_hub_id` - (Required) The resource ID of the Virtual Hub. Changing this forces a new resource to be created.

* `rule` - (Optional) A `rule` block as defined below.

---

A `rule` block supports the following:

* `name` - (Required) The unique name for the rule.

* `action` - (Optional) An `action` block as defined below.

* `match_criterion` - (Optional) A `match_criterion` block as defined below.

* `next_step_if_matched` - (Optional) The next step after the rule is evaluated. Possible values are `Continue`, `Terminate` and `Unknown`. Defaults to `Unknown`.

---

An `action` block supports the following:

* `parameter` - (Required) A `parameter` block as defined below.

* `type` - (Required) The type of the action to be taken. Possible values are `Add`, `Drop`, `Remove`, `Replace` and `Unknown`.

---

A `parameter` block supports the following:

* `as_path` - (Optional) A list of AS paths.

* `community` - (Optional) A list of BGP communities.

* `route_prefix` - (Optional) A list of route prefixes.

---

A `match_criterion` block supports the following:

* `match_condition` - (Required) The match condition to apply the rule of the Route Map. Possible values are `Contains`, `Equals`, `NotContains`, `NotEquals` and `Unknown`.

* `as_path` - (Optional) A list of AS paths which this criterion matches.

* `community` - (Optional) A list of BGP communities which this criterion matches.

* `route_prefix` - (Optional) A list of route prefixes which this criterion matches.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Route Map.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Route Map.
* `read` - (Defaults to 5 minutes) Used when retrieving the Route Map.
* `update` - (Defaults to 30 minutes) Used when updating the Route Map.
* `delete` - (Defaults to 30 minutes) Used when deleting the Route Map.

## Import

Route Maps can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_route_map.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeMaps/routeMap1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2079d33b73b4c8c05bf170d75d804f94344cd3e2dfa74124ce962a1e83597b89 -->