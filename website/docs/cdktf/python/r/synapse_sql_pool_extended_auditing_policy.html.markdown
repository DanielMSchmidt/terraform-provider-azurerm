---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_sql_pool_extended_auditing_policy"
description: |-
  Manages a Synapse SQL Pool Extended Auditing Policy.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_sql_pool_extended_auditing_policy

Manages a Synapse SQL Pool Extended Auditing Policy.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_audit_logs =
        azurerm.storage_account.StorageAccount(self, "audit_logs",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplesa",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_kind="BlobStorage",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_3",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_4",
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        azurerm_synapse_sql_pool_example =
        azurerm.synapse_sql_pool.SynapseSqlPool(self, "example_5",
            create_mode="Default",
            name="examplesqlpool",
            sku_name="DW100c",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_example.override_logical_id("example")
        azurerm_synapse_sql_pool_extended_auditing_policy_example =
        azurerm.synapse_sql_pool_extended_auditing_policy.SynapseSqlPoolExtendedAuditingPolicy(self, "example_6",
            retention_in_days=6,
            sql_pool_id=cdktf.Token.as_string(azurerm_synapse_sql_pool_example.id),
            storage_account_access_key=cdktf.Token.as_string(azurerm_storage_account_audit_logs.primary_access_key),
            storage_account_access_key_is_secondary=False,
            storage_endpoint=cdktf.Token.as_string(azurerm_storage_account_audit_logs.primary_blob_endpoint)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_extended_auditing_policy_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `sql_pool_id` - (Required) The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.

* `storage_endpoint` - (Optional) The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.

* `retention_in_days` - (Optional) The number of days to retain logs for in the storage account. Defaults to `0`.

* `storage_account_access_key` - (Optional) The access key to use for the auditing storage account.

* `storage_account_access_key_is_secondary` - (Optional) Is `storage_account_access_key` value the storage's secondary key?

* `log_monitoring_enabled` - (Optional) Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse SQL Pool Extended Auditing Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse SQL Pool Extended Auditing Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse SQL Pool Extended Auditing Policy.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse SQL Pool Extended Auditing Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse SQL Pool Extended Auditing Policy.

## Import

Synapse SQL Pool Extended Auditing Policys can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_sql_pool_extended_auditing_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/extendedAuditingSettings/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f051167fcf56a327fc082306629eb168fb0a1dc51952e2dc8a4bb840be30d2d5 -->