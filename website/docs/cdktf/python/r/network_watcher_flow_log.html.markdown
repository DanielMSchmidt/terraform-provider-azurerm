---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_watcher_flow_log"
description: |-
  Manages a Network Watcher Flow Log.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_watcher_flow_log

Manages a Network Watcher Flow Log.

~> **Note** The `azurerm_network_watcher_flow_log` creates a new storage lifecyle management rule that overwrites existing rules. Please make sure to use a `storage_account` with no existing management rules, until the [issue](https://github.com/hashicorp/terraform-provider-azurerm/issues/6935) is fixed.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_test = azurerm.storage_account.StorageAccount(self, "test",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            enable_https_traffic_only=True,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctestsa",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        azurerm_log_analytics_workspace_test =
        azurerm.log_analytics_workspace.LogAnalyticsWorkspace(self, "test_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctestlaw",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="PerGB2018"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_log_analytics_workspace_test.override_logical_id("test")
        azurerm_network_security_group_test =
        azurerm.network_security_group.NetworkSecurityGroup(self, "test_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctestnsg",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_security_group_test.override_logical_id("test")
        azurerm_network_watcher_test = azurerm.network_watcher.NetworkWatcher(self, "test_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctestnw",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_watcher_test.override_logical_id("test")
        azurerm_network_watcher_flow_log_test =
        azurerm.network_watcher_flow_log.NetworkWatcherFlowLog(self, "test_5",
            enabled=True,
            name="example-log",
            network_security_group_id=cdktf.Token.as_string(azurerm_network_security_group_test.id),
            network_watcher_name=cdktf.Token.as_string(azurerm_network_watcher_test.name),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            retention_policy=NetworkWatcherFlowLogRetentionPolicy(
                days=7,
                enabled=True
            ),
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_test.id),
            traffic_analytics=NetworkWatcherFlowLogTrafficAnalytics(
                enabled=True,
                interval_in_minutes=10,
                workspace_id=cdktf.Token.as_string(azurerm_log_analytics_workspace_test.workspace_id),
                workspace_region=cdktf.Token.as_string(azurerm_log_analytics_workspace_test.location),
                workspace_resource_id=cdktf.Token.as_string(azurerm_log_analytics_workspace_test.id)
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_watcher_flow_log_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Network Watcher Flow Log. Changing this forces a new resource to be created.

* `network_watcher_name` - (Required) The name of the Network Watcher. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the resource group in which the Network Watcher was deployed. Changing this forces a new resource to be created.

* `network_security_group_id` - (Required) The ID of the Network Security Group for which to enable flow logs for. Changing this forces a new resource to be created.

* `storage_account_id` - (Required) The ID of the Storage Account where flow logs are stored.

* `enabled` - (Required) Should Network Flow Logging be Enabled?

* `retention_policy` - (Required) A `retention_policy` block as documented below.

* `location` - (Optional) The location where the Network Watcher Flow Log resides. Changing this forces a new resource to be created. Defaults to the `location` of the Network Watcher.

* `traffic_analytics` - (Optional) A `traffic_analytics` block as documented below.

* `version` - (Optional) The version (revision) of the flow log. Possible values are `1` and `2`.

* `tags` - (Optional) A mapping of tags which should be assigned to the Network Watcher Flow Log.

---

The `retention_policy` block supports the following:

* `enabled` - (Required) Boolean flag to enable/disable retention.
* `days` - (Required) The number of days to retain flow log records.

---

The `traffic_analytics` block supports the following:

* `enabled` - (Required) Boolean flag to enable/disable traffic analytics.
* `workspace_id` - (Required) The resource GUID of the attached workspace.
* `workspace_region` - (Required) The location of the attached workspace.
* `workspace_resource_id` - (Required) The resource ID of the attached workspace.
* `interval_in_minutes` - (Optional) How frequently service should do flow analytics in minutes. Defaults to `60`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Network Watcher.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Network Watcher Flow Log.
* `update` - (Defaults to 30 minutes) Used when updating the Network Watcher Flow Log.
* `read` - (Defaults to 5 minutes) Used when retrieving the Network Watcher Flow Log.
* `delete` - (Defaults to 30 minutes) Used when deleting the Network Watcher Flow Log.

## Import

Network Watcher Flow Logs can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_watcher_flow_log.watcher1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1/flowLogs/log1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f68305603bb59e05e05ac7885d0ff805f45143bbee44404990f475cbf6c1a1ca -->