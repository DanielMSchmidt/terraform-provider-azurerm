---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_managed_private_endpoint"
description: |-
  Manages a Synapse Managed Private Endpoint.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_managed_private_endpoint

Manages a Synapse Managed Private Endpoint.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            is_hns_enabled=cdktf.Token.as_boolean("true"),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_account_example_connect =
        azurerm.storage_account.StorageAccount(self, "example_connect",
            account_kind="BlobStorage",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorage2",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_3",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_4",
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            managed_virtual_network_enabled=True,
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        azurerm_synapse_firewall_rule_example =
        azurerm.synapse_firewall_rule.SynapseFirewallRule(self, "example_5",
            end_ip_address="255.255.255.255",
            name="AllowAll",
            start_ip_address="0.0.0.0",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_firewall_rule_example.override_logical_id("example")
        azurerm_synapse_managed_private_endpoint_example =
        azurerm.synapse_managed_private_endpoint.SynapseManagedPrivateEndpoint(self, "example_6",
            depends_on=[azurerm_synapse_firewall_rule_example],
            name="example-endpoint",
            subresource_name="blob",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id),
            target_resource_id=cdktf.Token.as_string(azurerm_storage_account_example_connect.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_managed_private_endpoint_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.

* `synapse_workspace_id` - (Required) The ID of the Synapse Workspace on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.

-> **NOTE:** A Synapse firewall rule including local IP is needed for managing current resource.

* `target_resource_id` - (Required) The ID of the Private Link Enabled Remote Resource which this Synapse Private Endpoint should be connected to. Changing this forces a new resource to be created.

* `subresource_name` - (Required) Specifies the sub resource name which the Synapse Private Endpoint is able to connect to. Changing this forces a new resource to be created.

-> **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Synapse Managed Private Endpoint ID.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Managed Private Endpoint.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Managed Private Endpoint.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Managed Private Endpoint.

## Import

Synapse Managed Private Endpoint can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_managed_private_endpoint.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/managedVirtualNetworks/default/managedPrivateEndpoints/endpoint1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-800466396c15f37c40f7f15fcd96c06690ff26b7d69cf915568fa56c39444e71 -->