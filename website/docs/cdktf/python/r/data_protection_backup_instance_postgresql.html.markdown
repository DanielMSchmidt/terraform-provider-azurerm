---
subcategory: "DataProtection"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_data_protection_backup_instance_postgresql"
description: |-
  Manages a Backup Instance to back up PostgreSQL.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_data_protection_backup_instance_postgresql

Manages a Backup Instance to back up PostgreSQL.

-> **Note:** Before using this resource, there are some prerequisite permissions for configure backup and restore. See more details from <https://docs.microsoft.com/azure/backup/backup-azure-database-postgresql#prerequisite-permissions-for-configure-backup-and-restore>.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_data_protection_backup_vault_example =
        azurerm.data_protection_backup_vault.DataProtectionBackupVault(self, "example_2",
            datastore_type="VaultStore",
            identity=DataProtectionBackupVaultIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            redundancy="LocallyRedundant",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_data_protection_backup_vault_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_3",
            access_policy=[KeyVaultAccessPolicy(
                key_permissions=["Create", "Get"],
                object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
                secret_permissions=["Set", "Get", "Delete", "Purge", "Recover"],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            ), KeyVaultAccessPolicy(
                key_permissions=["Create", "Get"],
                object_id=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_data_protection_backup_vault_example.identity, ["0", "principal_id"])),
                secret_permissions=["Set", "Get", "Delete", "Purge", "Recover"],
                tenant_id=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_data_protection_backup_vault_example.identity, ["0", "tenant_id"]))
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            soft_delete_retention_days=7,
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_postgresql_server_example =
        azurerm.postgresql_server.PostgresqlServer(self, "example_4",
            administrator_login="psqladmin",
            administrator_login_password="H@Sh1CoR3!",
            auto_grow_enabled=True,
            backup_retention_days=7,
            geo_redundant_backup_enabled=False,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="B_Gen5_2",
            ssl_enforcement_enabled=True,
            storage_mb=5120,
            version="9.5"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_server_example.override_logical_id("example")
        azurerm_role_assignment_example =
        azurerm.role_assignment.RoleAssignment(self, "example_5",
            principal_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_data_protection_backup_vault_example.identity, ["0", "principal_id"])),
            role_definition_name="Reader",
            scope=cdktf.Token.as_string(azurerm_postgresql_server_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example.override_logical_id("example")
        azurerm_data_protection_backup_policy_postgresql_example =
        azurerm.data_protection_backup_policy_postgresql.DataProtectionBackupPolicyPostgresql(self, "example_6",
            backup_repeating_time_intervals=["R/2021-05-23T02:30:00+00:00/P1W"],
            default_retention_duration="P4M",
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            vault_name=cdktf.Token.as_string(azurerm_data_protection_backup_vault_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_data_protection_backup_policy_postgresql_example.override_logical_id("example")
        azurerm_postgresql_database_example =
        azurerm.postgresql_database.PostgresqlDatabase(self, "example_7",
            charset="UTF8",
            collation="English_United States.1252",
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            server_name=cdktf.Token.as_string(azurerm_postgresql_server_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_database_example.override_logical_id("example")
        azurerm_postgresql_firewall_rule_example =
        azurerm.postgresql_firewall_rule.PostgresqlFirewallRule(self, "example_8",
            end_ip_address="0.0.0.0",
            name="AllowAllWindowsAzureIps",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            server_name=cdktf.Token.as_string(azurerm_postgresql_server_example.name),
            start_ip_address="0.0.0.0"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_firewall_rule_example.override_logical_id("example")
        azurerm_key_vault_secret_example =
        azurerm.key_vault_secret.KeyVaultSecret(self, "example_9",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="example",
            value="Server=${" + azurerm_postgresql_server_example.name + "}.postgres.database.azure.com;Database=${" + azurerm_postgresql_database_example.name + "};Port=5432;User Id=psqladmin@${" + azurerm_postgresql_server_example.name + "};Password=H@Sh1CoR3!;Ssl Mode=Require;"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_secret_example.override_logical_id("example")
        azurerm_data_protection_backup_instance_postgresql_example =
        azurerm.data_protection_backup_instance_postgresql.DataProtectionBackupInstancePostgresql(self, "example_10",
            backup_policy_id=cdktf.Token.as_string(azurerm_data_protection_backup_policy_postgresql_example.id),
            database_credential_key_vault_secret_id=cdktf.Token.as_string(azurerm_key_vault_secret_example.versionless_id),
            database_id=cdktf.Token.as_string(azurerm_postgresql_database_example.id),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            vault_id=cdktf.Token.as_string(azurerm_data_protection_backup_vault_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_data_protection_backup_instance_postgresql_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.

* `location` - (Required) The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.

* `vault_id` - (Required) The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.

* `database_id` - (Required) The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.

* `backup_policy_id` - (Required) The ID of the Backup Policy.

* `database_credential_key_vault_secret_id` - (Optional) The ID or versionless ID of the key vault secret which stores the connection string of the database.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Backup Instance PostgreSQL.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Backup Instance PostgreSQL.
* `read` - (Defaults to 5 minutes) Used when retrieving the Backup Instance PostgreSQL.
* `update` - (Defaults to 30 minutes) Used when updating the Backup Instance PostgreSQL.
* `delete` - (Defaults to 30 minutes) Used when deleting the Backup Instance PostgreSQL.

## Import

Backup Instance PostgreSQL can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_data_protection_backup_instance_postgresql.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9e0d65634d0e85c1b02cf3e605c741c47562f4bad5e9e40a3ea0464d9a81f7c1 -->