---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_cassandra_table"
description: |-
  Manages a Cassandra Table within a Cosmos DB Cassandra Keyspace.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_cassandra_table

Manages a Cassandra Table within a Cosmos DB Cassandra Keyspace.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="tflex-cosmosdb-account-rg"
        )
        azurerm_cosmosdb_account_example =
        azurerm.cosmosdb_account.CosmosdbAccount(self, "example_1",
            capabilities=[CosmosdbAccountCapabilities(
                name="EnableCassandra"
            )
            ],
            consistency_policy=CosmosdbAccountConsistencyPolicy(
                consistency_level="Strong"
            ),
            geo_location=[CosmosdbAccountGeoLocation(
                failover_priority=0,
                location=cdktf.Token.as_string(azurerm_resource_group_example.location)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="tfex-cosmosdb-account",
            offer_type="Standard",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_account_example.override_logical_id("example")
        azurerm_cosmosdb_cassandra_keyspace_example =
        azurerm.cosmosdb_cassandra_keyspace.CosmosdbCassandraKeyspace(self, "example_2",
            account_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.name),
            name="tfex-cosmos-cassandra-keyspace",
            resource_group_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.resource_group_name),
            throughput=400
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_cassandra_keyspace_example.override_logical_id("example")
        azurerm_cosmosdb_cassandra_table_example =
        azurerm.cosmosdb_cassandra_table.CosmosdbCassandraTable(self, "example_3",
            cassandra_keyspace_id=cdktf.Token.as_string(azurerm_cosmosdb_cassandra_keyspace_example.id),
            name="testtable",
            schema=CosmosdbCassandraTableSchema(
                column=[CosmosdbCassandraTableSchemaColumn(
                    name="test1",
                    type="ascii"
                ), CosmosdbCassandraTableSchemaColumn(
                    name="test2",
                    type="int"
                )
                ],
                partition_key=[CosmosdbCassandraTableSchemaPartitionKey(
                    name="test1"
                )
                ]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_cassandra_table_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Cosmos DB Cassandra Table. Changing this forces a new resource to be created.

* `cassandra_keyspace_id` - (Required) The ID of the Cosmos DB Cassandra Keyspace to create the table within. Changing this forces a new resource to be created.

* `schema` - (Required) A `schema` block as defined below.

* `throughput` - (Optional) The throughput of Cassandra KeySpace (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.

* `default_ttl` - (Optional) Time to live of the Cosmos DB Cassandra table. Possible values are at least `-1`. `-1` means the Cassandra table never expires.

* `analytical_storage_ttl` - (Optional) Time to live of the Analytical Storage. Possible values are between `-1` and `2147483647` except `0`. `-1` means the Analytical Storage never expires. Changing this forces a new resource to be created.

~> **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support

* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.

~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.

---

An `autoscale_settings` block supports the following:

* `max_throughput` - (Optional) The maximum throughput of the Cassandra Table (RU/s). Must be between `1,000` and `1,000,000`. Must be set in increments of `1,000`. Conflicts with `throughput`.

---

A `schema` block supports the following:

* `column` - (Required) One or more `column` blocks as defined below.
* `partition_key` - (Required) One or more `partition_key` blocks as defined below.
* `cluster_key` - (Optional) One or more `cluster_key` blocks as defined below.

---

A `column` block supports the following:

* `name` - (Required) Name of the column to be created.
* `type` - (Required) Type of the column to be created.

---

A `cluster_key` block supports the following:

* `name` - (Required) Name of the cluster key to be created.
* `order_by` - (Required) Order of the key. Currently supported values are `Asc` and `Desc`.

---

A `partition_key` block supports the following:

* `name` - (Required) Name of the column to partition by.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - the ID of the CosmosDB Cassandra Table.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the CosmosDB Cassandra KeySpace.
* `update` - (Defaults to 30 minutes) Used when updating the CosmosDB Cassandra KeySpace.
* `read` - (Defaults to 5 minutes) Used when retrieving the CosmosDB Cassandra KeySpace.
* `delete` - (Defaults to 30 minutes) Used when deleting the CosmosDB Cassandra Table.

## Import

Cosmos Cassandra Table can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_cassandra_table.ks1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/cassandraKeyspaces/ks1/tables/table1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0638a05d6f5cdcbd052f2d5d3034ecc00ddfd81d327e7140c55acab55c6db0f2 -->