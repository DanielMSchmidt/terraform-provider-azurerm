---
subcategory: "Logic App"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_logic_app_action_custom"
description: |-
  Manages a Custom Action within a Logic App Workflow
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_logic_app_action_custom

Manages a Custom Action within a Logic App Workflow

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="workflow-resources"
        )
        azurerm_logic_app_workflow_example =
        azurerm.logic_app_workflow.LogicAppWorkflow(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workflow1",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_logic_app_workflow_example.override_logical_id("example")
        azurerm_logic_app_action_custom_example =
        azurerm.logic_app_action_custom.LogicAppActionCustom(self, "example_2",
            body="{\n    \"description\": \"A variable to configure the auto expiration age in days. Configured in negative number. Default is -30 (30 days old).\",\n    \"inputs\": {\n        \"variables\": [\n            {\n                \"name\": \"ExpirationAgeInDays\",\n                \"type\": \"Integer\",\n                \"value\": -30\n            }\n        ]\n    },\n    \"runAfter\": {},\n    \"type\": \"InitializeVariable\"\n}\n",
            logic_app_id=cdktf.Token.as_string(azurerm_logic_app_workflow_example.id),
            name="example-action"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_logic_app_action_custom_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the HTTP Action to be created within the Logic App Workflow. Changing this forces a new resource to be created.

-> **NOTE:** This name must be unique across all Actions within the Logic App Workflow.

* `logic_app_id` - (Required) Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.

* `body` - (Required) Specifies the JSON Blob defining the Body of this Custom Action.

-> **NOTE:** To make the Action more readable, you may wish to consider using HEREDOC syntax (as shown above) or [the `local_file` resource](https://www.terraform.io/docs/providers/local/d/file.html) to load the schema from a file on disk.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Action within the Logic App Workflow.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Logic App Custom Action.
* `update` - (Defaults to 30 minutes) Used when updating the Logic App Custom Action.
* `read` - (Defaults to 5 minutes) Used when retrieving the Logic App Custom Action.
* `delete` - (Defaults to 30 minutes) Used when deleting the Logic App Custom Action.

## Import

Logic App Custom Actions can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_logic_app_action_custom.custom1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/actions/custom1
```

-> **NOTE:** This ID is unique to Terraform and doesn't directly match to any other resource. To compose this ID, you can take the ID Logic App Workflow and append `/actions/{name of the action}`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-209bab41087a98d874b8a220e00e6d2c3c106cb658c64a0c605d9ee49c33c473 -->