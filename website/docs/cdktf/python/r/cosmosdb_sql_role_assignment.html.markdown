---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_sql_role_assignment"
description: |-
  Manages a Cosmos DB SQL Role Assignment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_sql_role_assignment

Manages a Cosmos DB SQL Role Assignment.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_cosmosdb_account_example =
        azurerm.cosmosdb_account.CosmosdbAccount(self, "example_2",
            consistency_policy=CosmosdbAccountConsistencyPolicy(
                consistency_level="Strong"
            ),
            geo_location=[CosmosdbAccountGeoLocation(
                failover_priority=0,
                location=cdktf.Token.as_string(azurerm_resource_group_example.location)
            )
            ],
            kind="GlobalDocumentDB",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-cosmosdb",
            offer_type="Standard",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_account_example.override_logical_id("example")
        azurerm_cosmosdb_sql_role_definition_example =
        azurerm.cosmosdb_sql_role_definition.CosmosdbSqlRoleDefinition(self, "example_3",
            account_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.name),
            assignable_scopes=[
                cdktf.Token.as_string(azurerm_cosmosdb_account_example.id)
            ],
            name="examplesqlroledef",
            permissions=[CosmosdbSqlRoleDefinitionPermissions(
                data_actions=["Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read"
                ]
            )
            ],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            type="CustomRole"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_role_definition_example.override_logical_id("example")
        azurerm_cosmosdb_sql_role_assignment_example =
        azurerm.cosmosdb_sql_role_assignment.CosmosdbSqlRoleAssignment(self, "example_4",
            account_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.name),
            name="736180af-7fbc-4c7f-9004-22735173c1c3",
            principal_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            role_definition_id=cdktf.Token.as_string(azurerm_cosmosdb_sql_role_definition_example.id),
            scope=cdktf.Token.as_string(azurerm_cosmosdb_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_role_assignment_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `resource_group_name` - (Required) The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.

* `account_name` - (Required) The name of the Cosmos DB Account. Changing this forces a new resource to be created.

* `principal_id` - (Required) The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.

* `role_definition_id` - (Required) The resource ID of the Cosmos DB SQL Role Definition.

* `scope` - (Required) The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.

* `name` - (Optional) The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cosmos DB SQL Role Assignment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Cosmos DB SQL Role Assignment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Cosmos DB SQL Role Assignment.
* `update` - (Defaults to 30 minutes) Used when updating the Cosmos DB SQL Role Assignment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Cosmos DB SQL Role Assignment.

## Import

Cosmos DB SQL Role Assignments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_sql_role_assignment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlRoleAssignments/9e007587-dbcd-4190-84cb-fcab5a09ca39
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0a9e42c5ac199be07aca2082e253b02afcfedfc8eb024731949baecf93bba340 -->