---
subcategory: "Log Analytics"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_log_analytics_cluster_customer_managed_key"
description: |-
  Manages a Log Analytics Cluster Customer Managed Key.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_log_analytics_cluster_customer_managed_key

Manages a Log Analytics Cluster Customer Managed Key.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_log_analytics_cluster_example =
        azurerm.log_analytics_cluster.LogAnalyticsCluster(self, "example_3",
            identity=LogAnalyticsClusterIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-cluster",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_log_analytics_cluster_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_4",
            access_policy=[KeyVaultAccessPolicy(
                key_permissions=["Create", "Get", "GetRotationPolicy"],
                object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
                secret_permissions=["Set"],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            ), KeyVaultAccessPolicy(
                key_permissions=["Get", "Unwrapkey", "Wrapkey"],
                object_id=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_log_analytics_cluster_example.identity, ["0", "principal_id"
                    ])),
                tenant_id=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_log_analytics_cluster_example.identity, ["0", "tenant_id"
                    ]))
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="keyvaultkeyexample",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            tags={
                "environment": "Production"
            },
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_5",
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="generated-certificate"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_log_analytics_cluster_customer_managed_key_example =
        azurerm.log_analytics_cluster_customer_managed_key.LogAnalyticsClusterCustomerManagedKey(self, "example_6",
            key_vault_key_id=cdktf.Token.as_string(azurerm_key_vault_key_example.id),
            log_analytics_cluster_id=cdktf.Token.as_string(azurerm_log_analytics_cluster_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_log_analytics_cluster_customer_managed_key_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `key_vault_key_id` - (Required) The ID of the Key Vault Key to use for encryption.

* `log_analytics_cluster_id` - (Required) The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Log Analytics Cluster Customer Managed Key.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 6 hours) Used when creating the Log Analytics Cluster Customer Managed Key.
* `read` - (Defaults to 5 minutes) Used when retrieving the Log Analytics Cluster Customer Managed Key.
* `update` - (Defaults to 6 hours) Used when updating the Log Analytics Cluster Customer Managed Key.
* `delete` - (Defaults to 30 minutes) Used when deleting the Log Analytics Cluster Customer Managed Key.

## Import

Log Analytics Cluster Customer Managed Keys can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_log_analytics_cluster_customer_managed_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/clusters/cluster1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-43750c0c0f3a5ace8a7c5abb559f9499cb76d7e9826b2d1471fd3be71565065f -->