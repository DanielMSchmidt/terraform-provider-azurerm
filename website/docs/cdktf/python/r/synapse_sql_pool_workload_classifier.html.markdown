---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_sql_pool_workload_classifier"
description: |-
  Manages a Synapse SQL Pool Workload Classifier.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_sql_pool_workload_classifier

Manages a Synapse SQL Pool Workload Classifier.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_kind="BlobStorage",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_3",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_4",
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        azurerm_synapse_sql_pool_example =
        azurerm.synapse_sql_pool.SynapseSqlPool(self, "example_5",
            create_mode="Default",
            name="example",
            sku_name="DW100c",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_example.override_logical_id("example")
        azurerm_synapse_sql_pool_workload_group_example =
        azurerm.synapse_sql_pool_workload_group.SynapseSqlPoolWorkloadGroup(self, "example_6",
            importance="normal",
            max_resource_percent=100,
            max_resource_percent_per_request=3,
            min_resource_percent=0,
            min_resource_percent_per_request=3,
            name="example",
            query_execution_timeout_in_seconds=0,
            sql_pool_id=cdktf.Token.as_string(azurerm_synapse_sql_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_workload_group_example.override_logical_id("example")
        azurerm_synapse_sql_pool_workload_classifier_example =
        azurerm.synapse_sql_pool_workload_classifier.SynapseSqlPoolWorkloadClassifier(self, "example_7",
            context="example_context",
            end_time="14:00",
            importance="high",
            label="example_label",
            member_name="dbo",
            name="example",
            start_time="12:00",
            workload_group_id=cdktf.Token.as_string(azurerm_synapse_sql_pool_workload_group_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_workload_classifier_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.

* `workload_group_id` - (Required) The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.

* `member_name` - (Required) The workload classifier member name used to classified against.

---

* `context` - (Optional) Specifies the session context value that a request can be classified against.

* `end_time` - (Optional) The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.

* `importance` - (Optional) The workload classifier importance. The allowed values are `low`, `below_normal`, `normal`, `above_normal` and `high`.

* `label` - (Optional) Specifies the label value that a request can be classified against.

* `start_time` - (Optional) The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse SQL Pool Workload Classifier.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse SQL Pool Workload Classifier.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse SQL Pool Workload Classifier.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse SQL Pool Workload Classifier.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse SQL Pool Workload Classifier.

## Import

Synapse SQL Pool Workload Classifiers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_sql_pool_workload_classifier.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/workloadGroups/workloadGroup1/workloadClassifiers/workloadClassifier1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5738d18c1f83f7df83e70a296e02e5b62d70a15a400ffe83c0143bac1b4ecd39 -->