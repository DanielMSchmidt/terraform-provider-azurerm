---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_sql_failover_group"
description: |-
  Manages a SQL Failover Group.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_sql_failover_group

Create a failover group of databases on a collection of Azure SQL servers.

-> **Note:** The `azurerm_sql_failover_group` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the [`azurerm_mssql_failover_group`](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_failover_group) resource instead.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_sql_server_primary = azurerm.sql_server.SqlServer(self, "primary",
            administrator_login="sqladmin",
            administrator_login_password="pa$w0rd",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="sql-primary",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            version="12.0"
        )
        azurerm_sql_server_secondary = azurerm.sql_server.SqlServer(self, "secondary",
            administrator_login="sqladmin",
            administrator_login_password="pa$w0rd",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="sql-secondary",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            version="12.0"
        )
        azurerm_sql_database_db1 = azurerm.sql_database.SqlDatabase(self, "db1",
            location=cdktf.Token.as_string(azurerm_sql_server_primary.location),
            name="db1",
            resource_group_name=cdktf.Token.as_string(azurerm_sql_server_primary.resource_group_name),
            server_name=cdktf.Token.as_string(azurerm_sql_server_primary.name)
        )
        azurerm_sql_failover_group_example =
        azurerm.sql_failover_group.SqlFailoverGroup(self, "example_4",
            databases=[cdktf.Token.as_string(azurerm_sql_database_db1.id)],
            name="example-failover-group",
            partner_servers=[SqlFailoverGroupPartnerServers(
                id=cdktf.Token.as_string(azurerm_sql_server_secondary.id)
            )
            ],
            read_write_endpoint_failover_policy=SqlFailoverGroupReadWriteEndpointFailoverPolicy(
                grace_minutes=60,
                mode="Automatic"
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_sql_server_primary.resource_group_name),
            server_name=cdktf.Token.as_string(azurerm_sql_server_primary.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_sql_failover_group_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `n`name` (Required) The name of the failover group. Changing this forces a new resource to be created.

* `r`resource_group_name` (Required) The name of the resource group containing the SQL server Changing this forces a new resource to be created.

* `s`server_name` (Required) The name of the primary SQL server. Changing this forces a new resource to be created. 

* `d`databases` (Optional) A list of database ids to add to the failover group

-> **NOTE:** The failover group will create a secondary database for each database listed in `d`databases`If the secondary databases need to be managed through Terraform, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first. Please refer to the detailed example which can be found in [the `.`./examples/sql-azure/failover_group`irectory within the GitHub Repository](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/sql-azure/failover_group)

* `p`partner_servers` (Required) A list of secondary servers as documented below

* `r`read_write_endpoint_failover_policy` (Required) A read/write policy as documented below

* `r`readonly_endpoint_failover_policy` (Optional) a read-only policy as documented below

* `t`tags` (Optional) A mapping of tags to assign to the resource.

---

The `p`partner_servers`lock supports the following:

* `i`id` (Required) the SQL server ID

---

The `r`read_write_endpoint_failover_policy`lock supports the following:

* `m`mode` (Required) the failover mode. Possible values are `M`Manual``A`Automatic`* `g`grace_minutes` (Optional) Applies only if `m`mode`s `A`Automatic`The grace period in minutes before failover with data loss is attempted

---

The `r`readonly_endpoint_failover_policy`lock supports the following:

* `m`mode` (Required) Failover policy for the read-only endpoint. Possible values are `E`Enabled`and `D`Disabled`## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `i`id` The failover group ID.
* `l`location` the location of the failover group.
* `s`server_name` (Required) the name of the primary SQL Database Server. Changing this forces a new resource to be created.
* `r`role` local replication role of the failover group instance.
* `d`databases` (Optional) list of databases in the failover group.
* `p`partner_servers` (Required) list of partner server information for the failover group.

## Timeouts

The `t`timeouts`lock allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `c`create` (Defaults to 30 minutes) Used when creating the SQL Failover Group.
* `u`update` (Defaults to 30 minutes) Used when updating the SQL Failover Group.
* `r`read` (Defaults to 5 minutes) Used when retrieving the SQL Failover Group.
* `d`delete` (Defaults to 30 minutes) Used when deleting the SQL Failover Group.

## Import

SQL Failover Groups can be imported using the `r`resource id`e.g.

```shell
terraform import azurerm_sql_failover_group.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/failoverGroups/group1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d4c61a834a8f5b49c3cc5c20e75fb8a833459106301838e21a1ef8eeee5b723a -->