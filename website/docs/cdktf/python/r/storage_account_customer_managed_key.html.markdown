---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_account_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a Storage Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_account_customer_managed_key

Manages a Customer Managed Key for a Storage Account.

~> **NOTE:** It's possible to define a Customer Managed Key both within [the `azurerm_storage_account` resource](storage_account.html) via the `customer_managed_key` block and by using [the `azurerm_storage_account_customer_managed_key` resource](storage_account_customer_managed_key.html). However it's not possible to use both methods to manage a Customer Managed Key for a Storage Account, since there'll be conflicts.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_replication_type="GRS",
            account_tier="Standard",
            identity=StorageAccountIdentity(
                type="SystemAssigned"
            ),
            lifecycle=cdktf.TerraformResourceLifecycle(
                ignore_changes=[customer_managed_key]
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestor",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplekv",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_client =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "client",
            key_permissions=["Get", "Create", "Delete", "List", "Restore", "Recover", "UnwrapKey", "WrapKey", "Purge", "Encrypt", "Decrypt", "Sign", "Verify", "GetRotationPolicy", "SetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            secret_permissions=["Get"],
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_access_policy_storage =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "storage",
            key_permissions=["Get", "UnwrapKey", "WrapKey"],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_storage_account_example.identity, ["0", "principal_id"
                ])),
            secret_permissions=["Get"],
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_6",
            depends_on=[azurerm_key_vault_access_policy_client, azurerm_key_vault_access_policy_storage
            ],
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="tfex-key"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_storage_account_customer_managed_key_example =
        azurerm.storage_account_customer_managed_key.StorageAccountCustomerManagedKeyA(self, "example_7",
            key_name=cdktf.Token.as_string(azurerm_key_vault_key_example.name),
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_customer_managed_key_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `storage_account_id` - (Required) The ID of the Storage Account. Changing this forces a new resource to be created.

* `key_vault_id` - (Required) The ID of the Key Vault. 

* `key_name` - (Required) The name of Key Vault Key.

* `key_version` - (Optional) The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.

* `user_assigned_identity_id` - (Optional) The ID of a user assigned identity.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Account.

---

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Account Customer Managed Keys.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Account Customer Managed Keys.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Account Customer Managed Keys.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Account Customer Managed Keys.

## Import

Customer Managed Keys for a Storage Account can be imported using the `resource id` of the Storage Account, e.g.

```shell
terraform import azurerm_storage_account_customer_managed_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5c72c26d7c43442c77cfe59a05809f14f49f24f95a31426d379d2bb0f7628386 -->