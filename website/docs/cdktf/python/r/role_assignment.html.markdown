---
subcategory: "Authorization"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_role_assignment"
description: |-
  Assigns a given Principal (User or Group) to a given Role.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_role_assignment

Assigns a given Principal (User or Group) to a given Role.

## Example Usage (using a built-in Role)

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_client_config_example =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "example")
        data_azurerm_subscription_primary =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "primary")
        azurerm_role_assignment_example =
        azurerm.role_assignment.RoleAssignment(self, "example_2",
            principal_id=cdktf.Token.as_string(data_azurerm_client_config_example.object_id),
            role_definition_name="Reader",
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example.override_logical_id("example")
```

## Example Usage (Custom Role & Service Principal)

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_client_config_example =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "example")
        data_azurerm_subscription_primary =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "primary")
        azurerm_role_definition_example =
        azurerm.role_definition.RoleDefinition(self, "example_2",
            assignable_scopes=[
                cdktf.Token.as_string(data_azurerm_subscription_primary.id)
            ],
            name="my-custom-role-definition",
            permissions=[RoleDefinitionPermissions(
                actions=["Microsoft.Resources/subscriptions/resourceGroups/read"],
                not_actions=[]
            )
            ],
            role_definition_id="00000000-0000-0000-0000-000000000000",
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_definition_example.override_logical_id("example")
        azurerm_role_assignment_example =
        azurerm.role_assignment.RoleAssignment(self, "example_3",
            name="00000000-0000-0000-0000-000000000000",
            principal_id=cdktf.Token.as_string(data_azurerm_client_config_example.object_id),
            role_definition_id=cdktf.Token.as_string(azurerm_role_definition_example.role_definition_resource_id),
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example.override_logical_id("example")
```

## Example Usage (Custom Role & User)

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_client_config_example =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "example")
        data_azurerm_subscription_primary =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "primary")
        azurerm_role_definition_example =
        azurerm.role_definition.RoleDefinition(self, "example_2",
            assignable_scopes=[
                cdktf.Token.as_string(data_azurerm_subscription_primary.id)
            ],
            name="my-custom-role-definition",
            permissions=[RoleDefinitionPermissions(
                actions=["Microsoft.Resources/subscriptions/resourceGroups/read"],
                not_actions=[]
            )
            ],
            role_definition_id="00000000-0000-0000-0000-000000000000",
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_definition_example.override_logical_id("example")
        azurerm_role_assignment_example =
        azurerm.role_assignment.RoleAssignment(self, "example_3",
            name="00000000-0000-0000-0000-000000000000",
            principal_id=cdktf.Token.as_string(data_azurerm_client_config_example.object_id),
            role_definition_id=cdktf.Token.as_string(azurerm_role_definition_example.role_definition_resource_id),
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example.override_logical_id("example")
```

## Example Usage (Custom Role & Management Group)

```hcl
data "azurerm_subscription" "primary" {
}

data "azurerm_client_config" "example" {
}

data "azurerm_management_group" "example" {
  name = "00000000-0000-0000-0000-000000000000"
}

resource "azurerm_role_definition" "example" {
  role_definition_id = "00000000-0000-0000-0000-000000000000"
  name               = "my-custom-role-definition"
  scope              = data.azurerm_subscription.primary.id

  permissions {
    actions     = ["Microsoft.Resources/subscriptions/resourceGroups/read"]
    not_actions = []
  }

  assignable_scopes = [
    data.azurerm_subscription.primary.id,
  ]
}

resource "azurerm_role_assignment" "example" {
  name               = "00000000-0000-0000-0000-000000000000"
  scope              = data.azurerm_management_group.primary.id
  role_definition_id = azurerm_role_definition.example.role_definition_resource_id
  principal_id       = data.azurerm_client_config.example.object_id
}
```

## Argument Reference

The following arguments are supported:

* `name` - (Optional) A unique UUID/GUID for this Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.

* `scope` - (Required) The scope at which the Role Assignment applies to, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`, or `/providers/Microsoft.Management/managementGroups/myMG`. Changing this forces a new resource to be created.

* `role_definition_id` - (Optional) The Scoped-ID of the Role Definition. Changing this forces a new resource to be created. Conflicts with `role_definition_name`.

* `role_definition_name` - (Optional) The name of a built-in Role. Changing this forces a new resource to be created. Conflicts with `role_definition_id`.

* `principal_id` - (Required) The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to. Changing this forces a new resource to be created.

~> **NOTE:** The Principal ID is also known as the Object ID (ie not the "Application ID" for applications).

* `condition` - (Optional) The condition that limits the resources that the role can be assigned to. Changing this forces a new resource to be created.

* `condition_version` - (Optional) The version of the condition. Possible values are `1.0` or `2.0`. Changing this forces a new resource to be created.

* `delegated_managed_identity_resource_id` - (Optional) The delegated Azure Resource Id which contains a Managed Identity. Changing this forces a new resource to be created.

~> **NOTE:** this field is only used in cross tenant scenario.

* `description` - (Optional) The description for this Role Assignment. Changing this forces a new resource to be created.
  
* `skip_service_principal_aad_check` - (Optional) If the `principal_id` is a newly provisioned `Service Principal` set this value to `true` to skip the `Azure Active Directory` check which may fail due to replication lag. This argument is only valid if the `principal_id` is a `Service Principal` identity. Defaults to `false`.

~> **NOTE:** If it is not a `Service Principal` identity it will cause the role assignment to fail.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Role Assignment ID.

* `principal_type` - The type of the `principal_id`, e.g. User, Group, Service Principal, Application, etc.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Role Assignment.
* `update` - (Defaults to 30 minutes) Used when updating the Role Assignment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Role Assignment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Role Assignment.

## Import

Role Assignments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_role_assignment.example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000
```

~> **NOTE:** The format of `resource id` could be different for different kinds of `scope`:

* for scope `Subscription`, the id format is `/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000`
* for scope `Resource Group`, the id format is `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000`

~> **NOTE:** for cross tenant scenario, the format of `resource id` is composed of Azure resource ID and tenantId. for example:

```text
/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleAssignments/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-054e0285d0fff1d038ea0c735a6f4c5b34cd05058182d423941b6cb8c25636c1 -->