---
subcategory: "Messaging"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_eventhub_namespace_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a EventHub Namespace.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_eventhub_namespace_customer_managed_key

Manages a Customer Managed Key for a EventHub Namespace.

!> **Note:** In 2.x versions of the Azure Provider during deletion this resource will **delete and recreate the parent EventHub Namespace which may involve data loss** as it's not possible to remove the Customer Managed Key from the EventHub Namespace once it's been added. Version 3.0 of the Azure Provider will change this so that the Delete operation is a noop, requiring the parent EventHub Namespace is deleted/recreated to remove the Customer Managed Key.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_eventhub_cluster_example =
        azurerm.eventhub_cluster.EventhubCluster(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-cluster",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Dedicated_1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_eventhub_cluster_example.override_logical_id("example")
        azurerm_eventhub_namespace_example =
        azurerm.eventhub_namespace.EventhubNamespace(self, "example_3",
            dedicated_cluster_id=cdktf.Token.as_string(azurerm_eventhub_cluster_example.id),
            identity=EventhubNamespaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-namespace",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="Standard"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_eventhub_namespace_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplekv",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_example =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example_5",
            key_permissions=["Get", "UnwrapKey", "WrapKey"],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_eventhub_namespace_example.identity, ["0", "principal_id"
                ])),
            tenant_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_eventhub_namespace_example.identity, ["0", "tenant_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_access_policy_example.override_logical_id("example")
        azurerm_key_vault_access_policy_example2 =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example2",
            key_permissions=["Create", "Delete", "Get", "List", "Purge", "Recover", "GetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_7",
            depends_on=[azurerm_key_vault_access_policy_example, azurerm_key_vault_access_policy_example2
            ],
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="examplekvkey"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_eventhub_namespace_customer_managed_key_example =
        azurerm.eventhub_namespace_customer_managed_key.EventhubNamespaceCustomerManagedKey(self, "example_8",
            eventhub_namespace_id=cdktf.Token.as_string(azurerm_eventhub_namespace_example.id),
            key_vault_key_ids=[cdktf.Token.as_string(azurerm_key_vault_key_example.id)]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_eventhub_namespace_customer_managed_key_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `eventhub_namespace_id` - (Required) The ID of the EventHub Namespace. Changing this forces a new resource to be created.

* `key_vault_key_ids` - (Required) The list of keys of Key Vault.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the EventHub Namespace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the EventHub Namespace Customer Managed Key.
* `read` - (Defaults to 5 minutes) Used when retrieving the EventHub Namespace Customer Managed Key.
* `update` - (Defaults to 30 minutes) Used when updating the EventHub Namespace Customer Managed Key.
* `delete` - (Defaults to 30 minutes) Used when deleting the EventHub Namespace Customer Managed Key.

## Import

Customer Managed Keys for a EventHub Namespace can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_eventhub_namespace_customer_managed_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d0a31b4152208b5a7301f3fa4e904c5d332be17fd8343f31c0a449abcc9ea932 -->