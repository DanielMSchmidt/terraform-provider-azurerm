---
subcategory: "Log Analytics"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_log_analytics_solution"
description: |-
  Manages a Log Analytics (formally Operational Insights) Solution.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_log_analytics_solution

Manages a Log Analytics (formally Operational Insights) Solution.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.random as random
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: random.
        #     For a more precise conversion please use the --provider flag in convert.
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="k8s-log-analytics-test"
        )
        random_id_workspace = random.id.Id(self, "workspace",
            byte_length=8,
            keepers=[{
                "group_name": azurerm_resource_group_example.name
            }
            ]
        )
        azurerm_log_analytics_workspace_example =
        azurerm.log_analytics_workspace.LogAnalyticsWorkspace(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="k8s-workspace-${" + random_id_workspace.hex + "}",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="PerGB2018"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_log_analytics_workspace_example.override_logical_id("example")
        azurerm_log_analytics_solution_example =
        azurerm.log_analytics_solution.LogAnalyticsSolution(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            plan=LogAnalyticsSolutionPlan(
                product="OMSGallery/ContainerInsights",
                publisher="Microsoft"
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            solution_name="ContainerInsights",
            workspace_name=cdktf.Token.as_string(azurerm_log_analytics_workspace_example.name),
            workspace_resource_id=cdktf.Token.as_string(azurerm_log_analytics_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_log_analytics_solution_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `solution_name` - (Required) Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `workspace_resource_id` - (Required) The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.

* `workspace_name` - (Required) The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.

* `plan` - (Required) A `plan` block as documented below.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

A `plan` block includes:

* `publisher` - (Required) The publisher of the solution. For example `Microsoft`. Changing this forces a new resource to be created.

* `product` - (Required) The product name of the solution. For example `OMSGallery/Containers`. Changing this forces a new resource to be created.

* `promotion_code` - (Optional) A promotion code to be used with the solution. Changing this forces a new resource to be created.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Log Analytics Solution.
* `update` - (Defaults to 30 minutes) Used when updating the Log Analytics Solution.
* `read` - (Defaults to 5 minutes) Used when retrieving the Log Analytics Solution.
* `delete` - (Defaults to 30 minutes) Used when deleting the Log Analytics Solution.

## Import

Log Analytics Solutions can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_log_analytics_solution.solution1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.OperationsManagement/solutions/solution1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9771ff423f480c008b12c77a3d0e71cc57357739981068e8524313e95d1d8044 -->