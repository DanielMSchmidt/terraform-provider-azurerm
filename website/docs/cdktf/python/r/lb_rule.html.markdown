---
subcategory: "Load Balancer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_lb_rule"
description: |-
  Manages a Load Balancer Rule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_lb_rule

Manages a Load Balancer Rule.

~> **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="LoadBalancerRG"
        )
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_1",
            allocation_method="Static",
            location="West US",
            name="PublicIPForLB",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm_lb_example = azurerm.lb.Lb(self, "example_2",
            frontend_ip_configuration=[LbFrontendIpConfiguration(
                name="PublicIPAddress",
                public_ip_address_id=cdktf.Token.as_string(azurerm_public_ip_example.id)
            )
            ],
            location="West US",
            name="TestLoadBalancer",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lb_example.override_logical_id("example")
        azurerm_lb_rule_example = azurerm.lb_rule.LbRule(self, "example_3",
            backend_port=3389,
            frontend_ip_configuration_name="PublicIPAddress",
            frontend_port=3389,
            loadbalancer_id=cdktf.Token.as_string(azurerm_lb_example.id),
            name="LBRule",
            protocol="Tcp"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lb_rule_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the LB Rule. Changing this forces a new resource to be created.
* `loadbalancer_id` - (Required) The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
* `frontend_ip_configuration_name` - (Required) The name of the frontend IP configuration to which the rule is associated.
* `protocol` - (Required) The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
* `frontend_port` - (Required) The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
* `backend_port` - (Required) The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
* `backend_address_pool_ids` - (Optional) A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.

~> **NOTE:** In most cases users can only set one Backend Address Pool ID in the `backend_address_pool_ids`. Especially, when the sku of the LB is `Gateway`, users can set up to two IDs in the `backend_address_pool_ids`.

* `probe_id` - (Optional) A reference to a Probe used by this Load Balancing Rule.
* `enable_floating_ip` - (Optional) Are the Floating IPs enabled for this Load Balncer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
* `idle_timeout_in_minutes` - (Optional) Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
* `load_distribution` - (Optional) Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where the options are called `None`, `Client IP` and `Client IP and Protocol` respectively.
* `disable_outbound_snat` - (Optional) Is snat enabled for this Load Balancer Rule? Default `false`.
* `enable_tcp_reset` - (Optional) Is TCP Reset enabled for this Load Balancer Rule? 

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Load Balancer Rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Load Balancer Rule.
* `update` - (Defaults to 30 minutes) Used when updating the Load Balancer Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the Load Balancer Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the Load Balancer Rule.

## Import

Load Balancer Rules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_lb_rule.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/loadBalancingRules/rule1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2b473fd5dddc7869cb16cc735f5b9a00f5fabb27544e2bf2387b01d4e9c910c4 -->