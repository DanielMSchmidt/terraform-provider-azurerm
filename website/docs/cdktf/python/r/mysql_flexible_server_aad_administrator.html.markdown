---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mysql_flexible_server_active_directory_administrator"
description: |-
  Manages an Active Directory administrator on a MySQL Flexible Server
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mysql_flexible_server_active_directory_administrator

Manages an Active Directory administrator on a MySQL Flexible Server

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_user_assigned_identity_example =
        azurerm.user_assigned_identity.UserAssignedIdentity(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="exampleUAI",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_user_assigned_identity_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_mysql_flexible_server_example =
        azurerm.mysql_flexible_server.MysqlFlexibleServer(self, "example_3",
            administrator_login="_admin_Terraform_892123456789312",
            administrator_password="QAZwsx123",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-mysqlfs",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="B_Standard_B1s",
            zone="2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mysql_flexible_server_example.override_logical_id("example")
        azurerm_mysql_flexible_server_active_directory_administrator_example =
        azurerm.mysql_flexible_server_active_directory_administrator.MysqlFlexibleServerActiveDirectoryAdministrator(self, "example_4",
            identity_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.id),
            login="sqladmin",
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.client_id),
            server_id=cdktf.Token.as_string(azurerm_mysql_flexible_server_example.id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mysql_flexible_server_active_directory_administrator_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `server_id` - (Required) The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.

* `identity_id` - (Required) The resource ID of the identity used for AAD Authentication.

* `login` - (Required) The login name of the principal to set as the server administrator

* `object_id` - (Required) The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.

* `tenant_id` - (Required) The Azure Tenant ID.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MySQL Flexible Server Active Directory Administrator.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the MySQL Flexible Server Active Directory Administrator.
* `read` - (Defaults to 5 minutes) Used when retrieving the MySQL Flexible Server Active Directory Administrator.
* `update` - (Defaults to 30 minutes) Used when updating the MySQL Flexible Server Active Directory Administrator.
* `delete` - (Defaults to 30 minutes) Used when deleting the MySQL Flexible Server Active Directory Administrator.

## Import

A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mysql_flexible_server_active_directory_administrator.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0c38a0dfbc8820e1f15b7c3a72f37addf330b49bf27f84cc9fe46a2560b45e78 -->