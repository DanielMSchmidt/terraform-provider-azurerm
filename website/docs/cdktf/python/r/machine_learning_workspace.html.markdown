---
subcategory: "Machine Learning"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_machine_learning_workspace"
description: |-
  Manages a Azure Machine Learning Workspace.
---

<!-- Please do not edit this file, it is generated. -->
# azurerm_machine_learning_workspace

Manages a Azure Machine Learning Workspace

~> **NOTE:** For examples on how to set up the Azure Machine Learning workspace, together with compute and integrated services, see [Terraform Quickstart](https://github.com/Azure/terraform/tree/master/quickstart)

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_replication_type="GRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workspacestorageaccount",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_application_insights_example =
        azurerm.application_insights.ApplicationInsights(self, "example_4",
            application_type="web",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workspace-example-ai",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_application_insights_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_5",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workspaceexamplekeyvault",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_machine_learning_workspace_example =
        azurerm.machine_learning_workspace.MachineLearningWorkspace(self, "example_6",
            application_insights_id=cdktf.Token.as_string(azurerm_application_insights_example.id),
            identity=MachineLearningWorkspaceIdentity(
                type="SystemAssigned"
            ),
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-workspace",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_machine_learning_workspace_example.override_logical_id("example")
```

## Example Usage with Data encryption

~> **NOTE:** The Key Vault must enable purge protection.

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures(
                key_vault=AzurermProviderFeaturesKeyVault(
                    purge_soft_delete_on_destroy=False
                )
            )
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_replication_type="GRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workspacestorageaccount",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_application_insights_example =
        azurerm.application_insights.ApplicationInsights(self, "example_4",
            application_type="web",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workspace-example-ai",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_application_insights_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_5",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="workspaceexamplekeyvault",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_example =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example_6",
            key_permissions=["Create", "Get", "Delete", "Purge", "GetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_access_policy_example.override_logical_id("example")
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_7",
            depends_on=[azurerm_key_vault_example, azurerm_key_vault_access_policy_example],
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="workspaceexamplekeyvaultkey"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_machine_learning_workspace_example =
        azurerm.machine_learning_workspace.MachineLearningWorkspace(self, "example_8",
            application_insights_id=cdktf.Token.as_string(azurerm_application_insights_example.id),
            encryption=MachineLearningWorkspaceEncryption(
                key_id=cdktf.Token.as_string(azurerm_key_vault_key_example.id),
                key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id)
            ),
            identity=MachineLearningWorkspaceIdentity(
                type="SystemAssigned"
            ),
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-workspace",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_machine_learning_workspace_example.override_logical_id("example")
```

## Example Usage with User Assigned Identity and Data Encryption

~> **NOTE:** The Key Vault must enable purge protection.

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.azuread as azuread
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures(
                key_vault=AzurermProviderFeaturesKeyVault(
                    purge_soft_delete_on_destroy=False
                )
            )
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_replication_type="GRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageaccount",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_user_assigned_identity_example =
        azurerm.user_assigned_identity.UserAssignedIdentity(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-identity",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_user_assigned_identity_example.override_logical_id("example")
        data_azuread_service_principal_test =
        azuread.data_azuread_service_principal.DataAzureadServicePrincipal(self, "test",
            display_name="Azure Cosmos DB"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_application_insights_example =
        azurerm.application_insights.ApplicationInsights(self, "example_6",
            application_type="web",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-ai",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_application_insights_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_7",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-keyvalut",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_example_cosmosdb =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example-cosmosdb",
            depends_on=[data_azuread_service_principal_test, data_azurerm_client_config_current
            ],
            key_permissions=["Get", "Recover", "UnwrapKey", "WrapKey"],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azuread_service_principal_test.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example-identity",
            key_permissions=["WrapKey", "UnwrapKey", "Get", "Recover"],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.principal_id),
            secret_permissions=["Get", "List", "Set", "Delete", "Recover", "Backup", "Restore"
            ],
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_access_policy_example_sp =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example-sp",
            key_permissions=["Get", "Create", "Recover", "Delete", "Purge", "GetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_11",
            depends_on=[azurerm_key_vault_example, azurerm_key_vault_access_policy_example_sp
            ],
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="example-keyvaultkey"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_role_assignment_example_role1 =
        azurerm.role_assignment.RoleAssignment(self, "example-role1",
            principal_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.principal_id),
            role_definition_name="Contributor",
            scope=cdktf.Token.as_string(azurerm_key_vault_example.id)
        )
        azurerm_role_assignment_example_role2 =
        azurerm.role_assignment.RoleAssignment(self, "example-role2",
            principal_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.principal_id),
            role_definition_name="Storage Blob Data Contributor",
            scope=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        azurerm_role_assignment_example_role3 =
        azurerm.role_assignment.RoleAssignment(self, "example-role3",
            principal_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.principal_id),
            role_definition_name="Contributor",
            scope=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        azurerm_role_assignment_example_role4 =
        azurerm.role_assignment.RoleAssignment(self, "example-role4",
            principal_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.principal_id),
            role_definition_name="Contributor",
            scope=cdktf.Token.as_string(azurerm_application_insights_example.id)
        )
        azurerm_machine_learning_workspace_example =
        azurerm.machine_learning_workspace.MachineLearningWorkspace(self, "example_16",
            application_insights_id=cdktf.Token.as_string(azurerm_application_insights_example.id),
            depends_on=[azurerm_role_assignment_example_role1, azurerm_role_assignment_example_role2, azurerm_role_assignment_example_role3, azurerm_role_assignment_example_role4, azurerm_key_vault_access_policy_example_cosmosdb
            ],
            encryption=MachineLearningWorkspaceEncryption(
                key_id=cdktf.Token.as_string(azurerm_key_vault_key_example.id),
                key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
                user_assigned_identity_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.id)
            ),
            high_business_impact=True,
            identity=MachineLearningWorkspaceIdentity(
                identity_ids=[
                    cdktf.Token.as_string(azurerm_user_assigned_identity_example.id)
                ],
                type="UserAssigned"
            ),
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-workspace",
            primary_user_assigned_identity=cdktf.Token.as_string(azurerm_user_assigned_identity_example.id),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_machine_learning_workspace_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Machine Learning Workspace. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) Specifies the name of the Resource Group in which the Machine Learning Workspace should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the Machine Learning Workspace should exist. Changing this forces a new resource to be created.

* `application_insights_id` - (Required) The ID of the Application Insights associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

* `key_vault_id` - (Required) The ID of key vault associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

* `storage_account_id` - (Required) The ID of the Storage Account associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

-> **NOTE:** The `account_tier` cannot be `Premium` in order to associate the Storage Account to this Machine Learning Workspace.

* `identity` - (Required) An `identity` block as defined below.

* `container_registry_id` - (Optional) The ID of the container registry associated with this Machine Learning Workspace. Changing this forces a new resource to be created.

-> **NOTE:** The `admin_enabled` should be `true` in order to associate the Container Registry to this Machine Learning Workspace.

* `public_access_behind_virtual_network_enabled` - (Optional) Enable public access when this Machine Learning Workspace is behind a VNet. Changing this forces a new resource to be created.

* `public_network_access_enabled` - (Optional) Enable public access when this Machine Learning Workspace is behind VNet.

~> **NOTE:** `public_access_behind_virtual_network_enabled` is deprecated and will be removed in favour of the property `public_network_access_enabled`.

* `image_build_compute_name` - (Optional) The compute name for image build of the Machine Learning Workspace.

* `description` - (Optional) The description of this Machine Learning Workspace.

* `encryption` - (Optional) An `encryption` block as defined below. Changing this forces a new resource to be created.

* `friendly_name` - (Optional) Display name for this Machine Learning Workspace.

* `high_business_impact` - (Optional) Flag to signal High Business Impact (HBI) data in the workspace and reduce diagnostic data collected by the service

* `primary_user_assigned_identity` - (Optional) The user assigned identity id that represents the workspace identity.

* `v1_legacy_mode_enabled` - (Optional) Enable V1 API features, enabling `v1_legacy_mode` may prevent you from using features provided by the v2 API. Defaults to `false`.

* `sku_name` - (Optional) SKU/edition of the Machine Learning Workspace, possible values are `Basic`. Defaults to `Basic`.

* `tags` - (Optional) A mapping of tags to assign to the resource.

---

An `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be configured on this Machine Learning Workspace. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).

* `identity_ids` - (Optional) Specifies a list of User Assigned Managed Identity IDs to be assigned to this Machine Learning Workspace.

~> **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.

---

An `encryption` block supports the following:

* `key_vault_id` - (Required) The ID of the keyVault where the customer owned encryption key is present.

* `key_id` - (Required) The Key Vault URI to access the encryption key.

* `user_assigned_identity_id` - (Optional) The Key Vault URI to access the encryption key.

~> **Note**: `user_assigned_identity_id` must set when`identity.type` is `UserAssigned` or service won't be able to find the assigned permissions.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Machine Learning Workspace.

* `discovery_url` - The url for the discovery service to identify regional endpoints for machine learning experimentation services.

* `workspace_id` - The immutable id associated with this workspace.

---

An `identity` block exports the following:

* `principal_id` - The Principal ID associated with this Managed Service Identity.

* `tenant_id` - The Tenant ID associated with this Managed Service Identity.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Machine Learning Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Machine Learning Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Machine Learning Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Machine Learning Workspace.

## Import

Machine Learning Workspace can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_machine_learning_workspace.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/workspace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-44f46c51f0292c831b83a981c899315a304fd8edbe0cb5e650f4d95ef6728781 -->