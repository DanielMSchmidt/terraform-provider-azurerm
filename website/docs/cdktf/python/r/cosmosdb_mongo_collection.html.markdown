---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_mongo_collection"
description: |-
  Manages a Mongo Collection within a Cosmos DB Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_mongo_collection

Manages a Mongo Collection within a Cosmos DB Account.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_cosmosdb_account_example =
        azurerm.data_azurerm_cosmosdb_account.DataAzurermCosmosdbAccount(self, "example",
            name="tfex-cosmosdb-account",
            resource_group_name="tfex-cosmosdb-account-rg"
        )
        azurerm_cosmosdb_mongo_database_example =
        azurerm.cosmosdb_mongo_database.CosmosdbMongoDatabase(self, "example_1",
            account_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.name),
            name="tfex-cosmos-mongo-db",
            resource_group_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.resource_group_name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_mongo_database_example.override_logical_id("example")
        azurerm_cosmosdb_mongo_collection_example =
        azurerm.cosmosdb_mongo_collection.CosmosdbMongoCollection(self, "example_2",
            account_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.name),
            database_name=cdktf.Token.as_string(azurerm_cosmosdb_mongo_database_example.name),
            default_ttl_seconds=cdktf.Token.as_number("777"),
            index=[CosmosdbMongoCollectionIndex(
                keys=["_id"],
                unique=True
            )
            ],
            name="tfex-cosmos-mongo-db",
            resource_group_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.resource_group_name),
            shard_key="uniqueKey",
            throughput=400
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_mongo_collection_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
* `resource_group_name` - (Required) The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
* `account_name` - (Required) The name of the Cosmos DB Account in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
* `database_name` - (Required) The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
* `shard_key` - (Optional) The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
* `analytical_storage_ttl` - (Optional) The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
* `default_ttl_seconds` - (Optional) The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
* `index` - (Optional) One or more `index` blocks as defined below.
* `throughput` - (Optional) The throughput of the MongoDB collection (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.
* `autoscale_settings` - (Optional) An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.

~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.

---

An `autoscale_settings` block supports the following:

* `max_throughput` - (Optional) The maximum throughput of the MongoDB collection (RU/s). Must be between `1,000` and `1,000,000`. Must be set in increments of `1,000`. Conflicts with `throughput`.

---

The `index` block supports the following:

* `keys` - (Required) Specifies the list of user settable keys for each Cosmos DB Mongo Collection.

* `unique` - (Optional) Is the index unique or not? Defaults to `false`.

~> **Note:** An index with an "_id" key must be specified.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cosmos DB Mongo Collection.

* `system_indexes` - One or more `system_indexes` blocks as defined below.

---

The `system_indexes` block supports the following:

* `keys` - The list of system keys which are not settable for each Cosmos DB Mongo Collection.

* `unique` - Identifies whether the table contains no duplicate values.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the CosmosDB Mongo Collection.
* `update` - (Defaults to 30 minutes) Used when updating the CosmosDB Mongo Collection.
* `read` - (Defaults to 5 minutes) Used when retrieving the CosmosDB Mongo Collection.
* `delete` - (Defaults to 30 minutes) Used when deleting the CosmosDB Mongo Collection.

## Import

CosmosDB Mongo Collection can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_mongo_collection.collection1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbDatabases/db1/collections/collection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-bd625cbecf2e2f4fe41d6559772508d5961c347f406fe8e4a87fda6fc1b55d27 -->