---
subcategory: "Digital Twins"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_digital_twins_time_series_database_connection"
description: |-
  Manages a Digital Twins Time Series Database Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_digital_twins_time_series_database_connection

Manages a Digital Twins Time Series Database Connection.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_digital_twins_instance_example =
        azurerm.digital_twins_instance.DigitalTwinsInstance(self, "example_1",
            identity=DigitalTwinsInstanceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-DT",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_digital_twins_instance_example.override_logical_id("example")
        azurerm_eventhub_namespace_example =
        azurerm.eventhub_namespace.EventhubNamespace(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="exampleEventHubNamespace",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="Standard"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_eventhub_namespace_example.override_logical_id("example")
        azurerm_kusto_cluster_example = azurerm.kusto_cluster.KustoCluster(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplekc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku=KustoClusterSku(
                capacity=1,
                name="Dev(No SLA)_Standard_D11_v2"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_kusto_cluster_example.override_logical_id("example")
        azurerm_kusto_database_example = azurerm.kusto_database.KustoDatabase(self, "example_4",
            cluster_name=cdktf.Token.as_string(azurerm_kusto_cluster_example.name),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-kusto-database",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_kusto_database_example.override_logical_id("example")
        azurerm_kusto_database_principal_assignment_example =
        azurerm.kusto_database_principal_assignment.KustoDatabasePrincipalAssignment(self, "example_5",
            cluster_name=cdktf.Token.as_string(azurerm_kusto_cluster_example.name),
            database_name=cdktf.Token.as_string(azurerm_kusto_database_example.name),
            name="dataadmin",
            principal_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_digital_twins_instance_example.identity, ["0", "principal_id"
                ])),
            principal_type="App",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            role="Admin",
            tenant_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_digital_twins_instance_example.identity, ["0", "tenant_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_kusto_database_principal_assignment_example.override_logical_id("example")
        azurerm_role_assignment_database_contributor =
        azurerm.role_assignment.RoleAssignment(self, "database_contributor",
            principal_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_digital_twins_instance_example.identity, ["0", "principal_id"
                ])),
            role_definition_name="Contributor",
            scope=cdktf.Token.as_string(azurerm_kusto_database_example.id)
        )
        azurerm_eventhub_example = azurerm.eventhub.Eventhub(self, "example_7",
            message_retention=7,
            name="exampleEventHub",
            namespace_name=cdktf.Token.as_string(azurerm_eventhub_namespace_example.name),
            partition_count=2,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_eventhub_example.override_logical_id("example")
        azurerm_eventhub_consumer_group_example =
        azurerm.eventhub_consumer_group.EventhubConsumerGroup(self, "example_8",
            eventhub_name=cdktf.Token.as_string(azurerm_eventhub_example.name),
            name="example-consumergroup",
            namespace_name=cdktf.Token.as_string(azurerm_eventhub_namespace_example.name),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_eventhub_consumer_group_example.override_logical_id("example")
        azurerm_role_assignment_eventhub_data_owner =
        azurerm.role_assignment.RoleAssignment(self, "eventhub_data_owner",
            principal_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_digital_twins_instance_example.identity, ["0", "principal_id"
                ])),
            role_definition_name="Azure Event Hubs Data Owner",
            scope=cdktf.Token.as_string(azurerm_eventhub_example.id)
        )
        azurerm_digital_twins_time_series_database_connection_example =
        azurerm.digital_twins_time_series_database_connection.DigitalTwinsTimeSeriesDatabaseConnection(self, "example_10",
            depends_on=[azurerm_role_assignment_database_contributor, azurerm_role_assignment_eventhub_data_owner, azurerm_kusto_database_principal_assignment_example
            ],
            digital_twins_id=cdktf.Token.as_string(azurerm_digital_twins_instance_example.id),
            eventhub_consumer_group_name=cdktf.Token.as_string(azurerm_eventhub_consumer_group_example.name),
            eventhub_name=cdktf.Token.as_string(azurerm_eventhub_example.name),
            eventhub_namespace_endpoint_uri="sb://${" + azurerm_eventhub_namespace_example.name + "}.servicebus.windows.net",
            eventhub_namespace_id=cdktf.Token.as_string(azurerm_eventhub_namespace_example.id),
            kusto_cluster_id=cdktf.Token.as_string(azurerm_kusto_cluster_example.id),
            kusto_cluster_uri=cdktf.Token.as_string(azurerm_kusto_cluster_example.uri),
            kusto_database_name=cdktf.Token.as_string(azurerm_kusto_database_example.name),
            kusto_table_name="exampleTable",
            name="example-connection"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_digital_twins_time_series_database_connection_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Digital Twins Time Series Database Connection. Changing this forces a new resource to be created.

* `digital_twins_id` - (Required) The ID of the Digital Twins. Changing this forces a new resource to be created.

* `eventhub_name` - (Required) Name of the Event Hub. Changing this forces a new resource to be created.

* `eventhub_namespace_endpoint_uri` - (Required) URI of the Event Hub Namespace. Changing this forces a new resource to be created.

* `eventhub_namespace_id` - (Required) The ID of the Event Hub Namespace. Changing this forces a new resource to be created.

* `kusto_cluster_id` - (Required) The ID of the Kusto Cluster. Changing this forces a new resource to be created.

* `kusto_cluster_uri` - (Required) URI of the Kusto Cluster. Changing this forces a new resource to be created.

* `kusto_database_name` - (Required) Name of the Kusto Database. Changing this forces a new resource to be created.

---

* `eventhub_consumer_group_name` - (Optional) Name of the Event Hub Consumer Group. Changing this forces a new resource to be created. Defaults to `$Default`.

* `kusto_table_name` - (Optional) Name of the Kusto Table. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported: 

* `id` - The ID of the Digital Twins Time Series Database Connection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Digital Twins Time Series Database Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Digital Twins Time Series Database Connection.
* `delete` - (Defaults to 30 minutes) Used when deleting the Digital Twins Time Series Database Connection.

## Import

Digital Twins Time Series Database Connections can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_digital_twins_time_series_database_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DigitalTwins/digitalTwinsInstances/dt1/timeSeriesDatabaseConnections/connection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ddc079c0526e6288d2c0bf349bb94a7f1d3a785ff727fc8c923ea140447584ae -->