---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_route_server"
description: |-
  Manages an Azure Route Server 
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_route_server

Manages an Azure Route Server

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vn",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            tags={
                "environment": "Production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_2",
            allocation_method="Static",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-pip",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="Standard"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_3",
            address_prefixes=["10.0.1.0/24"],
            name="RouteServerSubnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_route_server_example = azurerm.route_server.RouteServer(self, "example_4",
            branch_to_branch_traffic_enabled=True,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-routerserver",
            public_ip_address_id=cdktf.Token.as_string(azurerm_public_ip_example.id),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="Standard",
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_route_server_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name of the Route Server. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.

* `subnet_id` - (Required) The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.

-> **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you'll receive an error message when deploying the Route Server

* `sku` - (Required) The SKU of the Route Server. The only possible value is `Standard`. Changing this forces a new resource to be created.

* `public_ip_address_id` - (Required) The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.

* `branch_to_branch_traffic_enabled` - (Optional) Whether to enable route exchange between Azure Route Server and the gateway(s)

* `tags` - (Optional) A mapping of tags to assign to the resource.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Route Server .

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Route Server.
* `read` - (Defaults to 5 minutes) Used when retrieving the Route Server.
* `update` - (Defaults to 60 minutes) Used when updating the Route Server.
* `delete` - (Defaults to 60 minutes) Used when deleting the Route Server.

## Import

Route Server can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_route_server.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/routeServer1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-13cf2aab90f21f97b4f4373a1ab0bb9eba6c38a31a9b6822b6da0577d1f6bada -->