---
subcategory: "Lab Service"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_lab_service_schedule"
description: |-
  Manages a Lab Service Schedule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_lab_service_schedule

Manages a Lab Service Schedule.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_lab_service_lab_example = azurerm.lab_service_lab.LabServiceLab(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-lab",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            security=LabServiceLabSecurity(
                open_access_enabled=False
            ),
            title="Test Title",
            virtual_machine=LabServiceLabVirtualMachine(
                admin_user=LabServiceLabVirtualMachineAdminUser(
                    password="Password1234!",
                    username="testadmin"
                ),
                image_reference=LabServiceLabVirtualMachineImageReference(
                    offer="0001-com-ubuntu-server-focal",
                    publisher="canonical",
                    sku="20_04-lts",
                    version="latest"
                ),
                sku=LabServiceLabVirtualMachineSku(
                    capacity=1,
                    name="Classic_Fsv2_2_4GB_128_S_SSD"
                )
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lab_service_lab_example.override_logical_id("example")
        azurerm_lab_service_schedule_example =
        azurerm.lab_service_schedule.LabServiceSchedule(self, "example_2",
            lab_id=cdktf.Token.as_string(azurerm_lab_service_lab_example.id),
            name="example-labschedule",
            stop_time="2022-11-28T00:00:00Z",
            time_zone="America/Los_Angeles"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lab_service_schedule_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.

* `lab_id` - (Required) The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.

* `stop_time` - (Required) When Lab User Virtual Machines will be stopped in RFC-3339 format.

* `time_zone` - (Required) The IANA Time Zone ID for the Schedule.

* `notes` - (Optional) The notes for the Schedule.

* `recurrence` - (Optional) A `recurrence` block as defined below.

* `start_time` - (Optional) When Lab User Virtual Machines will be started in RFC-3339 format.

---

A `recurrence` block supports the following:

* `expiration_date` - (Required) When the recurrence will expire in RFC-3339 format.

* `frequency` - (Required) The frequency of the recurrence. Possible values are `Daily` and `Weekly`.

* `interval` - (Optional) The interval to invoke the schedule on. Possible values are between `1` and `365`.

* `week_days` - (Optional) The interval to invoke the schedule on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Lab Service Schedule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Lab Service Schedule.
* `read` - (Defaults to 5 minutes) Used when retrieving the Lab Service Schedule.
* `update` - (Defaults to 30 minutes) Used when updating the Lab Service Schedule.
* `delete` - (Defaults to 30 minutes) Used when deleting the Lab Service Schedule.

## Import

Lab Service Schedules can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_lab_service_schedule.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.LabServices/labs/lab1/schedules/schedule1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-6ae9744509a4e3c8995186764cee7ecb28f8dbcb721dd17bf7bb9eab344e5e13 -->