---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_virtual_network_dns_servers"
description: |-
  Manages the DNS servers associated with a virtual network.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_virtual_network_dns_servers

Manages the DNS servers associated with a virtual network.

~> **NOTE on Virtual Networks and DNS Servers:** Terraform currently provides both a standalone [virtual network DNS Servers resource](virtual_network_dns_servers.html), and allows for DNS servers to be defined in-line within the [Virtual Network resource](virtual_network.html).
At this time you cannot use a Virtual Network with in-line DNS servers in conjunction with any Virtual Network DNS Servers resources. Doing so will cause a conflict of Virtual Network DNS Servers configurations and will overwrite virtual networks DNS servers.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            subnet=[VirtualNetworkSubnet(
                address_prefix="10.0.1.0/24",
                name="subnet1"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_virtual_network_dns_servers_example =
        azurerm.virtual_network_dns_servers.VirtualNetworkDnsServers(self, "example_2",
            dns_servers=["10.7.7.2", "10.7.7.7", "10.7.7.1"],
            virtual_network_id=cdktf.Token.as_string(azurerm_virtual_network_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_dns_servers_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `virtual_network_id` - (Required) The ID of the Virtual Network that should be linked to the DNS Zone. Changing this forces a new resource to be created.

* `dns_servers` - (Optional) List of IP addresses of DNS servers

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The virtual network DNS server ID.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Virtual Network.
* `update` - (Defaults to 30 minutes) Used when updating the Virtual Network.
* `read` - (Defaults to 5 minutes) Used when retrieving the Virtual Network.
* `delete` - (Defaults to 30 minutes) Used when deleting the Virtual Network.

## Import

Virtual Network DNS Servers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_virtual_network_dns_servers.exampleNetwork /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/dnsServers/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b961f9442c05c309b5f7167cc1d906369def8c4b64db1b6e07267e39505d1428 -->