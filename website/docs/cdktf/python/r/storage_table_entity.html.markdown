---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_table_entity"
description: |-
  Manages an Entity within a Table in an Azure Storage Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_table_entity

Manages an Entity within a Table in an Azure Storage Account.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="azureexample"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="azureexamplestorage1",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_table_example = azurerm.storage_table.StorageTable(self, "example_2",
            name="myexampletable",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_table_example.override_logical_id("example")
        azurerm_storage_table_entity_example =
        azurerm.storage_table_entity.StorageTableEntity(self, "example_3",
            entity={
                "example": "example"
            },
            partition_key="examplepartition",
            row_key="examplerow",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name),
            table_name=cdktf.Token.as_string(azurerm_storage_table_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_table_entity_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `storage_account_name` - (Required) Specifies the storage account in which to create the storage table entity. Changing this forces a new resource to be created.

* `table_name` - (Required) The name of the storage table in which to create the storage table entity. Changing this forces a new resource to be created.

* `partition_key` - (Required) The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.

* `row_key` - (Required) The key for the row where the entity will be inserted/merged. Changing this forces a new resource.

* `entity` - (Required) A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Entity within the Table in the Storage Account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Table Entity.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Table Entity.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Table Entity.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Table Entity.

## Import

Entities within a Table in an Azure Storage Account can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_table_entity.entity1 https://example.table.core.windows.net/table1(PartitionKey='samplepartition',RowKey='samplerow')
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d3b1347107351bacca7661da8827c2fd9db251fe7fd9b0edaf7e9d7cb7c2aecd -->