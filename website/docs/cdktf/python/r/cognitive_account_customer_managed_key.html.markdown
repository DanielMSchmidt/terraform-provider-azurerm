---
subcategory: "Cognitive Services"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cognitive_account_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a Cognitive Services Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cognitive_account_customer_managed_key

Manages a Customer Managed Key for a Cognitive Services Account.

~> **NOTE:** It's possible to define a Customer Managed Key both within [the `azurerm_cognitive_account` resource](cognitive_account.html) via the `customer_managed_key` block and by using [the `azurerm_cognitive_account_customer_managed_key` resource](cognitive_account_customer_managed_key.html). However it's not possible to use both methods to manage a Customer Managed Key for a Cognitive Account, since there'll be conflicts.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West US",
            name="example-resources"
        )
        azurerm_user_assigned_identity_example =
        azurerm.user_assigned_identity.UserAssignedIdentity(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-identity",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_user_assigned_identity_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_cognitive_account_example =
        azurerm.cognitive_account.CognitiveAccount(self, "example_3",
            custom_subdomain_name="example-account",
            identity=CognitiveAccountIdentity(
                identity_ids=[
                    cdktf.Token.as_string(azurerm_user_assigned_identity_example.id)
                ],
                type="SystemAssigned, UserAssigned"
            ),
            kind="Face",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-account",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="E0"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cognitive_account_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_4",
            access_policy=[KeyVaultAccessPolicy(
                key_permissions=["Get", "Create", "List", "Restore", "Recover", "UnwrapKey", "WrapKey", "Purge", "Encrypt", "Decrypt", "Sign", "Verify"
                ],
                object_id=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_cognitive_account_example.identity, ["0", "principal_id"
                    ])),
                secret_permissions=["Get"],
                tenant_id=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_cognitive_account_example.identity, ["0", "tenant_id"
                    ]))
            ), KeyVaultAccessPolicy(
                key_permissions=["Get", "Create", "Delete", "List", "Restore", "Recover", "UnwrapKey", "WrapKey", "Purge", "Encrypt", "Decrypt", "Sign", "Verify", "GetRotationPolicy"
                ],
                object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
                secret_permissions=["Get"],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            ), KeyVaultAccessPolicy(
                key_permissions=["Get", "Create", "Delete", "List", "Restore", "Recover", "UnwrapKey", "WrapKey", "Purge", "Encrypt", "Decrypt", "Sign", "Verify"
                ],
                object_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.principal_id),
                secret_permissions=["Get"],
                tenant_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.tenant_id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vault",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_5",
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="example-key"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_cognitive_account_customer_managed_key_example =
        azurerm.cognitive_account_customer_managed_key.CognitiveAccountCustomerManagedKeyA(self, "example_6",
            cognitive_account_id=cdktf.Token.as_string(azurerm_cognitive_account_example.id),
            identity_client_id=cdktf.Token.as_string(azurerm_user_assigned_identity_example.client_id),
            key_vault_key_id=cdktf.Token.as_string(azurerm_key_vault_key_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cognitive_account_customer_managed_key_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `cognitive_account_id` - (Required) The ID of the Cognitive Account. Changing this forces a new resource to be created.

* `key_vault_key_id` - (Required) The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.

* `identity_client_id` - (Optional) The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cognitive Account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Cognitive Account Customer Managed Key.
* `read` - (Defaults to 5 minutes) Used when retrieving the Cognitive Account Customer Managed Key.
* `update` - (Defaults to 30 minutes) Used when updating the Cognitive Account Customer Managed Key.
* `delete` - (Defaults to 30 minutes) Used when deleting the Cognitive Account Customer Managed Key.

## Import

Customer Managed Keys for a Cognitive Account can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cognitive_account_customer_managed_key.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-dab99e9972bff351600c53c7801eed8cbf98db63b4fa11548e121399198386df -->