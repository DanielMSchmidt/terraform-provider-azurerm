---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_postgresql_flexible_server_configuration"
description: |-
  Sets a PostgreSQL Configuration value on a Azure PostgreSQL Flexible Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_postgresql_flexible_server_configuration

Sets a PostgreSQL Configuration value on a Azure PostgreSQL Flexible Server.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_postgresql_flexible_server_example =
        azurerm.postgresql_flexible_server.PostgresqlFlexibleServer(self, "example_2",
            administrator_login="psqladmin",
            administrator_password="H@Sh1CoR3!",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-psqlflexibleserver",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Standard_D4s_v3",
            storage_mb=32768,
            version="12"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_flexible_server_example.override_logical_id("example")
        azurerm_postgresql_flexible_server_configuration_example =
        azurerm.postgresql_flexible_server_configuration.PostgresqlFlexibleServerConfiguration(self, "example_3",
            name="backslash_quote",
            server_id=cdktf.Token.as_string(azurerm_postgresql_flexible_server_example.id),
            value="on"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_flexible_server_configuration_example.override_logical_id("example")
```

## Example Usage - Azure Extensions

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_postgresql_flexible_server_example =
        azurerm.postgresql_flexible_server.PostgresqlFlexibleServer(self, "example_2",
            administrator_login="psqladmin",
            administrator_password="H@Sh1CoR3!",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-psqlflexibleserver",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Standard_D4s_v3",
            storage_mb=32768,
            version="12"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_flexible_server_example.override_logical_id("example")
        azurerm_postgresql_flexible_server_configuration_example =
        azurerm.postgresql_flexible_server_configuration.PostgresqlFlexibleServerConfiguration(self, "example_3",
            name="azure.extensions",
            server_id=cdktf.Token.as_string(azurerm_postgresql_flexible_server_example.id),
            value="CUBE,CITEXT,BTREE_GIST"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_postgresql_flexible_server_configuration_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the PostgreSQL Configuration, which needs [to be a valid PostgreSQL configuration name](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER). Changing this forces a new resource to be created.

-> **Note:** PostgreSQL provides the ability to extend the functionality using azure extensions, with PostgreSQL azure extensions you should specify the `name` value as `azure.extensions` and the `value` you wish to allow in the [extensions list](https://docs.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-extensions?WT.mc_id=Portal-Microsoft_Azure_OSSDatabases#postgres-13-extensions).

* `server_id` - (Required) The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.

* `value` - (Required) Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the PostgreSQL Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the PostgreSQL Configuration.
* `update` - (Defaults to 30 minutes) Used when updating the PostgreSQL Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the PostgreSQL Configuration.
* `delete` - (Defaults to 30 minutes) Used when deleting the PostgreSQL Configuration.

## Import

PostgreSQL Configurations can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_postgresql_flexible_server_configuration.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/server1/configurations/configuration1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-853b39312279a1643e973e46e986d2bf4bbc4c64b302e697e41f2d8f1077e09e -->