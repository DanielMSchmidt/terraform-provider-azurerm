---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_workspace"
description: |-
  Manages a Synapse Workspace.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_workspace

Manages a Synapse Workspace.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            is_hns_enabled=cdktf.Token.as_boolean("true"),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_2",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_3",
            aad_admin=[SynapseWorkspaceAadAdmin(
                login="AzureAD Admin",
                object_id="00000000-0000-0000-0000-000000000000",
                tenant_id="00000000-0000-0000-0000-000000000000"
            )
            ],
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id),
            tags={
                "Env": "production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
```

## Example Usage - creating a workspace with Customer Managed Key and Azure AD Admin

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            is_hns_enabled=cdktf.Token.as_boolean("true"),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_2",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_deployer =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "deployer",
            key_permissions=["Create", "Get", "Delete", "Purge", "GetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_6",
            depends_on=[azurerm_key_vault_access_policy_deployer],
            key_opts=["unwrapKey", "wrapKey"],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="workspaceencryptionkey"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_7",
            customer_managed_key=SynapseWorkspaceCustomerManagedKey(
                key_name="enckey",
                key_versionless_id=cdktf.Token.as_string(azurerm_key_vault_key_example.versionless_id)
            ),
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id),
            tags={
                "Env": "production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        azurerm_key_vault_access_policy_workspace_policy =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "workspace_policy",
            key_permissions=["Get", "WrapKey", "UnwrapKey"],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_synapse_workspace_example.identity, ["0", "principal_id"
                ])),
            tenant_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_synapse_workspace_example.identity, ["0", "tenant_id"
                ]))
        )
        azurerm_synapse_workspace_key_example =
        azurerm.synapse_workspace_key.SynapseWorkspaceKey(self, "example_9",
            active=True,
            customer_managed_key_name="enckey",
            customer_managed_key_versionless_id=cdktf.Token.as_string(azurerm_key_vault_key_example.versionless_id),
            depends_on=[azurerm_key_vault_access_policy_workspace_policy],
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_key_example.override_logical_id("example")
        azurerm_synapse_workspace_aad_admin_example =
        azurerm.synapse_workspace_aad_admin.SynapseWorkspaceAadAdminA(self, "example_10",
            depends_on=[azurerm_synapse_workspace_key_example],
            login="AzureAD Admin",
            object_id="00000000-0000-0000-0000-000000000000",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id),
            tenant_id="00000000-0000-0000-0000-000000000000"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_aad_admin_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.

* `identity` - (Optional) An `identity` block as defined below.

* `storage_data_lake_gen2_filesystem_id` - (Required) Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.

* `sql_administrator_login` - (Optional) Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aad_admin` or `customer_managed_key` must be provided.

* `sql_administrator_login_password` - (Optional) The Password associated with the `sql_administrator_login` for the SQL administrator. If this is not provided `aad_admin` or `customer_managed_key` must be provided.

---

* `aad_admin` - (Optional) An `aad_admin` block as defined below. Conflicts with `customer_managed_key`.

* `compute_subnet_id` - (Optional) Subnet ID used for computes in workspace Changing this forces a new resource to be created.

* `azure_devops_repo` - (Optional) An `azure_devops_repo` block as defined below.

* `data_exfiltration_protection_enabled` - (Optional) Is data exfiltration protection enabled in this workspace? If set to `true`, `managed_virtual_network_enabled` must also be set to `true`. Changing this forces a new resource to be created.

* `customer_managed_key` - (Optional) A `customer_managed_key` block as defined below. Conflicts with `aad_admin`.

* `github_repo` - (Optional) A `github_repo` block as defined below.

* `linking_allowed_for_aad_tenant_ids` - (Optional) Allowed AAD Tenant Ids For Linking.

* `managed_resource_group_name` - (Optional) Workspace managed resource group. Changing this forces a new resource to be created.

* `managed_virtual_network_enabled` - (Optional) Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.

* `public_network_access_enabled` - (Optional) Whether public network access is allowed for the Cognitive Account. Defaults to `true`.

* `purview_id` - (Optional) The ID of purview account.

* `sql_aad_admin` - (Optional) An `sql_aad_admin` block as defined below.

* `sql_identity_control_enabled` - (Optional) Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?

* `tags` - (Optional) A mapping of tags which should be assigned to the Synapse Workspace.

---

An `aad_admin` block supports the following:

* `login` - (Required) The login name of the Azure AD Administrator of this Synapse Workspace.

* `object_id` - (Required) The object id of the Azure AD Administrator of this Synapse Workspace.

* `tenant_id` - (Required) The tenant id of the Azure AD Administrator of this Synapse Workspace.

---

An `azure_devops_repo` block supports the following:

* `account_name` - (Required) Specifies the Azure DevOps account name.

* `branch_name` - (Required) Specifies the collaboration branch of the repository to get code from.

* `last_commit_id` - (Optional) The last commit ID.

* `project_name` - (Required) Specifies the name of the Azure DevOps project.

* `repository_name` - (Required) Specifies the name of the git repository.

* `root_folder` - (Required) Specifies the root folder within the repository. Set to `/` for the top level.

* `tenant_id` - (Optional) the ID of the tenant for the Azure DevOps account.

---

A `customer_managed_key` block supports the following:

* `key_versionless_id` - (Required) The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. `https://example-keyvault.vault.azure.net/type/cmk/`).

* `key_name` - (Optional) An identifier for the key. Name needs to match the name of the key used with the `azurerm_synapse_workspace_key` resource. Defaults to "cmk" if not specified.

---

The `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned` (to enable both).

* `identity_ids` - (Optional) Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.

~> **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.

---

A `github_repo` block supports the following:

* `account_name` - (Required) Specifies the GitHub account name.

* `branch_name` - (Required) Specifies the collaboration branch of the repository to get code from.

* `last_commit_id` - (Optional) The last commit ID.

* `repository_name` - (Required) Specifies the name of the git repository.

* `root_folder` - (Required) Specifies the root folder within the repository. Set to `/` for the top level.

* `git_url` - (Optional) Specifies the GitHub Enterprise host name. For example: <https://github.mydomain.com>.

-> **Note:** You must log in to the Synapse UI to complete the authentication to the GitHub repository.

---

An `sql_aad_admin` block supports the following:

* `login` - (Required) The login name of the Azure AD Administrator of this Synapse Workspace SQL.

* `object_id` - (Required) The object id of the Azure AD Administrator of this Synapse Workspace SQL.

* `tenant_id` - (Required) The tenant id of the Azure AD Administrator of this Synapse Workspace SQL.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the synapse Workspace.

* `connectivity_endpoints` - A list of Connectivity endpoints for this Synapse Workspace.

---

The `identity` block exports the following:

* `principal_id` - The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.

* `tenant_id` - The Tenant ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Workspace.

## Import

Synapse Workspace can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_workspace.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d08658607fdfe687305ba6bc8d959c3f4cc6cbb3f15b8234e17c734cc1ef86a3 -->