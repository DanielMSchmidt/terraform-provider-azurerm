---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_manager_deployment"
description: |-
  Manages a Network Manager Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_manager_deployment

Manages a Network Manager Deployment.

~> **NOTE on Virtual Network Peering:** Using Network Manager Deployment to deploy Connectivity Configuration may modify or delete existing Virtual Network Peering. At this time you should not use [Network Peering resource](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_network_peering) in conjunction with Network Manager Deployment. Doing so may cause a conflict of Peering configurations.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            flow_timeout_in_minutes=10,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-net",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        data_azurerm_subscription_current =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "current")
        azurerm_network_manager_example =
        azurerm.network_manager.NetworkManager(self, "example_3",
            description="example network manager",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-network-manager",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            scope=NetworkManagerScope(
                subscription_ids=[
                    cdktf.Token.as_string(data_azurerm_subscription_current.id)
                ]
            ),
            scope_accesses=["Connectivity", "SecurityAdmin"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_example.override_logical_id("example")
        azurerm_network_manager_network_group_example =
        azurerm.network_manager_network_group.NetworkManagerNetworkGroup(self, "example_4",
            name="example-group",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_network_group_example.override_logical_id("example")
        azurerm_network_manager_connectivity_configuration_example =
        azurerm.network_manager_connectivity_configuration.NetworkManagerConnectivityConfiguration(self, "example_5",
            applies_to_group=[NetworkManagerConnectivityConfigurationAppliesToGroup(
                group_connectivity="None",
                network_group_id=cdktf.Token.as_string(azurerm_network_manager_network_group_example.id)
            )
            ],
            connectivity_topology="HubAndSpoke",
            hub=NetworkManagerConnectivityConfigurationHub(
                resource_id=cdktf.Token.as_string(azurerm_virtual_network_example.id),
                resource_type="Microsoft.Network/virtualNetworks"
            ),
            name="example-connectivity-conf",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_connectivity_configuration_example.override_logical_id("example")
        azurerm_network_manager_deployment_example =
        azurerm.network_manager_deployment.NetworkManagerDeployment(self, "example_6",
            configuration_ids=[
                cdktf.Token.as_string(azurerm_network_manager_connectivity_configuration_example.id)
            ],
            location="eastus",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id),
            scope_access="Connectivity"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_deployment_example.override_logical_id("example")
```

## example usage (Triggers)

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            flow_timeout_in_minutes=10,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-net",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        data_azurerm_subscription_current =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "current")
        azurerm_network_manager_example =
        azurerm.network_manager.NetworkManager(self, "example_3",
            description="example network manager",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-network-manager",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            scope=NetworkManagerScope(
                subscription_ids=[
                    cdktf.Token.as_string(data_azurerm_subscription_current.id)
                ]
            ),
            scope_accesses=["Connectivity", "SecurityAdmin"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_example.override_logical_id("example")
        azurerm_network_manager_network_group_example =
        azurerm.network_manager_network_group.NetworkManagerNetworkGroup(self, "example_4",
            name="example-group",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_network_group_example.override_logical_id("example")
        azurerm_network_manager_security_admin_configuration_example =
        azurerm.network_manager_security_admin_configuration.NetworkManagerSecurityAdminConfiguration(self, "example_5",
            name="example-nmsac",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_security_admin_configuration_example.override_logical_id("example")
        azurerm_network_manager_admin_rule_collection_example =
        azurerm.network_manager_admin_rule_collection.NetworkManagerAdminRuleCollection(self, "example_6",
            name="example-nmarc",
            network_group_ids=[
                cdktf.Token.as_string(azurerm_network_manager_network_group_example.id)
            ],
            security_admin_configuration_id=cdktf.Token.as_string(azurerm_network_manager_security_admin_configuration_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_admin_rule_collection_example.override_logical_id("example")
        azurerm_network_manager_admin_rule_example =
        azurerm.network_manager_admin_rule.NetworkManagerAdminRule(self, "example_7",
            action="Deny",
            admin_rule_collection_id=cdktf.Token.as_string(azurerm_network_manager_admin_rule_collection_example.id),
            description="example",
            destination=[NetworkManagerAdminRuleDestination(
                address_prefix="*",
                address_prefix_type="IPPrefix"
            )
            ],
            destination_port_ranges=["80"],
            direction="Inbound",
            name="example-nmar",
            priority=1,
            protocol="Tcp",
            source=[NetworkManagerAdminRuleSource(
                address_prefix="Internet",
                address_prefix_type="ServiceTag"
            )
            ],
            source_port_ranges=["80"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_admin_rule_example.override_logical_id("example")
        azurerm_network_manager_deployment_example =
        azurerm.network_manager_deployment.NetworkManagerDeployment(self, "example_8",
            configuration_ids=[
                cdktf.Token.as_string(azurerm_network_manager_security_admin_configuration_example.id)
            ],
            depends_on=[azurerm_network_manager_admin_rule_example],
            location="eastus",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id),
            scope_access="SecurityAdmin",
            triggers={
                "source_port_ranges": cdktf.Fn.join(",",
                    cdktf.Token.as_list(azurerm_network_manager_admin_rule_example.source_port_ranges))
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_deployment_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `network_manager_id` - (Required) Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.

* `location` - (Required) Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.

* `scope_access` - (Required) Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.

* `configuration_ids` - (Required) A list of Network Manager Configuration IDs which should be aligned with `scope_access`.

* `triggers` - (Optional) A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Network Manager Admin Rule Collection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 24 hours) Used when creating the Network Manager Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Network Manager Deployment.
* `update` - (Defaults to 24 hours) Used when updating the Network Manager Deployment.
* `delete` - (Defaults to 24 hour) Used when deleting the Network Manager Deployment.

## Import

Network Manager Deployment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_manager_deployment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/commit|eastus|Connectivity
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-74f915c0f2189c9c13d65b75eaa25d9a693e6042e1fe7e8f17d878a8d42c3947 -->