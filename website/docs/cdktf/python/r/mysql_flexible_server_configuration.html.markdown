---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mysql_flexible_server_configuration"
description: |-
  Sets a MySQL Flexible Server Configuration value on a MySQL Flexible Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mysql_flexible_server_configuration

Sets a MySQL Flexible Server Configuration value on a MySQL Flexible Server.

## Disclaimers

~> **Note:** Since this resource is provisioned by default, the Azure Provider will not check for the presence of an existing resource prior to attempting to create it.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_mysql_flexible_server_example =
        azurerm.mysql_flexible_server.MysqlFlexibleServer(self, "example_2",
            administrator_login="adminTerraform",
            administrator_password="H@Sh1CoR3!",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-fs",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Standard_D2ds_v4"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mysql_flexible_server_example.override_logical_id("example")
        azurerm_mysql_flexible_server_configuration_example =
        azurerm.mysql_flexible_server_configuration.MysqlFlexibleServerConfiguration(self, "example_3",
            name="interactive_timeout",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            server_name=cdktf.Token.as_string(azurerm_mysql_flexible_server_example.name),
            value="600"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mysql_flexible_server_configuration_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the MySQL Flexible Server Configuration, which needs [to be a valid MySQL configuration name](https://dev.mysql.com/doc/refman/5.7/en/server-configuration.html). Changing this forces a new resource to be created.

* `server_name` - (Required) Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the resource group in which the MySQL Flexible Server exists. Changing this forces a new resource to be created.

* `value` - (Required) Specifies the value of the MySQL Flexible Server Configuration. See the MySQL documentation for valid values. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MySQL Flexible Server Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the MySQL Flexible Server Configuration.
* `update` - (Defaults to 30 minutes) Used when updating the MySQL Flexible Server Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the MySQL Flexible Server Configuration.
* `delete` - (Defaults to 30 minutes) Used when deleting the MySQL Flexible Server Configuration.

## Import

MySQL Flexible Server Configurations can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mysql_flexible_server_configuration.interactive_timeout /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforMySQL/flexibleServers/flexibleServer1/configurations/interactive_timeout
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a8243af736f16db5efaf737bd34d6ff05fe7952f4db584c5f9871022e61a33b2 -->