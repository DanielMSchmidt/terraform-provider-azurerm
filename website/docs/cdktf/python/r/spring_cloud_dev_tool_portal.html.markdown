---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_dev_tool_portal"
description: |-
  Manages a Spring Cloud Dev Tool Portal.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_dev_tool_portal

-> **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

Manages a Spring Cloud Dev Tool Portal.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example"
        )
        azurerm_spring_cloud_service_example =
        azurerm.spring_cloud_service.SpringCloudService(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="E0"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_service_example.override_logical_id("example")
        azurerm_spring_cloud_dev_tool_portal_example =
        azurerm.spring_cloud_dev_tool_portal.SpringCloudDevToolPortal(self, "example_3",
            application_accelerator_enabled=True,
            application_live_view_enabled=True,
            name="default",
            public_network_access_enabled=True,
            spring_cloud_service_id=cdktf.Token.as_string(azurerm_spring_cloud_service_example.id),
            sso=SpringCloudDevToolPortalSso(
                client_id="example id",
                client_secret="example secret",
                metadata_url="https://www.example.com/metadata",
                scope=["openid", "profile", "email"]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_dev_tool_portal_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.

* `spring_cloud_service_id` - (Required) The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.

---

* `application_accelerator_enabled` - (Optional) Should the Accelerator plugin be enabled?

* `application_live_view_enabled` - (Optional) Should the Application Live View be enabled?

* `public_network_access_enabled` - (Optional) Is public network access enabled?

* `sso` - (Optional) A `sso` block as defined below.

---

A `sso` block supports the following:

* `client_id` - (Optional) Specifies the public identifier for the application.

* `client_secret` - (Optional) Specifies the secret known only to the application and the authorization server.

* `metadata_url` - (Optional) Specifies the URI of a JSON file with generic OIDC provider configuration.

* `scope` - (Optional) Specifies a list of specific actions applications can be allowed to do on a user's behalf.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported: 

* `id` - The ID of the Spring Cloud Dev Tool Portal.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Dev Tool Portal.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Dev Tool Portal.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Dev Tool Portal.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Dev Tool Portal.

## Import

Spring Cloud Dev Tool Portals can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_dev_tool_portal.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/Spring/service1/DevToolPortals/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-c4e8ba8b2ddb1cbf654bfe0aa3fb1f66481b76556adc44168472d2aaa021c84d -->