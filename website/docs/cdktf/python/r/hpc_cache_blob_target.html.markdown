---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_hpc_cache_blob_target"
description: |-
  Manages a Blob Target within a HPC Cache.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_hpc_cache_blob_target

Manages a Blob Target within a HPC Cache.

~> **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.azuread as azuread
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorgaccount",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_container_example =
        azurerm.storage_container.StorageContainer(self, "example_2",
            name="examplestoragecontainer",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_container_example.override_logical_id("example")
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_3",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplevn",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        data_azuread_service_principal_example =
        azuread.data_azuread_service_principal.DataAzureadServicePrincipal(self, "example_4",
            display_name="HPC Cache Resource Provider"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azuread_service_principal_example.override_logical_id("example")
        azurerm.role_assignment.RoleAssignment(self, "example_storage_account_contrib",
            principal_id=cdktf.Token.as_string(data_azuread_service_principal_example.object_id),
            role_definition_name="Storage Account Contributor",
            scope=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        azurerm.role_assignment.RoleAssignment(self, "example_storage_blob_data_contrib",
            principal_id=cdktf.Token.as_string(data_azuread_service_principal_example.object_id),
            role_definition_name="Storage Blob Data Contributor",
            scope=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_7",
            address_prefixes=["10.0.1.0/24"],
            name="examplesubnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_hpc_cache_example = azurerm.hpc_cache.HpcCache(self, "example_8",
            cache_size_in_gb=3072,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplehpccache",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Standard_2G",
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_hpc_cache_example.override_logical_id("example")
        azurerm_hpc_cache_blob_target_example =
        azurerm.hpc_cache_blob_target.HpcCacheBlobTarget(self, "example_9",
            cache_name=cdktf.Token.as_string(azurerm_hpc_cache_example.name),
            name="examplehpccblobtarget",
            namespace_path="/blob_storage",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_container_id=cdktf.Token.as_string(azurerm_storage_container_example.resource_manager_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_hpc_cache_blob_target_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `cache_name` - (Required) The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.

* `name` - (Required) The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.

* `namespace_path` - (Required) The client-facing file path of the HPC Cache Blob Target.

* `storage_container_id` - (Required) The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.

-> **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azurerm_storage_container` Data Source/Resource as `resource_manager_id`.

* `access_policy_name` - (Optional) The name of the access policy applied to this target. Defaults to `default`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the HPC Cache Blob Target.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the HPC Cache Blob Target.
* `read` - (Defaults to 5 minutes) Used when retrieving the HPC Cache Blob Target.
* `update` - (Defaults to 30 minutes) Used when updating the HPC Cache Blob Target.
* `delete` - (Defaults to 30 minutes) Used when deleting the HPC Cache Blob Target.

## Import

Blob Targets within an HPC Cache can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_hpc_cache_blob_target.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-7baa928773faf7fb0e1593c6e8aea7fcc86fa4bc0fa4e62c98f45875b601bd7c -->