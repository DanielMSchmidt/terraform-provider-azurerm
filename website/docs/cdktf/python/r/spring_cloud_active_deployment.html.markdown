---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_active_deployment"
description: |-
  Manages an Active Azure Spring Cloud Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_active_deployment

Manages an Active Azure Spring Cloud Deployment.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_spring_cloud_service_example =
        azurerm.spring_cloud_service.SpringCloudService(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-springcloud",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_service_example.override_logical_id("example")
        azurerm_spring_cloud_app_example =
        azurerm.spring_cloud_app.SpringCloudApp(self, "example_3",
            identity=SpringCloudAppIdentity(
                type="SystemAssigned"
            ),
            name="example-springcloudapp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            service_name=cdktf.Token.as_string(azurerm_spring_cloud_service_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_app_example.override_logical_id("example")
        azurerm_spring_cloud_java_deployment_example =
        azurerm.spring_cloud_java_deployment.SpringCloudJavaDeployment(self, "example_4",
            environment_variables={
                "Env": "Staging"
            },
            instance_count=2,
            jvm_options="-XX:+PrintGC",
            name="deploy1",
            quota=SpringCloudJavaDeploymentQuota(
                cpu="2",
                memory="4Gi"
            ),
            runtime_version="Java_11",
            spring_cloud_app_id=cdktf.Token.as_string(azurerm_spring_cloud_app_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_java_deployment_example.override_logical_id("example")
        azurerm_spring_cloud_active_deployment_example =
        azurerm.spring_cloud_active_deployment.SpringCloudActiveDeployment(self, "example_5",
            deployment_name=cdktf.Token.as_string(azurerm_spring_cloud_java_deployment_example.name),
            spring_cloud_app_id=cdktf.Token.as_string(azurerm_spring_cloud_app_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_active_deployment_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `spring_cloud_app_id` - (Required) Specifies the id of the Spring Cloud Application. Changing this forces a new resource to be created.

* `deployment_name` - (Required) Specifies the name of Spring Cloud Deployment which is going to be active.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Active Deployment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Active Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Active Deployment.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Active Deployment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Active Deployment.

## Import

Spring Cloud Active Deployment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_active_deployment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/service1/apps/app1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-be239697c50f0c1f7f3a0b0421a46584fb7c6e4341c238e24be107d524671e5f -->