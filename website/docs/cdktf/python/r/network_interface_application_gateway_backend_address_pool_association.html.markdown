---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_interface_application_gateway_backend_address_pool_association"
description: |-
  Manages the association between a Network Interface and a Application Gateway's Backend Address Pool.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_interface_application_gateway_backend_address_pool_association

Manages the association between a Network Interface and a Application Gateway's Backend Address Pool.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-network",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        backend_address_pool_name = "${" + azurerm_virtual_network_example.name + "}-beap"
        frontend_ip_configuration_name = "${" + azurerm_virtual_network_example.name + "}-feip"
        frontend_port_name = "${" + azurerm_virtual_network_example.name + "}-feport"
        http_setting_name = "${" + azurerm_virtual_network_example.name + "}-be-htst"
        listener_name = "${" + azurerm_virtual_network_example.name + "}-httplstn"
        request_routing_rule_name = "${" + azurerm_virtual_network_example.name + "}-rqrt"
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_2",
            allocation_method="Dynamic",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-pip",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm.subnet.Subnet(self, "backend",
            address_prefixes=["10.0.2.0/24"],
            name="backend",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        azurerm_subnet_frontend = azurerm.subnet.Subnet(self, "frontend",
            address_prefixes=["10.0.1.0/24"],
            name="frontend",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        azurerm_application_gateway_network =
        azurerm.application_gateway.ApplicationGateway(self, "network",
            backend_address_pool=[ApplicationGatewayBackendAddressPool(
                name=backend_address_pool_name
            )
            ],
            backend_http_settings=[ApplicationGatewayBackendHttpSettings(
                cookie_based_affinity="Disabled",
                name=http_setting_name,
                port=80,
                protocol="Http",
                request_timeout=1
            )
            ],
            frontend_ip_configuration=[ApplicationGatewayFrontendIpConfiguration(
                name=frontend_ip_configuration_name,
                public_ip_address_id=cdktf.Token.as_string(azurerm_public_ip_example.id)
            )
            ],
            frontend_port=[ApplicationGatewayFrontendPort(
                name=frontend_port_name,
                port=80
            )
            ],
            gateway_ip_configuration=[ApplicationGatewayGatewayIpConfiguration(
                name="my-gateway-ip-configuration",
                subnet_id=cdktf.Token.as_string(azurerm_subnet_frontend.id)
            )
            ],
            http_listener=[ApplicationGatewayHttpListener(
                frontend_ip_configuration_name=frontend_ip_configuration_name,
                frontend_port_name=frontend_port_name,
                name=listener_name,
                protocol="Http"
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-appgateway",
            request_routing_rule=[ApplicationGatewayRequestRoutingRule(
                backend_address_pool_name=backend_address_pool_name,
                backend_http_settings_name=http_setting_name,
                http_listener_name=listener_name,
                name=request_routing_rule_name,
                priority=25,
                rule_type="Basic"
            )
            ],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku=ApplicationGatewaySku(
                capacity=2,
                name="Standard_Small",
                tier="Standard"
            )
        )
        azurerm_network_interface_example =
        azurerm.network_interface.NetworkInterface(self, "example_6",
            ip_configuration=[NetworkInterfaceIpConfiguration(
                name="testconfiguration1",
                private_ip_address_allocation="Dynamic",
                subnet_id=cdktf.Token.as_string(azurerm_subnet_frontend.id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-nic",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_example.override_logical_id("example")
        azurerm_network_interface_application_gateway_backend_address_pool_association_example =
        azurerm.network_interface_application_gateway_backend_address_pool_association.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(self, "example_7",
            backend_address_pool_id=cdktf.Token.as_string(
                cdktf.property_access(
                    cdktf.Fn.tolist(azurerm_application_gateway_network.backend_address_pool), ["0", "id"])),
            ip_configuration_name="testconfiguration1",
            network_interface_id=cdktf.Token.as_string(azurerm_network_interface_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_application_gateway_backend_address_pool_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `network_interface_id` - (Required) The ID of the Network Interface. Changing this forces a new resource to be created.

* `ip_configuration_name` - (Required) The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.

* `backend_address_pool_id` - (Required) The ID of the Application Gateway's Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Application Gateway Backend Address Pool.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the association between the Network Interface and the Application Gateway Backend Address Pool.
* `update` - (Defaults to 30 minutes) Used when updating the association between the Network Interface and the Application Gateway Backend Address Pool.
* `read` - (Defaults to 5 minutes) Used when retrieving the association between the Network Interface and the Application Gateway Backend Address Pool.
* `delete` - (Defaults to 30 minutes) Used when deleting the association between the Network Interface and the Application Gateway Backend Address Pool.

## Import

Associations between Network Interfaces and Application Gateway Backend Address Pools can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_interface_application_gateway_backend_address_pool_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/applicationGateways/gateway1/backendAddressPools/pool1
```

-> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{backendAddressPoolId}`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-db0bff3acc5efa702c703579a428cd95f735e7827989cdff11d1c7c1c5aa028e -->