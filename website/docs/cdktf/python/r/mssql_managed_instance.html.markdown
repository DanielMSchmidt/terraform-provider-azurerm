---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_managed_instance"
description: |-
  Manages a Microsoft SQL Azure Managed Instance.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_managed_instance

Manages a Microsoft SQL Azure Managed Instance.

~> **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="database-rg"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="vnet-mi",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_network_security_group_example =
        azurerm.network_security_group.NetworkSecurityGroup(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="mi-security-group",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_security_group_example.override_logical_id("example")
        azurerm.network_security_rule.NetworkSecurityRule(self, "allow_health_probe_inbound",
            access="Allow",
            destination_address_prefix="*",
            destination_port_range="*",
            direction="Inbound",
            name="allow_health_probe_inbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=300,
            protocol="*",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="AzureLoadBalancer",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "allow_management_inbound",
            access="Allow",
            destination_address_prefix="*",
            destination_port_ranges=["9000", "9003", "1438", "1440", "1452"],
            direction="Inbound",
            name="allow_management_inbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=106,
            protocol="Tcp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="*",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "allow_management_outbound",
            access="Allow",
            destination_address_prefix="*",
            destination_port_ranges=["80", "443", "12000"],
            direction="Outbound",
            name="allow_management_outbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=102,
            protocol="Tcp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="*",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "allow_misubnet_inbound",
            access="Allow",
            destination_address_prefix="*",
            destination_port_range="*",
            direction="Inbound",
            name="allow_misubnet_inbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=200,
            protocol="*",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="10.0.0.0/24",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "allow_misubnet_outbound",
            access="Allow",
            destination_address_prefix="*",
            destination_port_range="*",
            direction="Outbound",
            name="allow_misubnet_outbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=200,
            protocol="*",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="10.0.0.0/24",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "allow_tds_inbound",
            access="Allow",
            destination_address_prefix="*",
            destination_port_range="1433",
            direction="Inbound",
            name="allow_tds_inbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=1000,
            protocol="Tcp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="VirtualNetwork",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "deny_all_inbound",
            access="Deny",
            destination_address_prefix="*",
            destination_port_range="*",
            direction="Inbound",
            name="deny_all_inbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=4096,
            protocol="*",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="*",
            source_port_range="*"
        )
        azurerm.network_security_rule.NetworkSecurityRule(self, "deny_all_outbound",
            access="Deny",
            destination_address_prefix="*",
            destination_port_range="*",
            direction="Outbound",
            name="deny_all_outbound",
            network_security_group_name=cdktf.Token.as_string(azurerm_network_security_group_example.name),
            priority=4096,
            protocol="*",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_address_prefix="*",
            source_port_range="*"
        )
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_11",
            address_prefixes=["10.0.0.0/24"],
            delegation=[SubnetDelegation(
                name="managedinstancedelegation",
                service_delegation=SubnetDelegationServiceDelegation(
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action", "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action", "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action"
                    ],
                    name="Microsoft.Sql/managedInstances"
                )
            )
            ],
            name="subnet-mi",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_subnet_network_security_group_association_example =
        azurerm.subnet_network_security_group_association.SubnetNetworkSecurityGroupAssociation(self, "example_12",
            network_security_group_id=cdktf.Token.as_string(azurerm_network_security_group_example.id),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_network_security_group_association_example.override_logical_id("example")
        azurerm_route_table_example = azurerm.route_table.RouteTable(self, "example_13",
            depends_on=[azurerm_subnet_example],
            disable_bgp_route_propagation=False,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="routetable-mi",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_route_table_example.override_logical_id("example")
        azurerm_subnet_route_table_association_example =
        azurerm.subnet_route_table_association.SubnetRouteTableAssociation(self, "example_14",
            route_table_id=cdktf.Token.as_string(azurerm_route_table_example.id),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_route_table_association_example.override_logical_id("example")
        azurerm_mssql_managed_instance_example =
        azurerm.mssql_managed_instance.MssqlManagedInstance(self, "example_15",
            administrator_login="mradministrator",
            administrator_login_password="thisIsDog11",
            depends_on=[azurerm_subnet_network_security_group_association_example, azurerm_subnet_route_table_association_example
            ],
            license_type="BasePrice",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="managedsqlinstance",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Gen5",
            storage_size_in_gb=32,
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id),
            vcores=4
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_managed_instance_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `administrator_login` - (Required) The administrator login name for the new SQL Managed Instance. Changing this forces a new resource to be created.

* `administrator_login_password` - (Required) The password associated with the `administrator_login` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)

* `license_type` - (Required) What type of license the Managed Instance will use. Possible values are `LicenseIncluded` and `BasePrice`.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `name` - (Required) The name of the SQL Managed Instance. This needs to be globally unique within Azure. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the resource group in which to create the SQL Managed Instance. Changing this forces a new resource to be created.

* `sku_name` - (Required) Specifies the SKU Name for the SQL Managed Instance. Valid values include `GP_Gen4`, `GP_Gen5`, `GP_Gen8IM`, `GP_Gen8IH`, `BC_Gen4`, `BC_Gen5`, `BC_Gen8IM` or `BC_Gen8IH`.

* `storage_size_in_gb` - (Required) Maximum storage space for the SQL Managed instance. This should be a multiple of 32 (GB).

* `subnet_id` - (Required) The subnet resource id that the SQL Managed Instance will be associated with. Changing this forces a new resource to be created.

* `vcores` - (Required) Number of cores that should be assigned to the SQL Managed Instance. Values can be `8`, `16`, or `24` for Gen4 SKUs, or `4`, `8`, `16`, `24`, `32`, `40`, `64`, or `80` for Gen5 SKUs.

* `collation` - (Optional) Specifies how the SQL Managed Instance will be collated. Default value is `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.

* `dns_zone_partner_id` - (Optional) The ID of the SQL Managed Instance which will share the DNS zone. This is a prerequisite for creating an `azurerm_sql_managed_instance_failover_group`. Setting this after creation forces a new resource to be created.

* `identity` - (Optional) An `identity` block as defined below.

* `maintenance_configuration_name` - (Optional) The name of the Public Maintenance Configuration window to apply to the SQL Managed Instance. Valid values include `SQL_Default` or an Azure Location in the format `SQL_{Location}_MI_{Size}`(for example `SQL_EastUS_MI_1`). Defaults to `SQL_Default`.

* `minimum_tls_version` - (Optional) The Minimum TLS Version. Default value is `1.2` Valid values include `1.0`, `1.1`, `1.2`.

* `proxy_override` - (Optional) Specifies how the SQL Managed Instance will be accessed. Default value is `Default`. Valid values include `Default`, `Proxy`, and `Redirect`.

* `public_data_endpoint_enabled` - (Optional) Is the public data endpoint enabled? Default value is `false`.

* `storage_account_type` - (Optional) Specifies the storage account type used to store backups for this database. Changing this forces a new resource to be created. Possible values are `GRS`, `LRS` and `ZRS`. The default value is `GRS`.

* `tags` - (Optional) A mapping of tags to assign to the resource.

* `timezone_id` - (Optional) The TimeZone ID that the SQL Managed Instance will be operating in. Default value is `UTC`. Changing this forces a new resource to be created.

---

An `identity` block supports the following:

* `type` - (Required) Specifies the type of Managed Service Identity that should be configured on this SQL Managed Instance. Possible values are `SystemAssigned`, `UserAssigned`.

* `identity_ids` - (Optional) Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Managed Instance. Required when `type` is set to `UserAssigned`.

~> The assigned `principal_id` and `tenant_id` can be retrieved after the identity `type` has been set to `SystemAssigned` and SQL Managed Instance has been created. 

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The SQL Managed Instance ID.

* `fqdn` - The fully qualified domain name of the Azure Managed SQL Instance

---

An `identity` block exports the following:

* `principal_id` - The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.

* `tenant_id` - The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.

-> You can access the Principal ID via `azurerm_mssql_managed_instance.example.identity.0.principal_id` and the Tenant ID via `azurerm_mssql_managed_instance.example.identity.0.tenant_id`

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 24 hours) Used when creating the Microsoft SQL Managed Instance.
* `update` - (Defaults to 24 hours) Used when updating the Microsoft SQL Managed Instance.
* `read` - (Defaults to 5 minutes) Used when retrieving the Microsoft SQL Managed Instance.
* `delete` - (Defaults to 24 hours) Used when deleting the Microsoft SQL Managed Instance.

## Import

Microsoft SQL Managed Instances can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_managed_instance.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/managedInstances/myserver
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-85f383df0f21050c8b070a13dcd271a31ddd57793f487ba1c218db73823c78ee -->