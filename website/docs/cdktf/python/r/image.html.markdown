---
subcategory: "Compute"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_image"
description: |-
  Manages a custom virtual machine image that can be used to create virtual machines.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_image

Manages a custom virtual machine image that can be used to create virtual machines.

## Example Usage Creating from VHD

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_network_interface_example =
        azurerm.network_interface.NetworkInterface(self, "example_1",
            ip_configuration=[NetworkInterfaceIpConfiguration(
                name="testconfiguration1",
                private_ip_address_allocation="Static"
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="test-nic",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_example.override_logical_id("example")
        azurerm_virtual_machine_example =
        azurerm.virtual_machine.VirtualMachine(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctestvm",
            network_interface_ids=[
                cdktf.Token.as_string(azurerm_network_interface_example.id)
            ],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_os_disk=VirtualMachineStorageOsDisk(
                create_option="FromImage",
                name="myosdisk1"
            ),
            vm_size="Standard_D1_v2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_machine_example.override_logical_id("example")
        azurerm_image_example = azurerm.image.Image(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctest",
            os_disk=ImageOsDisk(
                blob_uri=cdktf.Token.as_string(
                    cdktf.property_access(azurerm_virtual_machine_example.storage_os_disk, ["0", "vhd_uri"
                    ])),
                os_state="Generalized",
                os_type="Linux",
                size_gb=30
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_image_example.override_logical_id("example")
```

## Example Usage Creating from Virtual Machine (VM must be generalized beforehand)

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_network_interface_example =
        azurerm.network_interface.NetworkInterface(self, "example_1",
            ip_configuration=[NetworkInterfaceIpConfiguration(
                name="testconfiguration1",
                private_ip_address_allocation="Static"
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="test-nic",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_example.override_logical_id("example")
        azurerm_virtual_machine_example =
        azurerm.virtual_machine.VirtualMachine(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctestvm",
            network_interface_ids=[
                cdktf.Token.as_string(azurerm_network_interface_example.id)
            ],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_os_disk=VirtualMachineStorageOsDisk(
                create_option="FromImage",
                name="myosdisk1"
            ),
            vm_size="Standard_D1_v2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_machine_example.override_logical_id("example")
        azurerm_image_example = azurerm.image.Image(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="acctest",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            source_virtual_machine_id=cdktf.Token.as_string(azurerm_virtual_machine_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_image_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the image. Changing this forces a new resource to be created.
* `resource_group_name` - (Required) The name of the resource group in which to create. Changing this forces a new resource to be created.
    the image. Changing this forces a new resource to be created.
* `location` - (Required) Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
    Changing this forces a new resource to be created.
* `source_virtual_machine_id` - (Optional) The Virtual Machine ID from which to create the image.
* `os_disk` - (Optional) One or more `os_disk` elements as defined below. Changing this forces a new resource to be created.
* `data_disk` - (Optional) One or more `data_disk` elements as defined below.
* `tags` - (Optional) A mapping of tags to assign to the resource.
* `zone_resilient` - (Optional) Is zone resiliency enabled? Defaults to `false`. Changing this forces a new resource to be created.
* `hyper_v_generation` - (Optional) The HyperVGenerationType of the VirtualMachine created from the image as `V1`, `V2`. The default is `V1`. Changing this forces a new resource to be created.

~> **Note:** `zone_resilient` can only be set to `true` if the image is stored in a region that supports availability zones.

---

The `os_disk` block supports the following:

* `os_type` - (Optional) Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
* `os_state` - (Optional) Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
* `managed_disk_id` - (Optional) Specifies the ID of the managed disk resource that you want to use to create the image.
* `blob_uri` - (Optional) Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
* `caching` - (Optional) Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
* `size_gb` - (Optional) Specifies the size of the image to be created. The target size can't be smaller than the source size.

---

The `data_disk` block supports the following:

* `lun` - (Optional) Specifies the logical unit number of the data disk.
* `managed_disk_id` - (Optional) Specifies the ID of the managed disk resource that you want to use to create the image. Changing this forces a new resource to be created.
* `blob_uri` - (Optional) Specifies the URI in Azure storage of the blob that you want to use to create the image.
* `caching` - (Optional) Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
* `size_gb` - (Optional) Specifies the size of the image to be created. The target size can't be smaller than the source size.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Image.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 90 minutes) Used when creating the Image.
* `update` - (Defaults to 90 minutes) Used when updating the Image.
* `read` - (Defaults to 5 minutes) Used when retrieving the Image.
* `delete` - (Defaults to 90 minutes) Used when deleting the Image.

## Import

Images can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_image.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/images/image1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0737ecfab04a47989e1445e2c71cde5a66df5db22a236ff6705083870eaf6903 -->