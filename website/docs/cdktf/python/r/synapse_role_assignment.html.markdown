---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_role_assignment"
description: |-
  Manages a Synapse Role Assignment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_role_assignment

Manages a Synapse Role Assignment.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            is_hns_enabled=cdktf.Token.as_boolean("true"),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_2",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_3",
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_synapse_firewall_rule_example =
        azurerm.synapse_firewall_rule.SynapseFirewallRule(self, "example_5",
            end_ip_address="255.255.255.255",
            name="AllowAll",
            start_ip_address="0.0.0.0",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_firewall_rule_example.override_logical_id("example")
        azurerm_synapse_role_assignment_example =
        azurerm.synapse_role_assignment.SynapseRoleAssignment(self, "example_6",
            depends_on=[azurerm_synapse_firewall_rule_example],
            principal_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            role_name="Synapse SQL Administrator",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_role_assignment_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `synapse_workspace_id` - (Optional) The Synapse Workspace which the Synapse Role Assignment applies to. Changing this forces a new resource to be created.

* `synapse_spark_pool_id` - (Optional) The Synapse Spark Pool which the Synapse Role Assignment applies to. Changing this forces a new resource to be created.

-> **NOTE:** A Synapse firewall rule including local IP is needed to allow access. Only one of `synapse_workspace_id`, `synapse_spark_pool_id` must be set.

* `role_name` - (Required) The Role Name of the Synapse Built-In Role. Changing this forces a new resource to be created.

-> **NOTE:** Currently, the Synapse built-in roles are `Apache Spark Administrator`, `Synapse Administrator`, `Synapse Artifact Publisher`, `Synapse Artifact User`, `Synapse Compute Operator`, `Synapse Contributor`, `Synapse Credential User`, `Synapse Linked Data Manager`, `Synapse Monitoring Operator`, `Synapse SQL Administrator` and `Synapse User`.

-> **NOTE:** Old roles are still supported: `Workspace Admin`, `Apache Spark Admin`, `Sql Admin`. These values will be removed in the next Major Version 3.0.

* `principal_id` - (Required) The ID of the Principal (User, Group or Service Principal) to assign the Synapse Role Definition to. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Synapse Role Assignment ID.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Role Assignment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Role Assignment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Role Assignment.

## Import

Synapse Role Assignment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_role_assignment.example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1|000000000000"
```

-> **NOTE:** This ID is specific to Terraform - and is of the format `{synapseScope}|{synapseRoleAssignmentId}`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-ac1ee423f4be057336856930dda98e361b5ed791864598efa3603cce2e67662c -->