---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_managed_database"
description: |-
  Manages an Azure SQL Azure Managed Database.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_managed_database

Manages an Azure SQL Azure Managed Database for a SQL Managed Instance.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_2",
            address_prefixes=["10.0.2.0/24"],
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_mssql_managed_instance_example =
        azurerm.mssql_managed_instance.MssqlManagedInstance(self, "example_3",
            administrator_login="msadministrator",
            administrator_login_password="thisIsDog11",
            license_type="BasePrice",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="managedsqlinstance",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Gen5",
            storage_size_in_gb=32,
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id),
            vcores=4
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_managed_instance_example.override_logical_id("example")
        azurerm_mssql_managed_database_example =
        azurerm.mssql_managed_database.MssqlManagedDatabase(self, "example_4",
            managed_instance_id=cdktf.Token.as_string(azurerm_mssql_managed_instance_example.id),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_managed_database_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Managed Database to create. Changing this forces a new resource to be created.

* `managed_instance_id` - (Required) The ID of the Azure SQL Managed Instance on which to create this Managed Database. Changing this forces a new resource to be created.

* `long_term_retention_policy` - (Optional) A `long_term_retention_policy` block as defined below.

* `short_term_retention_days` - (Optional) The backup retention period in days. This is how many days Point-in-Time Restore will be supported.

---

A `long_term_retention_policy` block supports the following:

* `weekly_retention` - (Optional) The weekly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 520 weeks. e.g. `P1Y`, `P1M`, `P1W` or `P7D`.
* `monthly_retention` - (Optional) The monthly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 120 months. e.g. `P1Y`, `P1M`, `P4W` or `P30D`.
* `yearly_retention` - (Optional) The yearly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 10 years. e.g. `P1Y`, `P12M`, `P52W` or `P365D`.
* `week_of_year` - (Optional) The week of year to take the yearly backup. Value has to be between `1` and `52`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Azure SQL Managed Database ID.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `read` - (Defaults to 5 minutes) Used when retrieving the Mssql Managed Database.
* `create` - (Defaults to 30 minutes) Used when creating the Mssql Managed Database.
* `update` - (Defaults to 30 minutes) Used when updating the Mssql Managed Database.
* `delete` - (Defaults to 30 minutes) Used when deleting the Mssql Managed Database.

## Import

SQL Managed Databases can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_managed_database.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/managedInstances/myserver/databases/mydatabase
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a702c5be99845ed833b5eb2443bfcede70ef98c36a37be0b82b841e7b73916b2 -->