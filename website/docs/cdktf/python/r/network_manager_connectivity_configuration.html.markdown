---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_manager_connectivity_configuration"
description: |-
  Manages a Network Manager Connectivity Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_manager_connectivity_configuration

Manages a Network Manager Connectivity Configuration.

-> **Note:** The `azurerm_network_manager_connectivity_configuration` deployment may modify or delete existing Network Peering resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            flow_timeout_in_minutes=10,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-net",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        data_azurerm_subscription_current =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "current")
        azurerm_network_manager_example =
        azurerm.network_manager.NetworkManager(self, "example_3",
            description="example network manager",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-network-manager",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            scope=NetworkManagerScope(
                subscription_ids=[
                    cdktf.Token.as_string(data_azurerm_subscription_current.id)
                ]
            ),
            scope_accesses=["Connectivity", "SecurityAdmin"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_example.override_logical_id("example")
        azurerm_network_manager_network_group_example =
        azurerm.network_manager_network_group.NetworkManagerNetworkGroup(self, "example_4",
            name="example-group",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_network_group_example.override_logical_id("example")
        azurerm_network_manager_connectivity_configuration_example =
        azurerm.network_manager_connectivity_configuration.NetworkManagerConnectivityConfiguration(self, "example_5",
            applies_to_group=[NetworkManagerConnectivityConfigurationAppliesToGroup(
                group_connectivity="DirectlyConnected",
                network_group_id=cdktf.Token.as_string(azurerm_network_manager_network_group_example.id)
            )
            ],
            connectivity_topology="HubAndSpoke",
            hub=NetworkManagerConnectivityConfigurationHub(
                resource_id=cdktf.Token.as_string(azurerm_virtual_network_example.id),
                resource_type="Microsoft.Network/virtualNetworks"
            ),
            name="example-connectivity-conf",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_connectivity_configuration_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) Specifies the name which should be used for this Network Manager Connectivity Configuration. Changing this forces a new Network Manager Connectivity Configuration to be created.

* `network_manager_id` - (Required) Specifies the ID of the Network Manager. Changing this forces a new Network Manager Connectivity Configuration to be created.

* `applies_to_group` - (Required) An `applies_to_group` block as defined below.

* `connectivity_topology` - (Required) Specifies the connectivity topology type. Possible values are `HubAndSpoke` and `Mesh`.

* `delete_existing_peering_enabled` - (Optional) Indicates whether to remove current existing Virtual Network Peering in the Connectivity Configuration affected scope. Possible values are `true` and `false`.

* `description` - (Optional) A description of the Connectivity Configuration.

* `global_mesh_enabled` - (Optional) Indicates whether to global mesh is supported. Possible values are `true` and `false`. 
* `hub` - (Optional) A `hub` block as defined below.
 
---

An `applies_to_group` block supports the following:

* `group_connectivity` - (Required) Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.

* `network_group_id` - (Required) Specifies the resource ID of Network Group which the configuration applies to.
 
* `global_mesh_enabled` - (Optional) Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.

-> **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`. 

* `use_hub_gateway` - (Optional) Indicates whether the hub gateway is used. Possible values are `true` and `false`.

---

A `hub` block supports the following:

* `resource_id` - (Required) Specifies the resource ID used as hub in Hub And Spoke topology.

* `resource_type` - (Required) Specifies the resource Type used as hub in Hub And Spoke topology.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Network Manager Connectivity Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Network Manager Connectivity Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the Network Manager Connectivity Configuration.
* `update` - (Defaults to 30 minutes) Used when updating the Network Manager Connectivity Configuration.
* `delete` - (Defaults to 30 minutes) Used when deleting the Network Manager Connectivity Configuration.

## Import

Network Manager Connectivity Configuration can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_manager_connectivity_configuration.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/connectivityConfigurations/configuration1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a615fa099a38a4c2cf824c26e8a32179afba613636c359686cfdd24cdb17055b -->