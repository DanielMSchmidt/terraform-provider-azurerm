---
subcategory: "App Service (Web Apps)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_web_app_hybrid_connection"
description: |-
  Manages a Web App Hybrid Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_web_app_hybrid_connection

Manages a Web App Hybrid Connection.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-rg"
        )
        azurerm_service_plan_example = azurerm.service_plan.ServicePlan(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-plan",
            os_type="Windows",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="S1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_service_plan_example.override_logical_id("example")
        azurerm_windows_web_app_example = azurerm.windows_web_app.WindowsWebApp(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-web-app",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            service_plan_id=cdktf.Token.as_string(azurerm_service_plan_example.id),
            site_config=WindowsWebAppSiteConfig()
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_windows_web_app_example.override_logical_id("example")
        azurerm_relay_namespace_example =
        azurerm.relay_namespace.RelayNamespace(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-relay",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Standard"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_relay_namespace_example.override_logical_id("example")
        azurerm_relay_hybrid_connection_example =
        azurerm.relay_hybrid_connection.RelayHybridConnection(self, "example_5",
            name="examplerhc1",
            relay_namespace_name=cdktf.Token.as_string(azurerm_relay_namespace_example.name),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_relay_hybrid_connection_example.override_logical_id("example")
        azurerm_web_app_hybrid_connection_example =
        azurerm.web_app_hybrid_connection.WebAppHybridConnection(self, "example_6",
            hostname="myhostname.example",
            port=8081,
            relay_id=cdktf.Token.as_string(azurerm_relay_hybrid_connection_example.id),
            web_app_id=cdktf.Token.as_string(azurerm_windows_web_app_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_web_app_hybrid_connection_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `web_app_id` - (Required) The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.

* `relay_id` - (Required) The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.

* `hostname` - (Required) The hostname of the endpoint.

* `port` - (Required) The port to use for the endpoint.

---

* `send_key_name` - (Optional) The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Web App Hybrid Connection

* `namespace_name` - The name of the Relay Namespace.

* `relay_name` - The name of the Relay in use.

* `send_key_value` - The Primary Access Key for the `send_key_name`

* `service_bus_namespace` - The Service Bus Namespace.

* `service_bus_suffix` - The suffix for the endpoint.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Web App Hybrid Connection.
* `update` - (Defaults to 30 minutes) Used when updating the Web App Hybrid Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Web App Hybrid Connection.
* `delete` - (Defaults to 5 minutes) Used when deleting the Web App Hybrid Connection.

## Import

a Web App Hybrid Connection can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_web_app_hybrid_connection.example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/hybridConnectionNamespaces/hybridConnectionNamespace1/relays/relay1"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ba3d434395ab42635a5d368eed83de755e5cc8177e12434a1c0dcbc25bbe2aff -->