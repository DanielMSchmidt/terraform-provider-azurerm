---
subcategory: "Databricks"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_databricks_virtual_network_peering"
description: |-
  Manages a Databricks Virtual Network Peering
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_databricks_virtual_network_peering

Manages a Databricks Virtual Network Peering

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_remote =
        azurerm.virtual_network.VirtualNetwork(self, "remote",
            address_space=["10.0.1.0/24"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="remote-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        azurerm_databricks_workspace_example =
        azurerm.databricks_workspace.DatabricksWorkspace(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-workspace",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="standard"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_databricks_workspace_example.override_logical_id("example")
        azurerm_databricks_virtual_network_peering_example =
        azurerm.databricks_virtual_network_peering.DatabricksVirtualNetworkPeering(self, "example_3",
            allow_virtual_network_access=True,
            name="databricks-vnet-peer",
            remote_address_space_prefixes=cdktf.Token.as_list(azurerm_virtual_network_remote.address_space),
            remote_virtual_network_id=cdktf.Token.as_string(azurerm_virtual_network_remote.id),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            workspace_id=cdktf.Token.as_string(azurerm_databricks_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_databricks_virtual_network_peering_example.override_logical_id("example")
        azurerm_virtual_network_peering_remote =
        azurerm.virtual_network_peering.VirtualNetworkPeering(self, "remote_4",
            allow_virtual_network_access=True,
            name="peer-to-databricks",
            remote_virtual_network_id=cdktf.Token.as_string(azurerm_databricks_virtual_network_peering_example.virtual_network_id),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_remote.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_peering_remote.override_logical_id("remote")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.

* `workspace_id` - (Required) The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.

* `address_space_prefixes` - (Required) A list of address blocks reserved for this virtual network in CIDR notation. Changing this forces a new resource to be created.

* `remote_address_space_prefixes` - (Required) A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.

* `remote_virtual_network_id` - (Required) The ID of the remote virtual network. Changing this forces a new resource to be created.

~> **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.

* `allow_virtual_network_access` - (Optional) Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.

* `allow_forwarded_traffic` - (Optional) Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.

* `allow_gateway_transit` - (Optional) Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.

* `use_remote_gateways` - (Optional) Can remote gateways be used on the Databricks virtual network? Defaults to `false`.

~> **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.

* `virtual_network_id` - The ID of the internal Virtual Network used by the DataBricks Workspace.

~> **NOTE:** The `virtual_network_id` field is the value you must supply to the `azurerm_virtual_network_peering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Databricks Virtual Network Peering.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Databricks Virtual Network Peering.
* `update` - (Defaults to 30 minutes) Used when updating the Databricks Virtual Network Peering.
* `read` - (Defaults to 5 minutes) Used when retrieving the Databricks Virtual Network Peering.
* `delete` - (Defaults to 30 minutes) Used when deleting the Databricks Virtual Network Peering.

## Import

Databrick Virtual Network Peerings can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_databricks_virtual_network_peering.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1/virtualNetworkPeerings/peering1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5873013a23f5abfe2a092231d588515355ea7d7280c1d2af483de6b6b7678bcb -->