---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_certificate"
description: |-
  Manages an Azure Spring Cloud Certificate.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_certificate

Manages an Azure Spring Cloud Certificate.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.azuread as azuread
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_spring_cloud_service_example =
        azurerm.spring_cloud_service.SpringCloudService(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-springcloud",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_service_example.override_logical_id("example")
        data_azuread_service_principal_example =
        azuread.data_azuread_service_principal.DataAzureadServicePrincipal(self, "example_3",
            display_name="Azure Spring Cloud Resource Provider"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azuread_service_principal_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_5",
            access_policy=[KeyVaultAccessPolicy(
                certificate_permissions=["Create", "Delete", "Get", "Update"],
                object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
                secret_permissions=["Set"],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            ), KeyVaultAccessPolicy(
                certificate_permissions=["Get", "List"],
                object_id=cdktf.Token.as_string(data_azuread_service_principal_example.object_id),
                secret_permissions=["Get", "List"],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="keyvaultcertexample",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_certificate_example =
        azurerm.key_vault_certificate.KeyVaultCertificate(self, "example_6",
            certificate_policy=KeyVaultCertificateCertificatePolicy(
                issuer_parameters=KeyVaultCertificateCertificatePolicyIssuerParameters(
                    name="Self"
                ),
                key_properties=KeyVaultCertificateCertificatePolicyKeyProperties(
                    exportable=True,
                    key_size=2048,
                    key_type="RSA",
                    reuse_key=True
                ),
                lifetime_action=[KeyVaultCertificateCertificatePolicyLifetimeAction(
                    action=KeyVaultCertificateCertificatePolicyLifetimeActionAction(
                        action_type="AutoRenew"
                    ),
                    trigger=KeyVaultCertificateCertificatePolicyLifetimeActionTrigger(
                        days_before_expiry=30
                    )
                )
                ],
                secret_properties=KeyVaultCertificateCertificatePolicySecretProperties(
                    content_type="application/x-pkcs12"
                ),
                x509_certificate_properties=KeyVaultCertificateCertificatePolicyX509CertificateProperties(
                    key_usage=["cRLSign", "dataEncipherment", "digitalSignature", "keyAgreement", "keyCertSign", "keyEncipherment"
                    ],
                    subject="CN=contoso.com",
                    validity_in_months=12
                )
            ),
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="cert-example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_certificate_example.override_logical_id("example")
        azurerm_spring_cloud_certificate_example =
        azurerm.spring_cloud_certificate.SpringCloudCertificate(self, "example_7",
            exclude_private_key=True,
            key_vault_certificate_id=cdktf.Token.as_string(azurerm_key_vault_certificate_example.id),
            name="example-scc",
            resource_group_name=cdktf.Token.as_string(azurerm_spring_cloud_service_example.resource_group_name),
            service_name=cdktf.Token.as_string(azurerm_spring_cloud_service_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_certificate_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.

* `service_name` - (Required) Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.

* `exclude_private_key` - (Optional) Specifies whether the private key should be excluded from the Key Vault Certificate. Defaults to `false`.

* `key_vault_certificate_id` - (Optional) Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.

* `certificate_content` - (Optional) The content of uploaded certificate. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Certificate.

* `thumbprint` - The thumbprint of the Spring Cloud certificate.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Certificate.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Certificate.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Certificate.

## Import

Spring Cloud Certificate can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_certificate.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/spring1/certificates/cert1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8aa045b70a2239a871d7b7a5c25766c0efc434f6da3b78a396e7f1ef1a9b5676 -->