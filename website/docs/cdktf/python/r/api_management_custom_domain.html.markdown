---
subcategory: "API Management"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_api_management_custom_domain"
description: |-
  Manages a API Management Custom Domain.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_api_management_custom_domain

Manages a API Management Custom Domain.

## Disclaimers

~> **Note:** It's possible to define Custom Domains both within [the `azurerm_api_management` resource](api_management.html) via the `hostname_configurations` block and by using this resource. However it's not possible to use both methods to manage Custom Domains within an API Management Service, since there will be conflicts.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_key_vault_example =
        azurerm.data_azurerm_key_vault.DataAzurermKeyVault(self, "example_2",
            name="mykeyvault",
            resource_group_name="some-resource-group"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azurerm_key_vault_example.override_logical_id("example")
        azurerm_api_management_example = azurerm.api_management.ApiManagement(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-apim",
            publisher_email="pub1@email.com",
            publisher_name="pub1",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Developer_1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_api_management_example.override_logical_id("example")
        azurerm_key_vault_certificate_example =
        azurerm.key_vault_certificate.KeyVaultCertificate(self, "example_4",
            certificate_policy=KeyVaultCertificateCertificatePolicy(
                issuer_parameters=KeyVaultCertificateCertificatePolicyIssuerParameters(
                    name="Self"
                ),
                key_properties=KeyVaultCertificateCertificatePolicyKeyProperties(
                    exportable=True,
                    key_size=2048,
                    key_type="RSA",
                    reuse_key=True
                ),
                lifetime_action=[KeyVaultCertificateCertificatePolicyLifetimeAction(
                    action=KeyVaultCertificateCertificatePolicyLifetimeActionAction(
                        action_type="AutoRenew"
                    ),
                    trigger=KeyVaultCertificateCertificatePolicyLifetimeActionTrigger(
                        days_before_expiry=30
                    )
                )
                ],
                secret_properties=KeyVaultCertificateCertificatePolicySecretProperties(
                    content_type="application/x-pkcs12"
                ),
                x509_certificate_properties=KeyVaultCertificateCertificatePolicyX509CertificateProperties(
                    key_usage=["cRLSign", "dataEncipherment", "digitalSignature", "keyAgreement", "keyCertSign", "keyEncipherment"
                    ],
                    subject="CN=api.example.com",
                    subject_alternative_names=KeyVaultCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames(
                        dns_names=["api.example.com", "portal.example.com"]
                    ),
                    validity_in_months=12
                )
            ),
            key_vault_id=cdktf.Token.as_string(data_azurerm_key_vault_example.id),
            name="example-certificate"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_certificate_example.override_logical_id("example")
        azurerm_api_management_custom_domain_example =
        azurerm.api_management_custom_domain.ApiManagementCustomDomain(self, "example_5",
            api_management_id=cdktf.Token.as_string(azurerm_api_management_example.id),
            developer_portal=[ApiManagementCustomDomainDeveloperPortal(
                host_name="portal.example.com",
                key_vault_id=cdktf.Token.as_string(azurerm_key_vault_certificate_example.versionless_secret_id)
            )
            ],
            gateway=[ApiManagementCustomDomainGateway(
                host_name="api.example.com",
                key_vault_id=cdktf.Token.as_string(azurerm_key_vault_certificate_example.versionless_secret_id)
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_api_management_custom_domain_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `api_management_id` - (Required) The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.

---

* `developer_portal` - (Optional) One or more `developer_portal` blocks as defined below.

* `management` - (Optional) One or more `management` blocks as defined below.

* `portal` - (Optional) One or more `portal` blocks as defined below.

* `gateway` - (Optional) One or more `gateway` blocks as defined below.

* `scm` - (Optional) One or more `scm` blocks as defined below.

---

A `developer_portal`, `management`, `portal` or `scm` block supports the following:

* `host_name` - (Required) The Hostname to use for the corresponding endpoint.

* `certificate` - (Optional) The Base64 Encoded Certificate. (Mutually exclusive with `key_vault_id`.)

* `certificate_password` - (Optional) The password associated with the certificate provided above.

* `key_vault_id` - (Optional) The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.

* `negotiate_client_certificate` - (Optional) Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.

* `ssl_keyvault_identity_client_id` - (Optional) System or User Assigned Managed identity clientId as generated by Azure AD, which has `GET` access to the keyVault containing the SSL certificate.

-> **NOTE:** If a User Assigned Managed identity is specified for `ssl_keyvault_identity_client_id` then this identity must be associated to the `azurerm_api_management` within an `identity` block.

---

A `gateway` block supports the following:

-> **Tip:** The default gateway hostname ending with `.azure-api.net` must not be added as it will be automatically created by Azure and ignored by Terraform.

* `host_name` - (Required) The Hostname to use for the API Proxy Endpoint.

* `certificate` - (Optional) The Base64 Encoded Certificate. (Mutually exclusive with `key_vault_id`.)

* `certificate_password` - (Optional) The password associated with the certificate provided above.

* `default_ssl_binding` - (Optional) Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.

* `key_vault_id` - (Optional) The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type application/x-pkcs12.

* `negotiate_client_certificate` - (Optional) Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.

* `ssl_keyvault_identity_client_id` - (Optional) System or User Assigned Managed identity clientId as generated by Azure AD, which has `GET` access to the keyVault containing the SSL certificate.

-> **NOTE:** If a User Assigned Managed identity is specified for `ssl_keyvault_identity_client_id` then this identity must be associated to the `azurerm_api_management` within an `identity` block.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the API Management Custom Domain.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the API Management Custom Domain.
* `read` - (Defaults to 5 minutes) Used when retrieving the API Management Custom Domain.
* `update` - (Defaults to 60 minutes) Used when updating the API Management Custom Domain.
* `delete` - (Defaults to 60 minutes) Used when deleting the API Management Custom Domain.

## Import

API Management Custom Domains can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_api_management_custom_domain.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/customDomains/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-04ad32cf09c61a7e73833fab6be0e96f7e0f01a7f8a1db5c3fa9b281307d330d -->