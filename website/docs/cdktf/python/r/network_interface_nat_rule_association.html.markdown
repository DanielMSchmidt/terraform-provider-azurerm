---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_interface_nat_rule_association"
description: |-
  Manages the association between a Network Interface and a Load Balancer's NAT Rule.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_interface_nat_rule_association

Manages the association between a Network Interface and a Load Balancer's NAT Rule.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-network",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_2",
            allocation_method="Static",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-pip",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_3",
            address_prefixes=["10.0.2.0/24"],
            name="internal",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_lb_example = azurerm.lb.Lb(self, "example_4",
            frontend_ip_configuration=[LbFrontendIpConfiguration(
                name="primary",
                public_ip_address_id=cdktf.Token.as_string(azurerm_public_ip_example.id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-lb",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lb_example.override_logical_id("example")
        azurerm_lb_nat_rule_example = azurerm.lb_nat_rule.LbNatRule(self, "example_5",
            backend_port=3389,
            frontend_ip_configuration_name="primary",
            frontend_port=3389,
            loadbalancer_id=cdktf.Token.as_string(azurerm_lb_example.id),
            name="RDPAccess",
            protocol="Tcp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_lb_nat_rule_example.override_logical_id("example")
        azurerm_network_interface_example =
        azurerm.network_interface.NetworkInterface(self, "example_6",
            ip_configuration=[NetworkInterfaceIpConfiguration(
                name="testconfiguration1",
                private_ip_address_allocation="Dynamic",
                subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-nic",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_example.override_logical_id("example")
        azurerm_network_interface_nat_rule_association_example =
        azurerm.network_interface_nat_rule_association.NetworkInterfaceNatRuleAssociation(self, "example_7",
            ip_configuration_name="testconfiguration1",
            nat_rule_id=cdktf.Token.as_string(azurerm_lb_nat_rule_example.id),
            network_interface_id=cdktf.Token.as_string(azurerm_network_interface_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_nat_rule_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `network_interface_id` - (Required) The ID of the Network Interface. Changing this forces a new resource to be created.

* `ip_configuration_name` - (Required) The Name of the IP Configuration within the Network Interface which should be connected to the NAT Rule. Changing this forces a new resource to be created.

* `nat_rule_id` - (Required) The ID of the Load Balancer NAT Rule which this Network Interface which should be connected to. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The (Terraform specific) ID of the Association between the Network Interface and the Load Balancers NAT Rule.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the association between the Network Interface and the Load Balancers NAT Rule.
* `update` - (Defaults to 30 minutes) Used when updating the association between the Network Interface and the Load Balancers NAT Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the association between the Network Interface and the Load Balancers NAT Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the association between the Network Interface and the Load Balancers NAT Rule.

## Import

Associations between Network Interfaces and Load Balancer NAT Rule can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_interface_nat_rule_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/rule1
```

-> **NOTE:** This ID is specific to Terraform - and is of the format `{networkInterfaceId}/ipConfigurations/{ipConfigurationName}|{natRuleId}`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-3f43910cee5029ae1f5d8d0ad42b6ab59dec723f77637c7942f7ac1a70b3101f -->