---
subcategory: "Redis"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_redis_linked_server"
description: |-
  Manages a Redis Linked Server.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_redis_linked_server

Manages a Redis Linked Server (ie Geo Location)

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example_primary =
        azurerm.resource_group.ResourceGroup(self, "example-primary",
            location="East US",
            name="example-resources-primary"
        )
        azurerm_resource_group_example_secondary =
        azurerm.resource_group.ResourceGroup(self, "example-secondary",
            location="West US",
            name="example-resources-secondary"
        )
        azurerm_redis_cache_example_primary = azurerm.redis_cache.RedisCache(self, "example-primary_2",
            capacity=1,
            enable_non_ssl_port=False,
            family="P",
            location=cdktf.Token.as_string(azurerm_resource_group_example_primary.location),
            name="example-cache1",
            redis_configuration=RedisCacheRedisConfiguration(
                maxmemory_delta=2,
                maxmemory_policy="allkeys-lru",
                maxmemory_reserved=2
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example_primary.name),
            sku_name="Premium"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_redis_cache_example_primary.override_logical_id("example-primary")
        azurerm_redis_cache_example_secondary = azurerm.redis_cache.RedisCache(self, "example-secondary_3",
            capacity=1,
            enable_non_ssl_port=False,
            family="P",
            location=cdktf.Token.as_string(azurerm_resource_group_example_secondary.location),
            name="example-cache2",
            redis_configuration=RedisCacheRedisConfiguration(
                maxmemory_delta=2,
                maxmemory_policy="allkeys-lru",
                maxmemory_reserved=2
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example_secondary.name),
            sku_name="Premium"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_redis_cache_example_secondary.override_logical_id("example-secondary")
        azurerm.redis_linked_server.RedisLinkedServer(self, "example-link",
            linked_redis_cache_id=cdktf.Token.as_string(azurerm_redis_cache_example_secondary.id),
            linked_redis_cache_location=cdktf.Token.as_string(azurerm_redis_cache_example_secondary.location),
            resource_group_name=cdktf.Token.as_string(azurerm_redis_cache_example_primary.resource_group_name),
            server_role="Secondary",
            target_redis_cache_name=cdktf.Token.as_string(azurerm_redis_cache_example_primary.name)
        )
```

## Arguments Reference

The following arguments are supported:

* `linked_redis_cache_id` - (Required) The ID of the linked Redis cache. Changing this forces a new Redis to be created.

* `linked_redis_cache_location` - (Required) The location of the linked Redis cache. Changing this forces a new Redis to be created.

* `target_redis_cache_name` - (Required) The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)

* `resource_group_name` - (Required) The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.

* `server_role` - (Required) The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created. Possible values are `Primary` and `Secondary`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Redis.

* `name` - The name of the linked server.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Redis.
* `read` - (Defaults to 5 minutes) Used when retrieving the Redis.
* `update` - (Defaults to 60 minutes) Used when updating the Redis.
* `delete` - (Defaults to 60 minutes) Used when deleting the Redis.

## Import

Redis can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_redis_linked_server.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/linkedServers/cache2
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-21dd77c9ad408b36ba9c6575e16b7033bfa2fdf90181a077f3c65773876478d9 -->