---
subcategory: "Data Explorer"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_kusto_script"
description: |-
  Manages a Kusto Script.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_kusto_script

Manages a Kusto Script.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_container_example =
        azurerm.storage_container.StorageContainer(self, "example_3",
            container_access_type="private",
            name="setup-files",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_container_example.override_logical_id("example")
        data_azurerm_storage_account_blob_container_sas_example =
        azurerm.data_azurerm_storage_account_blob_container_sas.DataAzurermStorageAccountBlobContainerSas(self, "example_4",
            connection_string=cdktf.Token.as_string(azurerm_storage_account_example.primary_connection_string),
            container_name=cdktf.Token.as_string(azurerm_storage_container_example.name),
            expiry="2022-03-21",
            https_only=True,
            permissions=DataAzurermStorageAccountBlobContainerSasPermissions(
                add=False,
                create=False,
                delete=False,
                list=True,
                read=True,
                write=True
            ),
            start="2017-03-21"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azurerm_storage_account_blob_container_sas_example.override_logical_id("example")
        azurerm_kusto_cluster_example = azurerm.kusto_cluster.KustoCluster(self, "example_5",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku=KustoClusterSku(
                capacity=1,
                name="Dev(No SLA)_Standard_D11_v2"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_kusto_cluster_example.override_logical_id("example")
        azurerm_kusto_database_example = azurerm.kusto_database.KustoDatabase(self, "example_6",
            cluster_name=cdktf.Token.as_string(azurerm_kusto_cluster_example.name),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_kusto_database_example.override_logical_id("example")
        azurerm_storage_blob_example = azurerm.storage_blob.StorageBlob(self, "example_7",
            name="script.txt",
            source_content=".create table MyTable (Level:string, Timestamp:datetime, UserId:string, TraceId:string, Message:string, ProcessId:int32)",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name),
            storage_container_name=cdktf.Token.as_string(azurerm_storage_container_example.name),
            type="Block"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_blob_example.override_logical_id("example")
        azurerm_kusto_script_example = azurerm.kusto_script.KustoScript(self, "example_8",
            continue_on_errors_enabled=True,
            database_id=cdktf.Token.as_string(azurerm_kusto_database_example.id),
            force_an_update_when_value_changed="first",
            name="example",
            sas_token=cdktf.Token.as_string(data_azurerm_storage_account_blob_container_sas_example.sas),
            url=cdktf.Token.as_string(azurerm_storage_blob_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_kusto_script_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Kusto Script. Changing this forces a new Kusto Script to be created.
  
* `database_id` - (Required) The ID of the Kusto Database. Changing this forces a new Kusto Script to be created.

---

* `continue_on_errors_enabled` - (Optional) Flag that indicates whether to continue if one of the command fails.

* `force_an_update_when_value_changed` - (Optional) A unique string. If changed the script will be applied again.

* `script_content` - (Optional) The script content. This property should be used when the script is provide inline and not through file in a SA. Must not be used together with `url` and `sas_token` properties. Changing this forces a new resource to be created.

* `sas_token` - (Optional) The SAS token used to access the script. Must be provided when using scriptUrl property. Changing this forces a new resource to be created.

* `url` - (Optional) The url to the KQL script blob file. Must not be used together with scriptContent property. Please reference [this documentation](https://docs.microsoft.com/azure/data-explorer/database-script) that describes the commands that are allowed in the script.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Kusto Script.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Kusto Script.
* `read` - (Defaults to 5 minutes) Used when retrieving the Kusto Script.
* `update` - (Defaults to 30 minutes) Used when updating the Kusto Script.
* `delete` - (Defaults to 30 minutes) Used when deleting the Kusto Script.

## Import

Kusto Scripts can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_kusto_script.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/scripts/script1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9380532c00d0c0a2e8baff41548f38b12488eff5cf7f54d3212b1bb4235fb271 -->