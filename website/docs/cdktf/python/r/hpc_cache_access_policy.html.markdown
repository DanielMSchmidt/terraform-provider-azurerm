---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_hpc_cache_access_policy"
description: |-
  Manages a HPC Cache Access Policy.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_hpc_cache_access_policy

Manages a HPC Cache Access Policy.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplevn",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_2",
            address_prefixes=["10.0.1.0/24"],
            name="examplesubnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_hpc_cache_example = azurerm.hpc_cache.HpcCache(self, "example_3",
            cache_size_in_gb=3072,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplehpccache",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Standard_2G",
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_hpc_cache_example.override_logical_id("example")
        azurerm_hpc_cache_access_policy_example =
        azurerm.hpc_cache_access_policy.HpcCacheAccessPolicy(self, "example_4",
            access_rule=[HpcCacheAccessPolicyAccessRule(
                access="rw",
                scope="default"
            )
            ],
            hpc_cache_id=cdktf.Token.as_string(azurerm_hpc_cache_example.id),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_hpc_cache_access_policy_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this HPC Cache Access Policy. Changing this forces a new HPC Cache Access Policy to be created.

* `hpc_cache_id` - (Required) The ID of the HPC Cache that this HPC Cache Access Policy resides in. Changing this forces a new HPC Cache Access Policy to be created.

* `access_rule` - (Required) Up to three `access_rule` blocks as defined below.

---

An `access_rule` block supports the following:

* `scope` - (Required) The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.

~> **NOTE:** Each `access_rule` should set a unique `scope`.

* `access` - (Required) The access level for this rule. Possible values are: `rw`, `ro`, `no`.

* `filter` - (Optional) The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.

* `suid_enabled` - (Optional) Whether [SUID](https://docs.microsoft.com/azure/hpc-cache/access-policies#suid) is allowed? 

* `submount_access_enabled` - (Optional) Whether allow access to subdirectories under the root export? 

* `root_squash_enabled` - (Optional) Whether to enable [root squash](https://docs.microsoft.com/azure/hpc-cache/access-policies#root-squash)? 

* `anonymous_uid` - (Optional) The anonymous UID used when `root_squash_enabled` is `true`.

* `anonymous_gid` - (Optional) The anonymous GID used when `root_squash_enabled` is `true`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the HPC Cache Access Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the HPC Cache Access Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the HPC Cache Access Policy.
* `update` - (Defaults to 30 minutes) Used when updating the HPC Cache Access Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the HPC Cache Access Policy.

## Import

HPC Cache Access Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_hpc_cache_access_policy.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/cacheAccessPolicies/policy1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-060aa6aab164515d9281a2ca9830a3e7fdece8891a59b2ceb508a099106a9fb9 -->