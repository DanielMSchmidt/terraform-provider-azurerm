---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_manager_scope_connection"
description: |-
  Manages a Network Manager Scope Connection.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_manager_scope_connection

Manages a Network Manager Scope Connection which may cross tenants.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        data_azurerm_subscription_alt =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "alt",
            subscription_id="00000000-0000-0000-0000-000000000000"
        )
        data_azurerm_subscription_current =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "current_3")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azurerm_subscription_current.override_logical_id("current")
        azurerm_network_manager_example =
        azurerm.network_manager.NetworkManager(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-networkmanager",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            scope=NetworkManagerScope(
                subscription_ids=[
                    cdktf.Token.as_string(data_azurerm_subscription_current.id)
                ]
            ),
            scope_accesses=["SecurityAdmin"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_example.override_logical_id("example")
        azurerm_network_manager_scope_connection_example =
        azurerm.network_manager_scope_connection.NetworkManagerScopeConnection(self, "example_5",
            description="example",
            name="example-nsc",
            network_manager_id=cdktf.Token.as_string(azurerm_network_manager_example.id),
            target_scope_id=cdktf.Token.as_string(data_azurerm_subscription_alt.id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_manager_scope_connection_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.

* `network_manager_id` - (Required) Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.

* `target_scope_id` - (Required) Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.

* `tenant_id` - (Required) Specifies the Tenant ID of the Resource which the Network Manager is connected to.

* `description` - (Optional) A description of the Network Manager Scope Connection.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Network Manager Scope Connection.

* `connection_state` - The Connection state of the Network Manager Scope Connection.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Network Manager Scope Connection.
* `read` - (Defaults to 5 minutes) Used when retrieving the Network Manager Scope Connection.
* `update` - (Defaults to 30 minutes) Used when updating the Network Manager Scope Connection.
* `delete` - (Defaults to 30 minutes) Used when deleting the Network Manager Scope Connection.

## Import

Network Manager Scope Connection can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_manager_scope_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/scopeConnections/scopeConnection1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b087e9020b159de1c37e846c31f838049ff602092761adb76f9dd839da3ec679 -->