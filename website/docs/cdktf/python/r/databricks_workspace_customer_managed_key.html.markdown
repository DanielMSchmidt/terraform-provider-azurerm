---
subcategory: "Databricks"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_databricks_workspace_customer_managed_key"
description: |-
  Manages a Customer Managed Key for a Databricks Workspace
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_databricks_workspace_customer_managed_key

Manages a Customer Managed Key for a Databricks Workspace

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_databricks_workspace_example =
        azurerm.databricks_workspace.DatabricksWorkspace(self, "example_2",
            customer_managed_key_enabled=True,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="databricks-test",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="premium",
            tags={
                "Environment": "Production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_databricks_workspace_example.override_logical_id("example")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplekeyvault",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_databricks =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "databricks",
            depends_on=[azurerm_databricks_workspace_example],
            key_permissions=["Create", "Delete", "Get", "Purge", "Recover", "Update", "List", "Decrypt", "Sign"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_databricks_workspace_example.storage_account_identity, ["0", "principal_id"])),
            tenant_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_databricks_workspace_example.storage_account_identity, ["0", "tenant_id"]))
        )
        azurerm_key_vault_access_policy_terraform =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "terraform",
            key_permissions=["Create", "Delete", "Get", "Purge", "Recover", "Update", "List", "Decrypt", "Sign", "GetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            tenant_id=cdktf.Token.as_string(azurerm_key_vault_example.tenant_id)
        )
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_6",
            depends_on=[azurerm_key_vault_access_policy_terraform],
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="example-certificate"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_databricks_workspace_customer_managed_key_example =
        azurerm.databricks_workspace_customer_managed_key.DatabricksWorkspaceCustomerManagedKey(self, "example_7",
            depends_on=[azurerm_key_vault_access_policy_databricks],
            key_vault_key_id=cdktf.Token.as_string(azurerm_key_vault_key_example.id),
            workspace_id=cdktf.Token.as_string(azurerm_databricks_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_databricks_workspace_customer_managed_key_example.override_logical_id("example")
```

## Example HCL Configurations

* [Databricks Workspace with Databricks File System Customer Managed Keys](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/databricks/customer-managed-key/dbfs)
* [Databricks Workspace with Customer Managed Keys for Managed Services](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/databricks/customer-managed-key/managed-services)
* [Databricks Workspace with Private Endpoint, Customer Managed Keys for Managed Services and Databricks File System Customer Managed Keys](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/private-endpoint/databricks/managed-services)

## Argument Reference

The following arguments are supported:

* `workspace_id` - (Required) The ID of the Databricks Workspace..

* `key_vault_key_id` - (Required) The ID of the Key Vault.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Databricks Workspace.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Customer Managed Key for this Databricks Workspace.
* `update` - (Defaults to 30 minutes) Used when updating the Customer Managed Key for this Databricks Workspace.
* `read` - (Defaults to 5 minutes) Used when retrieving the Customer Managed Key for this Databricks Workspace.
* `delete` - (Defaults to 30 minutes) Used when deleting the Customer Managed Key for this Databricks Workspace.

## Import

Databricks Workspace Customer Managed Key can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_databricks_workspace_customer_managed_key.workspace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2d8244d9d8bd30741b8f424ed79f692df5ae83459af362a76b00eef44d888458 -->