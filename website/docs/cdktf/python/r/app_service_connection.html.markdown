---
subcategory: "App Service (Web Apps)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_app_service_connection"
description: |-
  Manages a service connector for app service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_app_service_connection

Manages a service connector for app service.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_service_plan_example = azurerm.service_plan.ServicePlan(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-serviceplan",
            os_type="Linux",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="P1v2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_service_plan_example.override_logical_id("example")
        azurerm_cosmosdb_account_example =
        azurerm.cosmosdb_account.CosmosdbAccount(self, "example_2",
            consistency_policy=CosmosdbAccountConsistencyPolicy(
                consistency_level="BoundedStaleness",
                max_interval_in_seconds=10,
                max_staleness_prefix=200
            ),
            geo_location=[CosmosdbAccountGeoLocation(
                failover_priority=0,
                location=cdktf.Token.as_string(azurerm_resource_group_example.location)
            )
            ],
            kind="GlobalDocumentDB",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-cosmosdb-account",
            offer_type="Standard",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_account_example.override_logical_id("example")
        azurerm_cosmosdb_sql_database_example =
        azurerm.cosmosdb_sql_database.CosmosdbSqlDatabase(self, "example_3",
            account_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.name),
            name="cosmos-sql-db",
            resource_group_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.resource_group_name),
            throughput=400
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_database_example.override_logical_id("example")
        azurerm_linux_web_app_example = azurerm.linux_web_app.LinuxWebApp(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-linuxwebapp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            service_plan_id=cdktf.Token.as_string(azurerm_service_plan_example.id),
            site_config=LinuxWebAppSiteConfig()
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_linux_web_app_example.override_logical_id("example")
        azurerm_app_service_connection_example =
        azurerm.app_service_connection.AppServiceConnection(self, "example_5",
            app_service_id=cdktf.Token.as_string(azurerm_linux_web_app_example.id),
            authentication=AppServiceConnectionAuthentication(
                type="systemAssignedIdentity"
            ),
            name="example-serviceconnector",
            target_resource_id=cdktf.Token.as_string(azurerm_cosmosdb_sql_database_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_app_service_connection_example.override_logical_id("example")
        azurerm_cosmosdb_sql_container_example =
        azurerm.cosmosdb_sql_container.CosmosdbSqlContainer(self, "example_6",
            account_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.name),
            database_name=cdktf.Token.as_string(azurerm_cosmosdb_sql_database_example.name),
            name="example-container",
            partition_key_path="/definition",
            resource_group_name=cdktf.Token.as_string(azurerm_cosmosdb_account_example.resource_group_name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_container_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the service connection. Changing this forces a new resource to be created.

* `app_service_id` - (Required) The ID of the data source web app. Changing this forces a new resource to be created.

* `target_resource_id` - (Required) The ID of the target resource. Changing this forces a new resource to be created. Possible values are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`.

* `authentication` - (Required) The authentication info. An `authentication` block as defined below.

-> **Note:** If a Managed Identity is used, this will need to be configured on the App Service.

---

An `authentication` block supports the following:

* `type` - (Required) The authentication type. Possible values are `systemAssignedIdentity`, `userAssignedIdentity`, `servicePrincipalSecret`, `servicePrincipalCertificate`, `secret`. Changing this forces a new resource to be created.

* `name` - (Optional) Username or account name for secret auth. `name` and `secret` should be either both specified or both not specified when `type` is set to `secret`.

* `secret` - (Optional) Password or account key for secret auth. `secret` and `name` should be either both specified or both not specified when `type` is set to `secret`.

* `client_id` - (Optional) Client ID for `userAssignedIdentity` or `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`. When `type` is set to `userAssignedIdentity`, `client_id` and `subscription_id` should be either both specified or both not specified.

* `subscription_id` - (Optional) Subscription ID for `userAssignedIdentity`. `subscription_id` and `client_id` should be either both specified or both not specified.

* `principal_id` - (Optional) Principal ID for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`.

* `certificate` - (Optional) Service principal certificate for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalCertificate`.

---

* `client_type` - (Optional) The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`.

* `vnet_solution` - (Optional) The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.

* `secret_store` - (Optional) An option to store secret value in secure place. An `secret_store` block as defined below.

---

An `secret_store` block supports the following:

* `key_vault_id` - (required) The key vault id to store secret.

## Attribute Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the service connector.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Service Connector for app service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Service Connector for app service.
* `update` - (Defaults to 30 minutes) Used when updating the Service Connector for app service.
* `delete` - (Defaults to 30 minutes) Used when deleting the Service Connector for app service.

## Import

Service Connector for app service can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_app_service_connection.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Web/sites/webapp/providers/Microsoft.ServiceLinker/linkers/serviceconnector1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e21ac2e6a40132991ced277d2069b8cfd8892a27c6d0da4989c38dbf107fff96 -->