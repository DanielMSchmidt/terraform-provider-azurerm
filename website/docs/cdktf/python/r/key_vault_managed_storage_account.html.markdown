---
subcategory: "Key Vault"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_key_vault_managed_storage_account"
description: |-
  Manages a Key Vault Managed Storage Account.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_key_vault_managed_storage_account

Manages a Key Vault Managed Storage Account.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="storageaccountname",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_3",
            access_policy=[KeyVaultAccessPolicy(
                object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
                secret_permissions=["Get", "Delete"],
                storage_permissions=["Get", "List", "Set", "SetSAS", "GetSAS", "DeleteSAS", "Update", "RegenerateKey"
                ],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="keyvaultname",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_managed_storage_account_example =
        azurerm.key_vault_managed_storage_account.KeyVaultManagedStorageAccount(self, "example_4",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="examplemanagedstorage",
            regenerate_key_automatically=False,
            regeneration_period="P1D",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id),
            storage_account_key="key1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_managed_storage_account_example.override_logical_id("example")
```

## Example Usage (automatically regenerate Storage Account access key)

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.azuread as azuread
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="storageaccountname",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        data_azuread_service_principal_test =
        azuread.data_azuread_service_principal.DataAzureadServicePrincipal(self, "test",
            application_id="cfa8b339-82a2-471a-a3c9-0fc0be7a4093"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_4",
            access_policy=[KeyVaultAccessPolicy(
                object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
                secret_permissions=["Get", "Delete"],
                storage_permissions=["Get", "List", "Set", "SetSAS", "GetSAS", "DeleteSAS", "Update", "RegenerateKey"
                ],
                tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="keyvaultname",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="standard",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_role_assignment_example =
        azurerm.role_assignment.RoleAssignment(self, "example_5",
            principal_id=cdktf.Token.as_string(data_azuread_service_principal_test.id),
            role_definition_name="Storage Account Key Operator Service Role",
            scope=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example.override_logical_id("example")
        azurerm_key_vault_managed_storage_account_example =
        azurerm.key_vault_managed_storage_account.KeyVaultManagedStorageAccount(self, "example_6",
            depends_on=[azurerm_role_assignment_example],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="examplemanagedstorage",
            regenerate_key_automatically=True,
            regeneration_period="P1D",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id),
            storage_account_key="key1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_managed_storage_account_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.

* `key_vault_id` - (Required) The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.

* `storage_account_id` - (Required) The ID of the Storage Account.

* `storage_account_key` - (Required) Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.

---

* `regenerate_key_automatically` - (Optional) Should Storage Account access key be regenerated periodically?

~> **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.

* `regeneration_period` - (Optional) How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).

* `tags` - (Optional) A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Key Vault Managed Storage Account.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Key Vault Managed Storage Account.
* `read` - (Defaults to 5 minutes) Used when retrieving the Key Vault Managed Storage Account.
* `update` - (Defaults to 30 minutes) Used when updating the Key Vault Managed Storage Account.
* `delete` - (Defaults to 30 minutes) Used when deleting the Key Vault Managed Storage Account.

## Import

Key Vault Managed Storage Accounts can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_key_vault_managed_storage_account.example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-b270d847ab44417f44e10149808cb507e088f32d17b0000407462666e3b05530 -->