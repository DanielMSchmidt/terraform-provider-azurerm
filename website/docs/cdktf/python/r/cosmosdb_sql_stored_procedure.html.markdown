---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_sql_stored_procedure"
description: |-
  Manages a SQL Stored Procedure within a Cosmos DB Account SQL Database.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_cosmosdb_sql_stored_procedure

Manages a SQL Stored Procedure within a Cosmos DB Account SQL Database.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_cosmosdb_account_example =
        azurerm.data_azurerm_cosmosdb_account.DataAzurermCosmosdbAccount(self, "example",
            name="tfex-cosmosdb-account",
            resource_group_name="tfex-cosmosdb-account-rg"
        )
        azurerm_cosmosdb_sql_database_example =
        azurerm.cosmosdb_sql_database.CosmosdbSqlDatabase(self, "example_1",
            account_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.name),
            name="tfex-cosmos-db",
            resource_group_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.resource_group_name),
            throughput=400
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_database_example.override_logical_id("example")
        azurerm_cosmosdb_sql_container_example =
        azurerm.cosmosdb_sql_container.CosmosdbSqlContainer(self, "example_2",
            account_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.name),
            database_name=cdktf.Token.as_string(azurerm_cosmosdb_sql_database_example.name),
            name="example-container",
            partition_key_path="/id",
            resource_group_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.resource_group_name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_container_example.override_logical_id("example")
        azurerm_cosmosdb_sql_stored_procedure_example =
        azurerm.cosmosdb_sql_stored_procedure.CosmosdbSqlStoredProcedure(self, "example_3",
            account_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.name),
            body="   function () { var context = getContext(); var response = context.getResponse(); response.setBody('Hello, World'); }\n",
            container_name=cdktf.Token.as_string(azurerm_cosmosdb_sql_container_example.name),
            database_name=cdktf.Token.as_string(azurerm_cosmosdb_sql_database_example.name),
            name="test-stored-proc",
            resource_group_name=cdktf.Token.as_string(data_azurerm_cosmosdb_account_example.resource_group_name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_cosmosdb_sql_stored_procedure_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Cosmos DB SQL Stored Procedure. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.

* `account_name` - (Required) The name of the Cosmos DB Account to create the stored procedure within. Changing this forces a new resource to be created.

* `database_name` - (Required) The name of the Cosmos DB SQL Database to create the stored procedure within. Changing this forces a new resource to be created.

* `container_name` - (Required) The name of the Cosmos DB SQL Container to create the stored procedure within. Changing this forces a new resource to be created.

* `body` - (Required) The body of the stored procedure.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Cosmos DB SQL Stored Procedure.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the CosmosDB SQL Stored Procedure.
* `update` - (Defaults to 30 minutes) Used when updating the CosmosDB SQL Stored Procedure.
* `read` - (Defaults to 5 minutes) Used when retrieving the CosmosDB SQL Stored Procedure.
* `delete` - (Defaults to 30 minutes) Used when deleting the CosmosDB SQL Stored Procedure.

## Import

CosmosDB SQL Stored Procedures can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_cosmosdb_sql_stored_procedure.db1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/db1/containers/c1/storedProcedures/sp1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9b0fb3090021663662a8adc48af80e69bb06d57ff4047e76313db8d8dd7b8d0b -->