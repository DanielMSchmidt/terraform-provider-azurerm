---
subcategory: "App Service (Web Apps)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_function_app_active_slot"
description: |-
  Manages a Function App Active Slot.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_function_app_active_slot

Manages a Function App Active Slot.

## Example Usage

### Windows Function App

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_service_plan_example = azurerm.service_plan.ServicePlan(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-app-service-plan",
            os_type="Windows",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Y1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_service_plan_example.override_logical_id("example")
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_3",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="windowsfunctionappsa",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_windows_function_app_example =
        azurerm.windows_function_app.WindowsFunctionApp(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-windows-function-app",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            service_plan_id=cdktf.Token.as_string(azurerm_service_plan_example.id),
            site_config=WindowsFunctionAppSiteConfig(),
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_windows_function_app_example.override_logical_id("example")
        azurerm_windows_function_app_slot_example =
        azurerm.windows_function_app_slot.WindowsFunctionAppSlot(self, "example_5",
            function_app_id=cdktf.Token.as_string(azurerm_windows_function_app_example.id),
            name="example-windows-function-app-slot",
            site_config=WindowsFunctionAppSlotSiteConfig(),
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_windows_function_app_slot_example.override_logical_id("example")
        azurerm_function_app_active_slot_example =
        azurerm.function_app_active_slot.FunctionAppActiveSlot(self, "example_6",
            slot_id=cdktf.Token.as_string(azurerm_windows_function_app_slot_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_function_app_active_slot_example.override_logical_id("example")
```

### Linux Function App

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_service_plan_example = azurerm.service_plan.ServicePlan(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-app-service-plan",
            os_type="Linux",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Y1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_service_plan_example.override_logical_id("example")
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_3",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="linuxfunctionappsa",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_linux_function_app_example =
        azurerm.linux_function_app.LinuxFunctionApp(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-linux-function-app",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            service_plan_id=cdktf.Token.as_string(azurerm_service_plan_example.id),
            site_config=LinuxFunctionAppSiteConfig(),
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_linux_function_app_example.override_logical_id("example")
        azurerm_linux_function_app_slot_example =
        azurerm.linux_function_app_slot.LinuxFunctionAppSlot(self, "example_5",
            function_app_id=cdktf.Token.as_string(azurerm_linux_function_app_example.name),
            name="example-linux-function-app-slot",
            site_config=LinuxFunctionAppSlotSiteConfig(),
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_linux_function_app_slot_example.override_logical_id("example")
        azurerm_function_app_active_slot_example =
        azurerm.function_app_active_slot.FunctionAppActiveSlot(self, "example_6",
            slot_id=cdktf.Token.as_string(azurerm_linux_function_app_slot_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_function_app_active_slot_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `slot_id` - (Required) The ID of the Slot to swap with `Production`.

---

* `overwrite_network_config` - (Optional) The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Function App Active Slot

* `last_successful_swap` - The timestamp of the last successful swap with `Production`

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Function App Active Slot.
* `update` - (Defaults to 30 minutes) Used when updating the Function App Active Slot.
* `read` - (Defaults to 5 minutes) Used when retrieving the Function App Active Slot.
* `delete` - (Defaults to 5 minutes) Used when deleting the Function App Active Slot.

## Import

a Function App Active Slot can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_function_app_active_slot.example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8e3999fdc64cb43f5047b5d57219310adc1bb69e661258ef2ed35bf913b2226a -->