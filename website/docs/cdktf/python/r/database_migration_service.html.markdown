---
subcategory: "Database Migration"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_database_migration_service"
description: |-
  Manage a Azure Database Migration Service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_database_migration_service

Manages a Azure Database Migration Service.

~> **NOTE:** Destroying a Database Migration Service will leave any outstanding tasks untouched. This is to avoid unexpectedly deleting any tasks managed outside of terraform.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-rg"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_2",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_3",
            address_prefixes=["10.0.1.0/24"],
            name="example-subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_database_migration_service_example =
        azurerm.database_migration_service.DatabaseMigrationService(self, "example_4",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-dms",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Standard_1vCores",
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_database_migration_service_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specify the name of the database migration service. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) Name of the resource group in which to create the database migration service. Changing this forces a new resource to be created.

* `subnet_id` - (Required) The ID of the virtual subnet resource to which the database migration service should be joined. Changing this forces a new resource to be created.

* `sku_name` - (Required) The SKU name of the database migration service. Possible values are `Premium_4vCores`, `Standard_1vCores`, `Standard_2vCores` and `Standard_4vCores`. Changing this forces a new resource to be created.

* `tags` - (Optional) A mapping of tags to assigned to the resource.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of Database Migration Service.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the API Management API.
* `update` - (Defaults to 30 minutes) Used when updating the API Management API.
* `read` - (Defaults to 5 minutes) Used when retrieving the API Management API.
* `delete` - (Defaults to 30 minutes) Used when deleting the API Management API.

## Import

Database Migration Services can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_database_migration_service.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.DataMigration/services/database_migration_service1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-356ad674edca1e86b6d3a955afb1fbbbeaf53405bf283d93aa99c0c4dfd559d4 -->