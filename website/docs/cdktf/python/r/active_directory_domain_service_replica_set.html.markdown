---
subcategory: "Active Directory Domain Services"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_active_directory_domain_service_replica_set"
description: |-
  Manages a Replica Set for an Active Directory Domain Service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_active_directory_domain_service_replica_set

Manages a Replica Set for an Active Directory Domain Service.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.azuread as azuread
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azuread_group_dc_admins = azuread.group.Group(self, "dc_admins",
            display_name="aad-dc-administrators",
            security_enabled=True
        )
        azuread_service_principal_example =
        azuread.service_principal.ServicePrincipal(self, "example",
            application_id="2565bd9d-da50-47d4-8b85-4c97f669dc36"
        )
        azuread_user_admin = azuread.user.User(self, "admin",
            display_name="DC Administrator",
            password="Pa55w0Rd!!1",
            user_principal_name="dc-admin@hashicorp-example.net"
        )
        azurerm_resource_group_aadds = azurerm.resource_group.ResourceGroup(self, "aadds",
            location="westeurope",
            name="aadds-rg"
        )
        azurerm_resource_group_primary = azurerm.resource_group.ResourceGroup(self, "primary",
            location="West Europe",
            name="aadds-primary-rg"
        )
        azurerm_resource_group_replica = azurerm.resource_group.ResourceGroup(self, "replica",
            location="North Europe",
            name="aadds-replica-rg"
        )
        azurerm_virtual_network_primary =
        azurerm.virtual_network.VirtualNetwork(self, "primary_7",
            address_space=["10.0.1.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_primary.location),
            name="aadds-primary-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_primary.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_primary.override_logical_id("primary")
        azurerm_virtual_network_replica =
        azurerm.virtual_network.VirtualNetwork(self, "replica_8",
            address_space=["10.20.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_replica.location),
            name="aadds-replica-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_replica.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_replica.override_logical_id("replica")
        azurerm_virtual_network_peering_primary_replica =
        azurerm.virtual_network_peering.VirtualNetworkPeering(self, "primary_replica",
            allow_forwarded_traffic=True,
            allow_gateway_transit=False,
            allow_virtual_network_access=True,
            name="aadds-primary-replica",
            remote_virtual_network_id=cdktf.Token.as_string(azurerm_virtual_network_replica.id),
            resource_group_name=cdktf.Token.as_string(azurerm_virtual_network_primary.resource_group_name),
            use_remote_gateways=False,
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_primary.name)
        )
        azurerm_virtual_network_peering_replica_primary =
        azurerm.virtual_network_peering.VirtualNetworkPeering(self, "replica_primary",
            allow_forwarded_traffic=True,
            allow_gateway_transit=False,
            allow_virtual_network_access=True,
            name="aadds-replica-primary",
            remote_virtual_network_id=cdktf.Token.as_string(azurerm_virtual_network_primary.id),
            resource_group_name=cdktf.Token.as_string(azurerm_virtual_network_replica.resource_group_name),
            use_remote_gateways=False,
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_replica.name)
        )
        azuread_group_member_admin = azuread.group_member.GroupMember(self, "admin_11",
            group_object_id=azuread_group_dc_admins.object_id,
            member_object_id=azuread_user_admin.object_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azuread_group_member_admin.override_logical_id("admin")
        azurerm_network_security_group_aadds_replica =
        azurerm.network_security_group.NetworkSecurityGroup(self, "aadds_replica",
            location=cdktf.Token.as_string(azurerm_resource_group_replica.location),
            name="aadds-replica-nsg",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_replica.name),
            security_rule=[NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="443",
                direction="Inbound",
                name="AllowSyncWithAzureAD",
                priority=101,
                protocol="Tcp",
                source_address_prefix="AzureActiveDirectoryDomainServices",
                source_port_range="*"
            ), NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="3389",
                direction="Inbound",
                name="AllowRD",
                priority=201,
                protocol="Tcp",
                source_address_prefix="CorpNetSaw",
                source_port_range="*"
            ), NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="5986",
                direction="Inbound",
                name="AllowPSRemoting",
                priority=301,
                protocol="Tcp",
                source_address_prefix="AzureActiveDirectoryDomainServices",
                source_port_range="*"
            ), NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="636",
                direction="Inbound",
                name="AllowLDAPS",
                priority=401,
                protocol="Tcp",
                source_address_prefix="*",
                source_port_range="*"
            )
            ]
        )
        azurerm_network_security_group_primary =
        azurerm.network_security_group.NetworkSecurityGroup(self, "primary_13",
            location=cdktf.Token.as_string(azurerm_resource_group_primary.location),
            name="aadds-primary-nsg",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_primary.name),
            security_rule=[NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="443",
                direction="Inbound",
                name="AllowSyncWithAzureAD",
                priority=101,
                protocol="Tcp",
                source_address_prefix="AzureActiveDirectoryDomainServices",
                source_port_range="*"
            ), NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="3389",
                direction="Inbound",
                name="AllowRD",
                priority=201,
                protocol="Tcp",
                source_address_prefix="CorpNetSaw",
                source_port_range="*"
            ), NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="5986",
                direction="Inbound",
                name="AllowPSRemoting",
                priority=301,
                protocol="Tcp",
                source_address_prefix="AzureActiveDirectoryDomainServices",
                source_port_range="*"
            ), NetworkSecurityGroupSecurityRule(
                access="Allow",
                destination_address_prefix="*",
                destination_port_range="636",
                direction="Inbound",
                name="AllowLDAPS",
                priority=401,
                protocol="Tcp",
                source_address_prefix="*",
                source_port_range="*"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_security_group_primary.override_logical_id("primary")
        azurerm_subnet_aadds_replica = azurerm.subnet.Subnet(self, "aadds_replica_14",
            address_prefixes=["10.20.0.0/24"],
            name="aadds-replica-subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_replica.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_replica.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_aadds_replica.override_logical_id("aadds_replica")
        azurerm_subnet_primary = azurerm.subnet.Subnet(self, "primary_15",
            address_prefixes=["10.0.1.0/24"],
            name="aadds-primary-subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_primary.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_primary.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_primary.override_logical_id("primary")
        azurerm_subnet_network_security_group_association_primary =
        azurerm.subnet_network_security_group_association.SubnetNetworkSecurityGroupAssociation(self, "primary_16",
            network_security_group_id=cdktf.Token.as_string(azurerm_network_security_group_primary.id),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_network_security_group_association_primary.override_logical_id("primary")
        azurerm_subnet_network_security_group_association_replica =
        azurerm.subnet_network_security_group_association.SubnetNetworkSecurityGroupAssociation(self, "replica_17",
            network_security_group_id=cdktf.Token.as_string(azurerm_network_security_group_aadds_replica.id),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_aadds_replica.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_network_security_group_association_replica.override_logical_id("replica")
        azurerm_active_directory_domain_service_example =
        azurerm.active_directory_domain_service.ActiveDirectoryDomainService(self, "example_18",
            depends_on=[azuread_service_principal_example, azurerm_subnet_network_security_group_association_primary
            ],
            domain_name="widgetslogin.net",
            filtered_sync_enabled=False,
            initial_replica_set=ActiveDirectoryDomainServiceInitialReplicaSet(
                location=cdktf.Token.as_string(azurerm_virtual_network_primary.location),
                subnet_id=cdktf.Token.as_string(azurerm_subnet_primary.id)
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_aadds.location),
            name="example-aadds",
            notifications=ActiveDirectoryDomainServiceNotifications(
                additional_recipients=["notifyA@example.net", "notifyB@example.org"
                ],
                notify_dc_admins=True,
                notify_global_admins=True
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_aadds.name),
            security=ActiveDirectoryDomainServiceSecurity(
                sync_kerberos_passwords=True,
                sync_ntlm_passwords=True,
                sync_on_prem_passwords=True
            ),
            sku="Enterprise",
            tags={
                "Environment": "prod"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_active_directory_domain_service_example.override_logical_id("example")
        azurerm_active_directory_domain_service_replica_set_replica =
        azurerm.active_directory_domain_service_replica_set.ActiveDirectoryDomainServiceReplicaSet(self, "replica_19",
            depends_on=[azurerm_subnet_network_security_group_association_replica, azurerm_virtual_network_peering_primary_replica, azurerm_virtual_network_peering_replica_primary
            ],
            domain_service_id=cdktf.Token.as_string(azurerm_active_directory_domain_service_example.id),
            location=cdktf.Token.as_string(azurerm_resource_group_replica.location),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_aadds_replica.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_active_directory_domain_service_replica_set_replica.override_logical_id("replica")
        azurerm_virtual_network_dns_servers_replica =
        azurerm.virtual_network_dns_servers.VirtualNetworkDnsServers(self, "replica_20",
            dns_servers=cdktf.Token.as_list(
                cdktf.property_access(azurerm_active_directory_domain_service_example.initial_replica_set, ["0", "domain_controller_ip_addresses"])),
            virtual_network_id=cdktf.Token.as_string(azurerm_virtual_network_replica.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_dns_servers_replica.override_logical_id("replica")
```

## Argument Reference

The following arguments are supported:

* `domain_service_id` - (Required) The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
  
* `location` - (Required) The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.

* `subnet_id` - (Required) The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
  
## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Domain Service Replica Set.
  
* `domain_controller_ip_addresses` - A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.

* `external_access_ip_address` - The publicly routable IP address for the domain controllers in this Replica Set.

* `service_status` - The current service status for the replica set.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 3 hours) Used when creating the Domain Service.
* `update` - (Defaults to 2 hours) Used when updating the Domain Service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Domain Service.
* `delete` - (Defaults to 60 minutes) Used when deleting the Domain Service.

## Import

Domain Service Replica Sets can be imported using the resource ID of the parent Domain Service and the Replica Set ID, e.g.

```shell
terraform import azurerm_active_directory_domain_service_replica_set.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/replicaSets/00000000-0000-0000-0000-000000000000
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ba32aa59f47004ec91391bc2658a5621856b62c99e50ee4e4cabfc9c8a557e53 -->