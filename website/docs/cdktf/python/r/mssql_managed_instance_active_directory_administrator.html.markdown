---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_managed_instance_active_directory_administrator"
description: |-
  Manages an Active Directory Administrator on a Microsoft Azure SQL Managed Instance
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_managed_instance_active_directory_administrator

Allows you to set a user, group or service principal as the AAD Administrator for an Azure SQL Managed Instance.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azuread as azuread
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        azuread_directory_role_reader = azuread.directory_role.DirectoryRole(self, "reader",
            display_name="Directory Readers"
        )
        azuread_user_admin = azuread.user.User(self, "admin",
            display_name="Ms Admin",
            mail_nickname="ms.admin",
            password="SecretP@sswd99!",
            user_principal_name="ms.admin@hashicorp.com"
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="rg-example"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_3",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_5",
            address_prefixes=["10.0.2.0/24"],
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_mssql_managed_instance_example =
        azurerm.mssql_managed_instance.MssqlManagedInstance(self, "example_6",
            administrator_login="msadministrator",
            administrator_login_password="thisIsDog11",
            identity=MssqlManagedInstanceIdentity(
                type="SystemAssigned"
            ),
            license_type="BasePrice",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="managedsqlinstance",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Gen5",
            storage_size_in_gb=32,
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id),
            vcores=4
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_managed_instance_example.override_logical_id("example")
        azurerm_mssql_managed_instance_active_directory_administrator_example =
        azurerm.mssql_managed_instance_active_directory_administrator.MssqlManagedInstanceActiveDirectoryAdministrator(self, "example_7",
            login_username="msadmin",
            managed_instance_id=cdktf.Token.as_string(azurerm_mssql_managed_instance_example.id),
            object_id=cdktf.Token.as_string(azuread_user_admin.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_managed_instance_active_directory_administrator_example.override_logical_id("example")
        azuread_directory_role_member_example =
        azuread.directory_role_member.DirectoryRoleMember(self, "example_8",
            member_object_id=cdktf.property_access(azurerm_mssql_managed_instance_example.identity, ["0", "principal_id"]),
            role_object_id=azuread_directory_role_reader.object_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azuread_directory_role_member_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `managed_instance_id` - (Required) The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.

* `login_username` - (Required) The login name of the principal to set as the Managed Instance Administrator.

* `object_id` - (Required) The Object ID of the principal to set as the Managed Instance Administrator.

* `tenant_id` - (Required) The Azure Active Directory Tenant ID.

* `azuread_authentication_only` - (Optional) When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the SQL Managed Instance Active Directory Administrator.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the SQL Active Directory Administrator.
* `update` - (Defaults to 30 minutes) Used when updating the SQL Active Directory Administrator.
* `read` - (Defaults to 5 minutes) Used when retrieving the SQL Active Directory Administrator.
* `delete` - (Defaults to 30 minutes) Used when deleting the SQL Active Directory Administrator.

## Import

An Azure SQL Active Directory Administrator can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_managed_instance_active_directory_administrator.administrator /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/managedInstances/mymanagedinstance/administrators/activeDirectory
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-64f875d068cbba9ed95fb11b94c70f6ea63f6ddb542ca1865d07eb6e0394ea19 -->