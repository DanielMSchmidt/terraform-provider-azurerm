---
subcategory: "Disks"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_disk_pool_iscsi_target_lun"
description: |-
  Manages an iSCSI Target Lun(Logic Unit Number).
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_disk_pool_iscsi_target_lun

Manages an iSCSI Target lun.

!> **Note:** Azure are officially [halting](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-disk-pools-to-azure-vmware-solution-hosts?tabs=azure-cli) the preview of Azure Disk Pools, and it **will not** be made generally available. New customers will not be able to register the Microsoft.StoragePool resource provider on their subscription and deploy new Disk Pools. Existing subscriptions registered with Microsoft.StoragePool may continue to deploy and manage disk pools for the time being.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
import ...gen.providers.azuread as azuread
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azuread.
        #     For a more precise conversion please use the --provider flag in convert.
        roles = ["Disk Pool Operator", "Virtual Machine Contributor"]
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-network",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        data_azuread_service_principal_example =
        azuread.data_azuread_service_principal.DataAzureadServicePrincipal(self, "example_2",
            display_name="StoragePool Resource Provider"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azuread_service_principal_example.override_logical_id("example")
        azurerm_managed_disk_example = azurerm.managed_disk.ManagedDisk(self, "example_3",
            create_option="Empty",
            disk_size_gb=4,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            max_shares=2,
            name="example-disk",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_account_type="Premium_LRS",
            zone="1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_managed_disk_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        azurerm_role_assignment_example_count = cdktf.TerraformCount.of(
            cdktf.Fn.length_of(roles))
        azurerm_role_assignment_example =
        azurerm.role_assignment.RoleAssignment(self, "example_4",
            principal_id=cdktf.Token.as_string(data_azuread_service_principal_example.id),
            role_definition_name=cdktf.Token.as_string(
                cdktf.property_access(roles, [azurerm_role_assignment_example_count.index])),
            scope=cdktf.Token.as_string(azurerm_managed_disk_example.id),
            count=azurerm_role_assignment_example_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_5",
            address_prefixes=["10.0.0.0/24"],
            delegation=[SubnetDelegation(
                name="diskspool",
                service_delegation=SubnetDelegationServiceDelegation(
                    actions=["Microsoft.Network/virtualNetworks/read"],
                    name="Microsoft.StoragePool/diskPools"
                )
            )
            ],
            name="example-subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_disk_pool_example = azurerm.disk_pool.DiskPool(self, "example_6",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-pool",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Basic_B1",
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id),
            zones=["1"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_disk_pool_example.override_logical_id("example")
        azurerm_disk_pool_managed_disk_attachment_example =
        azurerm.disk_pool_managed_disk_attachment.DiskPoolManagedDiskAttachment(self, "example_7",
            depends_on=[azurerm_role_assignment_example],
            disk_pool_id=cdktf.Token.as_string(azurerm_disk_pool_example.id),
            managed_disk_id=cdktf.Token.as_string(azurerm_managed_disk_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_disk_pool_managed_disk_attachment_example.override_logical_id("example")
        azurerm_disk_pool_iscsi_target_example =
        azurerm.disk_pool_iscsi_target.DiskPoolIscsiTarget(self, "example_8",
            acl_mode="Dynamic",
            depends_on=[azurerm_disk_pool_managed_disk_attachment_example],
            disks_pool_id=cdktf.Token.as_string(azurerm_disk_pool_example.id),
            name="example",
            target_iqn="iqn.2021-11.com.microsoft:test"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_disk_pool_iscsi_target_example.override_logical_id("example")
        azurerm_disk_pool_iscsi_target_lun_example =
        azurerm.disk_pool_iscsi_target_lun.DiskPoolIscsiTargetLun(self, "example_9",
            disk_pool_managed_disk_attachment_id=cdktf.Token.as_string(azurerm_disk_pool_managed_disk_attachment_example.id),
            iscsi_target_id=cdktf.Token.as_string(azurerm_disk_pool_iscsi_target_example.id),
            name="example-disk"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_disk_pool_iscsi_target_lun_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `iscsi_target_id` - (Required) The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.

* `disk_pool_managed_disk_attachment_id` - (Required) The ID of the `azurerm_disk_pool_managed_disk_attachment`. Changing this forces a new iSCSI Target LUN to be created.

* `name` - (Required) User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the iSCSI Target LUN.

* `lun` - The Logical Unit Number of the iSCSI Target LUN.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the iSCSI Target LUN.
* `read` - (Defaults to 5 minutes) Used when retrieving the iSCSI Target LUN.
* `delete` - (Defaults to 60 minutes) Used when deleting the iSCSI Target LUN.

## Import

iSCSI Target Luns can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_disk_pool_iscsi_target_lun.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-resource-group/providers/Microsoft.StoragePool/diskPools/diskPoolValue/iscsiTargets/iscsiTargetValue/lun|/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-57b646609f4036c18e6c69a96014e4e18167fd75c661962e82ee5a3b3e79e969 -->