---
subcategory: "Redis Enterprise"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_redis_enterprise_database"
description: |-
  Manages a Redis Enterprise Database.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_redis_enterprise_database

Manages a Redis Enterprise Database.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-redisenterprise"
        )
        azurerm_redis_enterprise_cluster_example =
        azurerm.redis_enterprise_cluster.RedisEnterpriseCluster(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-redisenterprise",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Enterprise_E20-4"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_redis_enterprise_cluster_example.override_logical_id("example")
        azurerm_redis_enterprise_cluster_example1 =
        azurerm.redis_enterprise_cluster.RedisEnterpriseCluster(self, "example1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-redisenterprise1",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="Enterprise_E20-4"
        )
        azurerm_redis_enterprise_database_example =
        azurerm.redis_enterprise_database.RedisEnterpriseDatabase(self, "example_3",
            client_protocol="Encrypted",
            cluster_id=cdktf.Token.as_string(azurerm_redis_enterprise_cluster_example.id),
            clustering_policy="EnterpriseCluster",
            eviction_policy="NoEviction",
            linked_database_group_nickname="tftestGeoGroup",
            linked_database_id=["${" + azurerm_redis_enterprise_cluster_example.id + "}/databases/default", "${" + azurerm_redis_enterprise_cluster_example1.id + "}/databases/default"
            ],
            name="default",
            port=10000,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_redis_enterprise_database_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Optional) The name which should be used for this Redis Enterprise Database. Currently the acceptable value for this argument is `default`. Defaults to `default`. Changing this forces a new Redis Enterprise Database to be created.

* `resource_group_name` - (Optional) The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.

* `cluster_id` - (Required) The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.

* `client_protocol` - (Optional) Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. Possible values are `Encrypted` and `Plaintext`. Defaults to `Encrypted`. Changing this forces a new Redis Enterprise Database to be created.

* `clustering_policy` - (Optional) Clustering policy - default is OSSCluster. Specified at create time. Possible values are `EnterpriseCluster` and `OSSCluster`. Defaults to `OSSCluster`. Changing this forces a new Redis Enterprise Database to be created.

* `eviction_policy` - (Optional) Redis eviction policy - default is `VolatileLRU`. Possible values are `AllKeysLFU`, `AllKeysLRU`, `AllKeysRandom`, `VolatileLRU`, `VolatileLFU`, `VolatileTTL`, `VolatileRandom` and `NoEviction`. Changing this forces a new Redis Enterprise Database to be created.

* `module` - (Optional) A `module` block as defined below. Changing this forces a new resource to be created.

-> **NOTE:** Only RediSearch module is allowed with geo-replication

* `linked_database_id` - (Optional) A list of database resources to link with this database with a maximum of 5.

-> **NOTE:** Only the newly created databases can be added to an existing geo-replication group. Existing regular databases or recreated databases cannot be added to the existing geo-replication group. Any linked database be removed from the list will be forcefully unlinked.The only recommended operation is to delete after force-unlink and the recommended scenario of force-unlink is region outrage. The database cannot be linked again after force-unlink.

* `linked_database_group_nickname` - (Optional) Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.

* `port` - (Optional) TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to `10000`.

---

An `module` block exports the following:

* `name` - (Required) The name which should be used for this module. Possible values are `RedisBloom`, `RedisTimeSeries`, `RediSearch` and `RedisJSON`. Changing this forces a new Redis Enterprise Database to be created.

* `args` - (Optional) Configuration options for the module (e.g. `ERROR_RATE 0.00 INITIAL_SIZE 400`). Changing this forces a new resource to be created. Defaults to `""`.

---

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Redis Enterprise Database.

* `primary_access_key` - The Primary Access Key for the Redis Enterprise Database Instance.

* `secondary_access_key` - The Secondary Access Key for the Redis Enterprise Database Instance.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Redis Enterprise Database.
* `read` - (Defaults to 5 minutes) Used when retrieving the Redis Enterprise Database.
* `update` - (Defaults to 30 minutes) Used when updating the Redis Enterprise Database.
* `delete` - (Defaults to 30 minutes) Used when deleting the Redis Enterprise Database.

## Import

Redis Enterprise Databases can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_redis_enterprise_database.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redisEnterprise/cluster1/databases/database1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e45bb5a6d00b3101a7ac3ae1f75d9554f307b79ac8b262cf78753cc3d1542480 -->