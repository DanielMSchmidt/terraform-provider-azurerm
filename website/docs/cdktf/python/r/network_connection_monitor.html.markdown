---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_network_connection_monitor"
description: |-
  Manages a Network Connection Monitor.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_network_connection_monitor

Manages a Network Connection Monitor.

~> **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with Terraform, which now only supports v2.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-Watcher-resources"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-Vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_log_analytics_workspace_example =
        azurerm.log_analytics_workspace.LogAnalyticsWorkspace(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-Workspace",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="PerGB2018"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_log_analytics_workspace_example.override_logical_id("example")
        azurerm_network_watcher_example =
        azurerm.network_watcher.NetworkWatcher(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-Watcher",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_watcher_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_4",
            address_prefixes=["10.0.2.0/24"],
            name="example-Subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_network_interface_example =
        azurerm.network_interface.NetworkInterface(self, "example_5",
            ip_configuration=[NetworkInterfaceIpConfiguration(
                name="testconfiguration1",
                private_ip_address_allocation="Dynamic",
                subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-Nic",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_example.override_logical_id("example")
        azurerm_virtual_machine_example =
        azurerm.virtual_machine.VirtualMachine(self, "example_6",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-VM",
            network_interface_ids=[
                cdktf.Token.as_string(azurerm_network_interface_example.id)
            ],
            os_profile=VirtualMachineOsProfile(
                admin_password="Password1234!",
                admin_username="testadmin",
                computer_name="hostnametest01"
            ),
            os_profile_linux_config=VirtualMachineOsProfileLinuxConfig(
                disable_password_authentication=False
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_image_reference=VirtualMachineStorageImageReference(
                offer="UbuntuServer",
                publisher="Canonical",
                sku="20.04-LTS",
                version="latest"
            ),
            storage_os_disk=VirtualMachineStorageOsDisk(
                caching="ReadWrite",
                create_option="FromImage",
                managed_disk_type="Standard_LRS",
                name="osdisk-example01"
            ),
            vm_size="Standard_D2s_v3"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_machine_example.override_logical_id("example")
        azurerm_virtual_machine_extension_example =
        azurerm.virtual_machine_extension.VirtualMachineExtension(self, "example_7",
            auto_upgrade_minor_version=True,
            name="example-VMExtension",
            publisher="Microsoft.Azure.NetworkWatcher",
            type="NetworkWatcherAgentLinux",
            type_handler_version="1.4",
            virtual_machine_id=cdktf.Token.as_string(azurerm_virtual_machine_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_machine_extension_example.override_logical_id("example")
        azurerm_network_connection_monitor_example =
        azurerm.network_connection_monitor.NetworkConnectionMonitor(self, "example_8",
            depends_on=[azurerm_virtual_machine_extension_example],
            endpoint=[NetworkConnectionMonitorEndpoint(
                filter=NetworkConnectionMonitorEndpointFilter(
                    item=[NetworkConnectionMonitorEndpointFilterItem(
                        address=cdktf.Token.as_string(azurerm_virtual_machine_example.id),
                        type="AgentAddress"
                    )
                    ],
                    type="Include"
                ),
                name="source",
                target_resource_id=cdktf.Token.as_string(azurerm_virtual_machine_example.id)
            ), NetworkConnectionMonitorEndpoint(
                address="terraform.io",
                name="destination"
            )
            ],
            location=cdktf.Token.as_string(azurerm_network_watcher_example.location),
            name="example-Monitor",
            network_watcher_id=cdktf.Token.as_string(azurerm_network_watcher_example.id),
            notes="examplenote",
            output_workspace_resource_ids=[
                cdktf.Token.as_string(azurerm_log_analytics_workspace_example.id)
            ],
            test_configuration=[NetworkConnectionMonitorTestConfiguration(
                name="tcpName",
                protocol="Tcp",
                tcp_configuration=NetworkConnectionMonitorTestConfigurationTcpConfiguration(
                    port=80
                ),
                test_frequency_in_seconds=60
            )
            ],
            test_group=[NetworkConnectionMonitorTestGroup(
                destination_endpoints=["destination"],
                name="exampletg",
                source_endpoints=["source"],
                test_configuration_names=["tcpName"]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_connection_monitor_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.

* `location` - (Required) The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.

* `network_watcher_id` - (Required) The ID of the Network Watcher. Changing this forces a new resource to be created.

* `endpoint` - (Required) A `endpoint` block as defined below.

* `test_configuration` - (Required) A `test_configuration` block as defined below.

* `test_group` - (Required) A `test_group` block as defined below.

---

* `notes` - (Optional) The description of the Network Connection Monitor.

* `output_workspace_resource_ids` - (Optional) A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.

* `tags` - (Optional) A mapping of tags which should be assigned to the Network Connection Monitor.

---

A `endpoint` block supports the following:

* `name` - (Required) The name of the endpoint for the Network Connection Monitor .

* `address` - (Optional) The IP address or domain name of the Network Connection Monitor endpoint.

* `coverage_level` - (Optional) The test coverage for the Network Connection Monitor endpoint. Possible values are `AboveAverage`, `Average`, `BelowAverage`, `Default`, `Full` and `Low`.

* `excluded_ip_addresses` - (Optional) A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be excluded to the Network Connection Monitor endpoint.

* `included_ip_addresses` - (Optional) A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be included to the Network Connection Monitor endpoint.

* `target_resource_id` - (Optional) The resource ID which is used as the endpoint by the Network Connection Monitor.

* `filter` - (Optional) A `filter` block as defined below.

* `target_resource_type` - (Optional) The endpoint type of the Network Connection Monitor. Possible values are `AzureSubnet`, `AzureVM`, `AzureVNet`, `ExternalAddress`, `MMAWorkspaceMachine` and `MMAWorkspaceNetwork`.

---

A `filter` block supports the following:

* `type` - (Optional) The behaviour type of this endpoint filter. Currently the only allowed value is `Include`. Defaults to `Include`.

* `item` - (Optional) A `item` block as defined below.

---

A `item` block supports the following:

* `type` - (Optional) The type of items included in the filter. Possible values are `AgentAddress`. Defaults to `AgentAddress`.

* `address` - (Optional) The address of the filter item.

---

A `test_configuration` block supports the following:

* `name` - (Required) The name of test configuration for the Network Connection Monitor.

* `protocol` - (Required) The protocol used to evaluate tests. Possible values are `Tcp`, `Http` and `Icmp`.

* `test_frequency_in_seconds` - (Optional) The time interval in seconds at which the test evaluation will happen. Defaults to `60`.

* `http_configuration` - (Optional) A `http_configuration` block as defined below.

* `icmp_configuration` - (Optional) A `icmp_configuration` block as defined below.

* `preferred_ip_version` - (Optional) The preferred IP version which is used in the test evaluation. Possible values are `IPv4` and `IPv6`.

* `success_threshold` - (Optional) A `success_threshold` block as defined below.

* `tcp_configuration` - (Optional) A `tcp_configuration` block as defined below.

---

A `http_configuration` block supports the following:

* `method` - (Optional) The HTTP method for the HTTP request. Possible values are `Get` and `Post`. Defaults to `Get`.

* `port` - (Optional) The port for the HTTP connection.

* `path` - (Optional) The path component of the URI. It only accepts the absolute path.

* `prefer_https` - (Optional) Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to `false`.

* `request_header` - (Optional) A `request_header` block as defined below.

* `valid_status_code_ranges` - (Optional) The HTTP status codes to consider successful. For instance, `2xx`, `301-304` and `418`.

---

A `request_header` block supports the following:

* `name` - (Required) The name of the HTTP header.

* `value` - (Required) The value of the HTTP header.

---

A `icmp_configuration` block supports the following:

* `trace_route_enabled` - (Optional) Should path evaluation with trace route be enabled? Defaults to `true`.

---

A `success_threshold` block supports the following:

* `checks_failed_percent` - (Optional) The maximum percentage of failed checks permitted for a test to be successful.

* `round_trip_time_ms` - (Optional) The maximum round-trip time in milliseconds permitted for a test to be successful.

---

A `tcp_configuration` block supports the following:

* `port` - (Required) The port for the TCP connection.

* `trace_route_enabled` - (Optional) Should path evaluation with trace route be enabled? Defaults to `true`.

* `destination_port_behavior` - (Optional) The destination port behavior for the TCP connection. Possible values are `None` and `ListenIfAvailable`.

---

A `test_group` block supports the following:

* `name` - (Required) The name of the test group for the Network Connection Monitor.

* `destination_endpoints` - (Required) A list of destination endpoint names.

* `source_endpoints` - (Required) A list of source endpoint names.

* `test_configuration_names` - (Required) A list of test configuration names.

* `enabled` - (Optional) Should the test group be enabled? Defaults to `true`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Network Connection Monitor.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Network Connection Monitor.
* `read` - (Defaults to 5 minutes) Used when retrieving the Network Connection Monitor.
* `update` - (Defaults to 30 minutes) Used when updating the Network Connection Monitor.
* `delete` - (Defaults to 30 minutes) Used when deleting the Network Connection Monitor.

## Import

Network Connection Monitors can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_network_connection_monitor.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-36fd194d1098ebcc1c0d46011dbadcb0b57e6c8cbeefa5583625796f59a18144 -->