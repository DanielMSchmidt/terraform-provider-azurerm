---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_server_security_alert_policy"
description: |-
  Manages a Security Alert Policy for a MS SQL Server.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_server_security_alert_policy

Manages a Security Alert Policy for a MSSQL Server.

-> **NOTE** Security Alert Policy is currently only available for MS SQL databases.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_sql_server_example = azurerm.sql_server.SqlServer(self, "example_1",
            administrator_login="4dm1n157r470r",
            administrator_login_password="4-v3ry-53cr37-p455w0rd",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="mysqlserver",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            version="12.0"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_sql_server_example.override_logical_id("example")
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_replication_type="GRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="accteststorageaccount",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_mssql_server_security_alert_policy_example =
        azurerm.mssql_server_security_alert_policy.MssqlServerSecurityAlertPolicy(self, "example_3",
            disabled_alerts=["Sql_Injection", "Data_Exfiltration"],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            retention_days=20,
            server_name=cdktf.Token.as_string(azurerm_sql_server_example.name),
            state="Enabled",
            storage_account_access_key=cdktf.Token.as_string(azurerm_storage_account_example.primary_access_key),
            storage_endpoint=cdktf.Token.as_string(azurerm_storage_account_example.primary_blob_endpoint)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_server_security_alert_policy_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `resource_group_name` - (Required) The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.

* `server_name` - (Required) Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.

* `state` - (Required) Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database server. Possible values are `Disabled`, `Enabled` and `New`.

* `disabled_alerts` - (Optional) Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.

* `email_account_admins` - (Optional) Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.

* `email_addresses` - (Optional) Specifies an array of email addresses to which the alert is sent.

* `retention_days` - (Optional) Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.

* `storage_endpoint` - (Optional) Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.

* `storage_account_access_key` - (Optional) Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storage_endpoint` to specify a storage account blob endpoint.

-> **NOTE:**  Please note that storage accounts configured with `shared_access_key_enabled = false` cannot be used to configure `azurerm_mssql_server_security_alert_policy` with `storage_endpoint` for now.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the MS SQL Server Security Alert Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the MSSQL Server Security Alert Policy.
* `update` - (Defaults to 30 minutes) Used when updating the MSSQL Server Security Alert Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the MSSQL Server Security Alert Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the MSSQL Server Security Alert Policy.

## Import

MS SQL Server Security Alert Policy can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_server_security_alert_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/securityAlertPolicies/Default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-39e6b1c3a8e95af2cb24608f5e5da9e122bb63ad165c36076c8c2e91e56ccf92 -->