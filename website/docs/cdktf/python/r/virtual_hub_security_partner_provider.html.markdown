---
subcategory: "Network"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_virtual_hub_security_partner_provider"
description: |-
  Manages a Security Partner Provider which could be associated to virtual hub.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_virtual_hub_security_partner_provider

Manages a Security Partner Provider which could be associated to virtual hub.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_virtual_wan_example = azurerm.virtual_wan.VirtualWan(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vwan",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_wan_example.override_logical_id("example")
        azurerm_virtual_hub_example = azurerm.virtual_hub.VirtualHub(self, "example_2",
            address_prefix="10.0.2.0/24",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vhub",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_wan_id=cdktf.Token.as_string(azurerm_virtual_wan_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_hub_example.override_logical_id("example")
        azurerm_vpn_gateway_example = azurerm.vpn_gateway.VpnGateway(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vpngw",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_hub_id=cdktf.Token.as_string(azurerm_virtual_hub_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_vpn_gateway_example.override_logical_id("example")
        azurerm_virtual_hub_security_partner_provider_example =
        azurerm.virtual_hub_security_partner_provider.VirtualHubSecurityPartnerProvider(self, "example_4",
            depends_on=[azurerm_vpn_gateway_example],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-spp",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            security_provider_name="IBoss",
            tags={
                "ENV": "Prod"
            },
            virtual_hub_id=cdktf.Token.as_string(azurerm_virtual_hub_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_hub_security_partner_provider_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Security Partner Provider. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) The name of the Resource Group where the Security Partner Provider should exist. Changing this forces a new resource to be created.

* `location` - (Required) The Azure Region where the Security Partner Provider should exist. Changing this forces a new resource to be created.

* `security_provider_name` - (Required) The security provider name. Possible values are `ZScaler`, `IBoss` and `Checkpoint` is allowed. Changing this forces a new resource to be created.

* `virtual_hub_id` - (Optional) The ID of the Virtual Hub within which this Security Partner Provider should be created. Changing this forces a new resource to be created.

* `tags` - (Optional) A mapping of tags which should be assigned to the Security Partner Provider.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Security Partner Provider.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Security Partner Provider.
* `read` - (Defaults to 5 minutes) Used when retrieving the Security Partner Provider.
* `update` - (Defaults to 30 minutes) Used when updating the Security Partner Provider.
* `delete` - (Defaults to 30 minutes) Used when deleting the Security Partner Provider.

## Import

Security Partner Providers can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_virtual_hub_security_partner_provider.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-c4883c53b6c951b6a0631cfaaa8e29f74680351e8c2c66c16565e74735fd25bc -->