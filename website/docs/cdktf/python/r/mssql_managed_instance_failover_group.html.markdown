---
subcategory: "Database"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_mssql_managed_instance_failover_group"
description: |-
  Manages an Azure SQL Managed Instance Failover Group.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_mssql_managed_instance_failover_group

Manages an Azure SQL Managed Instance Failover Group.

## Example Usage

-> **Note:** For a more complete example, see the [`./examples/sql-azure/managed_instance_failover_group` directory](https://github.com/hashicorp/terraform-provider-azurerm/tree/main/examples/sql-azure/managed_instance_failover_group) within the GitHub Repository.

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_route_table_example = azurerm.route_table.RouteTable(self, "example_1",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_route_table_example.override_logical_id("example")
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_2",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_network_security_group_example =
        azurerm.network_security_group.NetworkSecurityGroup(self, "example_3",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_security_group_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_4",
            address_prefixes=["10.0.2.0/24"],
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_subnet_network_security_group_association_example =
        azurerm.subnet_network_security_group_association.SubnetNetworkSecurityGroupAssociation(self, "example_5",
            network_security_group_id=cdktf.Token.as_string(azurerm_network_security_group_example.id),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_network_security_group_association_example.override_logical_id("example")
        azurerm_subnet_route_table_association_example =
        azurerm.subnet_route_table_association.SubnetRouteTableAssociation(self, "example_6",
            route_table_id=cdktf.Token.as_string(azurerm_route_table_example.id),
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_route_table_association_example.override_logical_id("example")
        azurerm_mssql_managed_instance_primary =
        azurerm.mssql_managed_instance.MssqlManagedInstance(self, "primary",
            administrator_login="mradministrator",
            administrator_login_password="thisIsDog11",
            depends_on=[azurerm_subnet_network_security_group_association_example, azurerm_subnet_route_table_association_example
            ],
            license_type="BasePrice",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-primary",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Gen5",
            storage_size_in_gb=32,
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id),
            tags={
                "environment": "prod"
            },
            vcores=4
        )
        azurerm_mssql_managed_instance_secondary =
        azurerm.mssql_managed_instance.MssqlManagedInstance(self, "secondary",
            administrator_login="mradministrator",
            administrator_login_password="thisIsDog11",
            depends_on=[azurerm_subnet_network_security_group_association_example, azurerm_subnet_route_table_association_example
            ],
            license_type="BasePrice",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-secondary",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="GP_Gen5",
            storage_size_in_gb=32,
            subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id),
            tags={
                "environment": "prod"
            },
            vcores=4
        )
        azurerm_mssql_managed_instance_failover_group_example =
        azurerm.mssql_managed_instance_failover_group.MssqlManagedInstanceFailoverGroup(self, "example_9",
            location=cdktf.Token.as_string(azurerm_mssql_managed_instance_primary.location),
            managed_instance_id=cdktf.Token.as_string(azurerm_mssql_managed_instance_primary.id),
            name="example-failover-group",
            partner_managed_instance_id=cdktf.Token.as_string(azurerm_mssql_managed_instance_secondary.id),
            read_write_endpoint_failover_policy=MssqlManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy(
                grace_minutes=60,
                mode="Automatic"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_mssql_managed_instance_failover_group_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.

* `location` - (Required) The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.

* `managed_instance_id` - (Required) The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.

* `partner_managed_instance_id` - (Required) The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.

* `read_write_endpoint_failover_policy` - (Required) A `read_write_endpoint_failover_policy` block as defined below.

* `readonly_endpoint_failover_policy_enabled` - (Optional) Failover policy for the read-only endpoint. Defaults to `true`.

---

A `read_write_endpoint_failover_policy` block supports the following:

* `mode` - (Required) The failover mode. Possible values are `Automatic` or `Manual`.

* `grace_minutes` - (Optional) Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Managed Instance Failover Group.

* `partner_region` - A `partner_region` block as defined below.

* `role` - The local replication role of the Managed Instance Failover Group.

---

A `partner_region` block exports the following:

* `location` - The Azure Region where the Managed Instance Failover Group partner exists.

* `role` - The partner replication role of the Managed Instance Failover Group.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Managed Instance Failover Group.
* `read` - (Defaults to 5 minutes) Used when retrieving the Managed Instance Failover Group.
* `update` - (Defaults to 30 minutes) Used when updating the Managed Instance Failover Group.
* `delete` - (Defaults to 30 minutes) Used when deleting the Managed Instance Failover Group.

## Import

SQL Instance Failover Groups can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_mssql_managed_instance_failover_group.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Sql/locations/Location/instanceFailoverGroups/failoverGroup1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d58fcd8e8ae0dfde34632afc1f1249313d51a0ace2aa3126956e9925325f7176 -->