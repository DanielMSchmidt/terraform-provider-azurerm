---
subcategory: "Storage"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_storage_blob_inventory_policy"
description: |-
  Manages a Storage Blob Inventory Policy.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_storage_blob_inventory_policy

Manages a Storage Blob Inventory Policy.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_replication_type="LRS",
            account_tier="Standard",
            blob_properties=StorageAccountBlobProperties(
                versioning_enabled=True
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestoracc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_container_example =
        azurerm.storage_container.StorageContainer(self, "example_3",
            container_access_type="private",
            name="examplecontainer",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_container_example.override_logical_id("example")
        azurerm_storage_blob_inventory_policy_example =
        azurerm.storage_blob_inventory_policy.StorageBlobInventoryPolicy(self, "example_4",
            rules=[StorageBlobInventoryPolicyRules(
                format="Csv",
                name="rule1",
                schedule="Daily",
                schema_fields=["Name", "Last-Modified"],
                scope="Container",
                storage_container_name=cdktf.Token.as_string(azurerm_storage_container_example.name)
            )
            ],
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_blob_inventory_policy_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `storage_account_id` - (Required) The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.

* `rules` - (Required) One or more `rules` blocks as defined below.

---

A `filter` block supports the following:

* `blob_types` - (Required) A set of blob types. Possible values are `blockBlob`, `appendBlob`, and `pageBlob`. The storage account with `is_hns_enabled` is `true` doesn't support `pageBlob`.

~> **NOTE**: The `rules.*.schema_fields` for this rule has to include `BlobType` so that you can specify the `blob_types`.

* `include_blob_versions` - (Optional) Includes blob versions in blob inventory or not? Defaults to `false`.

~> **NOTE**: The `rules.*.schema_fields` for this rule has to include `IsCurrentVersion` and `VersionId` so that you can specify the `include_blob_versions`.

* `include_deleted` - (Optional) Includes deleted blobs in blob inventory or not? Defaults to `false`.

~> **NOTE:** If `rules.*.scope` is `Container`, the `rules.*.schema_fields` for this rule must include `Deleted`, `Version`, `DeletedTime`, and `RemainingRetentionDays` so that you can specify the `include_deleted`. If `rules.*.scope` is `Blob`, the `rules.*.schema_fields` must include `Deleted` and `RemainingRetentionDays` so that you can specify the `include_deleted`. If `rules.*.scope` is `Blob` and the storage account specified by `storage_account_id` has hierarchical namespaces enabled (`is_hns_enabled` is `true` on the storage account), the `rules.*.schema_fields` for this rule must include `Deleted`, `Version`, `DeletedTime`, and `RemainingRetentionDays` so that you can specify the `include_deleted`.

* `include_snapshots` - (Optional) Includes blob snapshots in blob inventory or not? Defaults to `false`.

~> **NOTE**: The `rules.*.schema_fields` for this rule has to include `Snapshot` so that you can specify the `include_snapshots`.

* `prefix_match` - (Optional) A set of strings for blob prefixes to be matched. Maximum of 10 blob prefixes.

* `exclude_prefixes` - (Optional) A set of strings for blob prefixes to be excluded. Maximum of 10 blob prefixes.

---

A `rules` block supports the following:

* `name` - (Required) The name which should be used for this Blob Inventory Policy Rule.

* `storage_container_name` - (Required) The storage container name to store the blob inventory files for this rule.

* `format` - (Required) The format of the inventory files. Possible values are `Csv` and `Parquet`.

* `schedule` - (Required) The inventory schedule applied by this rule. Possible values are `Daily` and `Weekly`.

* `scope` - (Required) The scope of the inventory for this rule. Possible values are `Blob` and `Container`.

* `schema_fields` - (Required) A list of fields to be included in the inventory. See the [Azure API reference](https://docs.microsoft.com/rest/api/storagerp/blob-inventory-policies/create-or-update#blobinventorypolicydefinition) for all the supported fields.

* `filter` - (Optional) A `filter` block as defined above. Can only be set when the `scope` is `Blob`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Storage Blob Inventory Policy.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Storage Blob Inventory Policy.
* `read` - (Defaults to 5 minutes) Used when retrieving the Storage Blob Inventory Policy.
* `update` - (Defaults to 30 minutes) Used when updating the Storage Blob Inventory Policy.
* `delete` - (Defaults to 30 minutes) Used when deleting the Storage Blob Inventory Policy.

## Import

Storage Blob Inventory Policies can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_storage_blob_inventory_policy.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/storageAccount1/inventoryPolicies/inventoryPolicy1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-84b8f048d4a4019405dd07b2bdacb283a2623524c4c6d09359b6fb062f4ac751 -->