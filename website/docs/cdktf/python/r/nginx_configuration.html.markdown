---
subcategory: "Nginx"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_nginx_configuration"
description: |-
  Manages the configuration for a Nginx Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_nginx_configuration

Manages the configuration for a Nginx Deployment.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-rg"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_2",
            allocation_method="Static",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="Standard",
            tags={
                "environment": "Production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_3",
            address_prefixes=["10.0.2.0/24"],
            delegation=[SubnetDelegation(
                name="delegation",
                service_delegation=SubnetDelegationServiceDelegation(
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action"],
                    name="NGINX.NGINXPLUS/nginxDeployments"
                )
            )
            ],
            name="example-subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_nginx_deployment_example =
        azurerm.nginx_deployment.NginxDeployment(self, "example_4",
            diagnose_support_enabled=True,
            frontend_public=NginxDeploymentFrontendPublic(
                ip_address=[cdktf.Token.as_string(azurerm_public_ip_example.id)]
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            managed_resource_group="example",
            name="example-nginx",
            network_interface=[NginxDeploymentNetworkInterface(
                subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
            )
            ],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="publicpreview_Monthly_gmz7xq9ge3py"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_nginx_deployment_example.override_logical_id("example")
        azurerm_nginx_configuration_example =
        azurerm.nginx_configuration.NginxConfiguration(self, "example_5",
            config_file=[NginxConfigurationConfigFile(
                content=cdktf.Fn.base64encode("http {\n    server {\n        listen 80;\n        location / {\n            default_type text/html;\n            return 200 '<!doctype html><html lang=\"en\"><head></head><body>\n                <div>this one will be updated</div>\n                <div>at 10:38 am</div>\n            </body></html>';\n        }\n        include site/*.conf;\n    }\n}\n"),
                virtual_path="/etc/nginx/nginx.conf"
            ), NginxConfigurationConfigFile(
                content=cdktf.Fn.base64encode("location /bbb {\n default_type text/html;\n return 200 '<!doctype html><html lang=\"en\"><head></head><body>\n  <div>this one will be updated</div>\n  <div>at 10:38 am</div>\n </body></html>';\n}\n"),
                virtual_path="/etc/nginx/site/b.conf"
            )
            ],
            nginx_deployment_id=cdktf.Token.as_string(azurerm_nginx_deployment_example.id),
            root_file="/etc/nginx/nginx.conf"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_nginx_configuration_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `nginx_deployment_id` - (Required) The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.

* `root_file` - (Required) Specify the root file path of this Nginx Configuration.

---

-> **NOTE:** Either `package_data` or `config_file` must be specified - but not both.

* `package_data` - (Optional) Specify the package data for this configuration.

* `config_file` - (Optional) One or more `config_file` blocks as defined below.

* `protected_file` - (Optional) One or more `protected_file` (Protected File) blocks with sensitive information as defined below. If specified `config_file` must also be specified.

---

A `config_file` block supports the following:

* `content` - (Required) Specifies the base-64 encoded contents of this config file.

* `virtual_path` - (Required) Specify the path of this config file.

---

A `protected_file` (Protected File) block supports the following:

* `content` - (Required) Specifies the base-64 encoded contents of this config file (Sensitive).

* `virtual_path` - (Required) Specify the path of this config file.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of this Nginx Configuration.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Nginx Configuration.
* `read` - (Defaults to 5 minutes) Used when retrieving the Nginx Configuration.
* `update` - (Defaults to 10 minutes) Used when updating the Nginx Configuration.
* `delete` - (Defaults to 10 minutes) Used when deleting the Nginx Configuration.

## Import

Nginxs can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_nginx_configuration.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-bba73187369192329a0db0ddee6c0e7d4f0aeabd68e9763f10a3b9c5114b88ab -->