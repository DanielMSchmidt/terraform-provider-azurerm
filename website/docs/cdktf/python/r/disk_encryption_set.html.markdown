---
subcategory: "Compute"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_disk_encryption_set"
description: |-
  Manages a Disk Encryption Set.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_disk_encryption_set

Manages a Disk Encryption Set.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        data_azurerm_client_config_current =
        azurerm.data_azurerm_client_config.DataAzurermClientConfig(self, "current")
        azurerm_key_vault_example = azurerm.key_vault.KeyVault(self, "example_2",
            enabled_for_disk_encryption=True,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="des-example-keyvault",
            purge_protection_enabled=True,
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="premium",
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_example.override_logical_id("example")
        azurerm_key_vault_access_policy_example_user =
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example-user",
            key_permissions=["Create", "Delete", "Get", "Purge", "Recover", "Update", "List", "Decrypt", "Sign", "GetRotationPolicy"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(data_azurerm_client_config_current.object_id),
            tenant_id=cdktf.Token.as_string(data_azurerm_client_config_current.tenant_id)
        )
        azurerm_key_vault_key_example = azurerm.key_vault_key.KeyVaultKey(self, "example_4",
            depends_on=[azurerm_key_vault_access_policy_example_user],
            key_opts=["decrypt", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"
            ],
            key_size=2048,
            key_type="RSA",
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            name="des-example-key"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_key_vault_key_example.override_logical_id("example")
        azurerm_disk_encryption_set_example =
        azurerm.disk_encryption_set.DiskEncryptionSet(self, "example_5",
            identity=DiskEncryptionSetIdentity(
                type="SystemAssigned"
            ),
            key_vault_key_id=cdktf.Token.as_string(azurerm_key_vault_key_example.id),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="des",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_disk_encryption_set_example.override_logical_id("example")
        azurerm.key_vault_access_policy.KeyVaultAccessPolicyA(self, "example-disk",
            key_permissions=["Create", "Delete", "Get", "Purge", "Recover", "Update", "List", "Decrypt", "Sign"
            ],
            key_vault_id=cdktf.Token.as_string(azurerm_key_vault_example.id),
            object_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_disk_encryption_set_example.identity, ["0", "principal_id"
                ])),
            tenant_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_disk_encryption_set_example.identity, ["0", "tenant_id"
                ]))
        )
        azurerm_role_assignment_example_disk =
        azurerm.role_assignment.RoleAssignment(self, "example-disk_7",
            principal_id=cdktf.Token.as_string(
                cdktf.property_access(azurerm_disk_encryption_set_example.identity, ["0", "principal_id"
                ])),
            role_definition_name="Key Vault Crypto Service Encryption User",
            scope=cdktf.Token.as_string(azurerm_key_vault_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_role_assignment_example_disk.override_logical_id("example-disk")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the Disk Encryption Set. Changing this forces a new resource to be created.

* `resource_group_name` - (Required) Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.

* `location` - (Required) Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.

* `key_vault_key_id` - (Required) Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).

-> **NOTE** Access to the KeyVault must be granted for this Disk Encryption Set, if you want to further use this Disk Encryption Set in a Managed Disk or Virtual Machine, or Virtual Machine Scale Set. For instructions, please refer to the doc of [Server side encryption of Azure managed disks](https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption).

-> **NOTE** A KeyVault using [enable_rbac_authorization](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#enable_rbac_authorization) requires to use `azurerm_role_assignment` to assigne the role `Key Vault Crypto Service Encryption User` to this Disk Encryption Set.
In this case, `azurerm_key_vault_access_policy` is not needed.

* `auto_key_rotation_enabled` - (Optional) Boolean flag to specify whether Azure Disk Encryption Set automatically rotates encryption Key to latest version.

* `encryption_type` - (Optional) The type of key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerKey`, `EncryptionAtRestWithPlatformAndCustomerKeys` and `ConfidentialVmEncryptedWithCustomerKey`. Defaults to `EncryptionAtRestWithCustomerKey`. Changing this forces a new resource to be created.

* `federated_client_id` - (Optional) Multi-tenant application client id to access key vault in a different tenant.

* `identity` - (Required) An `identity` block as defined below.

* `tags` - (Optional) A mapping of tags to assign to the Disk Encryption Set.

---

An `identity` block supports the following:

* `type` - (Required) The type of Managed Service Identity that is configured on this Disk Encryption Set. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both). 

* `identity_ids` - (Optional) A list of User Assigned Managed Identity IDs to be assigned to this Disk Encryption Set.

~> **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Disk Encryption Set.

---

An `identity` block exports the following:

* `principal_id` - The (Client) ID of the Service Principal.

* `tenant_id` - The ID of the Tenant the Service Principal is assigned in.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Disk Encryption Set.
* `update` - (Defaults to 60 minutes) Used when updating the Disk Encryption Set.
* `read` - (Defaults to 5 minutes) Used when retrieving the Disk Encryption Set.
* `delete` - (Defaults to 60 minutes) Used when deleting the Disk Encryption Set.

## Import

Disk Encryption Sets can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_disk_encryption_set.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/diskEncryptionSets/encryptionSet1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-010557148a05bda41da92b5e42212215bcfba3ad5007bb512e1c433352ccb06c -->