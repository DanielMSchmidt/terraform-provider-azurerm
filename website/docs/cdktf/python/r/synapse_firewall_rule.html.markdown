---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_firewall_rule"
description: |-
  Manages a Synapse Firewall Rule.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_firewall_rule

Allows you to Manages a Synapse Firewall Rule.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_1",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            is_hns_enabled=cdktf.Token.as_boolean("true"),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_2",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_3",
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        azurerm_synapse_firewall_rule_example =
        azurerm.synapse_firewall_rule.SynapseFirewallRule(self, "example_4",
            end_ip_address="255.255.255.255",
            name="AllowAll",
            start_ip_address="0.0.0.0",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_firewall_rule_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The Name of the firewall rule. Changing this forces a new resource to be created.

* `synapse_workspace_id` - (Required) The ID of the Synapse Workspace on which to create the Firewall Rule. Changing this forces a new resource to be created.

* `start_ip_address` - (Required) The starting IP address to allow through the firewall for this rule.

* `end_ip_address` - (Required) The ending IP address to allow through the firewall for this rule.

-> **NOTE:** The Azure feature `Allow access to Azure services` can be enabled by setting `start_ip_address` and `end_ip_address` to `0.0.0.0`.

-> **NOTE:** The Azure feature `Allow access to Azure services` requires the `name` to be `AllowAllWindowsAzureIps`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The Synapse Firewall Rule ID.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse Firewall Rule.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse Firewall Rule.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse Firewall Rule.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse Firewall Rule.

## Import

Synapse Firewall Rule can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_firewall_rule.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.Synapse/workspaces/workspace1/firewallRules/rule1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-99e173fb4478aa501aed58abc2a33bea7a859b5d2093a27c2b7a73fe15f83834 -->