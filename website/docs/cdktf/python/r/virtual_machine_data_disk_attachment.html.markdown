---
subcategory: "Compute"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_virtual_machine_data_disk_attachment"
description: |-
  Manages attaching a Disk to a Virtual Machine.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_virtual_machine_data_disk_attachment

Manages attaching a Disk to a Virtual Machine.

~> **NOTE:** Data Disks can be attached either directly on the `azurerm_virtual_machine` resource, or using the `azurerm_virtual_machine_data_disk_attachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.

-> **Please Note:** only Managed Disks are supported via this separate resource, Unmanaged Disks can be attached using the `storage_data_disk` block in the `azurerm_virtual_machine` resource.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        prefix = cdktf.TerraformVariable(self, "prefix",
            default="example"
        )
        vm_name = "${" + prefix.value + "}-vm"
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="${" + prefix.value + "}-resources"
        )
        azurerm_virtual_network_main = azurerm.virtual_network.VirtualNetwork(self, "main",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="${" + prefix.value + "}-network",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        azurerm_managed_disk_example = azurerm.managed_disk.ManagedDisk(self, "example_3",
            create_option="Empty",
            disk_size_gb=10,
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="${" + vm_name + "}-disk1",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_account_type="Standard_LRS"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_managed_disk_example.override_logical_id("example")
        azurerm_subnet_internal = azurerm.subnet.Subnet(self, "internal",
            address_prefixes=["10.0.2.0/24"],
            name="internal",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_main.name)
        )
        azurerm_network_interface_main =
        azurerm.network_interface.NetworkInterface(self, "main_5",
            ip_configuration=[NetworkInterfaceIpConfiguration(
                name="internal",
                private_ip_address_allocation="Dynamic",
                subnet_id=cdktf.Token.as_string(azurerm_subnet_internal.id)
            )
            ],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="${" + prefix.value + "}-nic",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_network_interface_main.override_logical_id("main")
        azurerm_virtual_machine_example =
        azurerm.virtual_machine.VirtualMachine(self, "example_6",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name=vm_name,
            network_interface_ids=[
                cdktf.Token.as_string(azurerm_network_interface_main.id)
            ],
            os_profile=VirtualMachineOsProfile(
                admin_password="Password1234!",
                admin_username="testadmin",
                computer_name=vm_name
            ),
            os_profile_linux_config=VirtualMachineOsProfileLinuxConfig(
                disable_password_authentication=False
            ),
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            storage_image_reference=VirtualMachineStorageImageReference(
                offer="UbuntuServer",
                publisher="Canonical",
                sku="20.04-LTS",
                version="latest"
            ),
            storage_os_disk=VirtualMachineStorageOsDisk(
                caching="ReadWrite",
                create_option="FromImage",
                managed_disk_type="Standard_LRS",
                name="myosdisk1"
            ),
            vm_size="Standard_F2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_machine_example.override_logical_id("example")
        azurerm_virtual_machine_data_disk_attachment_example =
        azurerm.virtual_machine_data_disk_attachment.VirtualMachineDataDiskAttachment(self, "example_7",
            caching="ReadWrite",
            lun=cdktf.Token.as_number("10"),
            managed_disk_id=cdktf.Token.as_string(azurerm_managed_disk_example.id),
            virtual_machine_id=cdktf.Token.as_string(azurerm_virtual_machine_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_machine_data_disk_attachment_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `virtual_machine_id` - (Required) The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.

* `managed_disk_id` - (Required) The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.

* `lun` - (Required) The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.

* `caching` - (Required) Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.

* `create_option` - (Optional) The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.

* `write_accelerator_enabled` - (Optional) Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Virtual Machine Data Disk attachment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Virtual Machine Data Disk Attachment.
* `update` - (Defaults to 30 minutes) Used when updating the Virtual Machine Data Disk Attachment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Virtual Machine Data Disk Attachment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Virtual Machine Data Disk Attachment.

## Import

Virtual Machines Data Disk Attachments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_virtual_machine_data_disk_attachment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1/dataDisks/disk1
```

-> **Please Note:** This is a Terraform Unique ID matching the format: `{virtualMachineID}/dataDisks/{diskName}`

<!-- cache-key: cdktf-0.17.0-pre.15 input-df345bde114300d7634671f5fc13e3829806dcf6004b13d58fa03af97fe16921 -->