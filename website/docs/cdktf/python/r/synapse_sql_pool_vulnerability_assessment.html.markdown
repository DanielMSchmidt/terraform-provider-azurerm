---
subcategory: "Synapse"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_synapse_sql_pool_vulnerability_assessment"
description: |-
  Manages the Vulnerability Assessment for a Synapse SQL Pool.

---


<!-- Please do not edit this file, it is generated. -->
# azurerm_synapse_sql_pool_vulnerability_assessment

Manages the Vulnerability Assessment for a Synapse SQL Pool.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-resources"
        )
        azurerm_storage_account_audit_logs =
        azurerm.storage_account.StorageAccount(self, "audit_logs",
            account_replication_type="LRS",
            account_tier="Standard",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplesa",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        azurerm_storage_account_example =
        azurerm.storage_account.StorageAccount(self, "example_2",
            account_kind="StorageV2",
            account_replication_type="LRS",
            account_tier="Standard",
            is_hns_enabled=cdktf.Token.as_boolean("true"),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="examplestorageacc",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_account_example.override_logical_id("example")
        azurerm_storage_container_example =
        azurerm.storage_container.StorageContainer(self, "example_3",
            name="example",
            storage_account_name=cdktf.Token.as_string(azurerm_storage_account_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_container_example.override_logical_id("example")
        azurerm_storage_data_lake_gen2_filesystem_example =
        azurerm.storage_data_lake_gen2_filesystem.StorageDataLakeGen2Filesystem(self, "example_4",
            name="example",
            storage_account_id=cdktf.Token.as_string(azurerm_storage_account_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_storage_data_lake_gen2_filesystem_example.override_logical_id("example")
        azurerm_synapse_workspace_example =
        azurerm.synapse_workspace.SynapseWorkspace(self, "example_5",
            aad_admin=[SynapseWorkspaceAadAdmin(
                login="AzureAD Admin",
                object_id="00000000-0000-0000-0000-000000000000",
                tenant_id="00000000-0000-0000-0000-000000000000"
            )
            ],
            identity=SynapseWorkspaceIdentity(
                type="SystemAssigned"
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sql_administrator_login="sqladminuser",
            sql_administrator_login_password="H@Sh1CoR3!",
            storage_data_lake_gen2_filesystem_id=cdktf.Token.as_string(azurerm_storage_data_lake_gen2_filesystem_example.id),
            tags={
                "Env": "production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_workspace_example.override_logical_id("example")
        azurerm_synapse_sql_pool_example =
        azurerm.synapse_sql_pool.SynapseSqlPool(self, "example_6",
            create_mode="Default",
            name="examplesqlpool",
            sku_name="DW100c",
            synapse_workspace_id=cdktf.Token.as_string(azurerm_synapse_workspace_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_example.override_logical_id("example")
        azurerm_synapse_sql_pool_security_alert_policy_example =
        azurerm.synapse_sql_pool_security_alert_policy.SynapseSqlPoolSecurityAlertPolicy(self, "example_7",
            disabled_alerts=["Sql_Injection", "Data_Exfiltration"],
            policy_state="Enabled",
            retention_days=20,
            sql_pool_id=cdktf.Token.as_string(azurerm_synapse_sql_pool_example.id),
            storage_account_access_key=cdktf.Token.as_string(azurerm_storage_account_audit_logs.primary_access_key),
            storage_endpoint=cdktf.Token.as_string(azurerm_storage_account_audit_logs.primary_blob_endpoint)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_security_alert_policy_example.override_logical_id("example")
        azurerm_synapse_sql_pool_vulnerability_assessment_example =
        azurerm.synapse_sql_pool_vulnerability_assessment.SynapseSqlPoolVulnerabilityAssessment(self, "example_8",
            recurring_scans=SynapseSqlPoolVulnerabilityAssessmentRecurringScans(
                email_subscription_admins_enabled=True,
                emails=["email@example1.com", "email@example2.com"],
                enabled=True
            ),
            sql_pool_security_alert_policy_id=cdktf.Token.as_string(azurerm_synapse_sql_pool_security_alert_policy_example.id),
            storage_account_access_key=cdktf.Token.as_string(azurerm_storage_account_example.primary_access_key),
            storage_container_path="${" + azurerm_storage_account_example.primary_blob_endpoint + "${" + azurerm_storage_container_example.name + "}/"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_synapse_sql_pool_vulnerability_assessment_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `sql_pool_security_alert_policy_id` - (Required) The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.

* `storage_container_path` - (Required) A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).

* `storage_account_access_key` - (Optional) Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.

* `storage_container_sas_key` - (Optional) A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.

* `recurring_scans` - (Optional) The recurring scans settings. The `recurring_scans` block supports fields documented below.

---

The `recurring_scans` block supports the following:

* `enabled` - (Optional) Boolean flag which specifies if recurring scans is enabled or disabled. Defaults to `false`.
* `email_subscription_admins_enabled` - (Optional) Boolean flag which specifies if the schedule scan notification will be sent to the subscription administrators. Defaults to `false`.
* `emails` - (Optional) Specifies an array of email addresses to which the scan notification is sent.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Synapse SQL Pool Vulnerability Assessment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Synapse SQL Pool Vulnerability Assessment.
* `update` - (Defaults to 30 minutes) Used when updating the Synapse SQL Pool Vulnerability Assessment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Synapse SQL Pool Vulnerability Assessment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Synapse SQL Pool Vulnerability Assessment.

## Import

Synapse SQL Pool Vulnerability Assessment can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_synapse_sql_pool_vulnerability_assessment.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e2b2128e44048da1842fca8e64d7e5e4e31cb0c7c012f3a3494b8bc79b377469 -->