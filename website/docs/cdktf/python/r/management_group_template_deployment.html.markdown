---
subcategory: "Template"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_management_group_template_deployment"
description: |-
  Manages a Template Deployment at a Management Group Scope.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_management_group_template_deployment

Manages a Template Deployment at a Management Group Scope.

~> **Note:** Deleting a Deployment at the Management Group Scope will not delete any resources created by the deployment.

~> **Note:** Deployments to a Management Group are always Incrementally applied. Existing resources that are not part of the template will not be removed.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_management_group_example =
        azurerm.data_azurerm_management_group.DataAzurermManagementGroup(self, "example",
            name="00000000-0000-0000-0000-000000000000"
        )
        azurerm_management_group_template_deployment_example =
        azurerm.management_group_template_deployment.ManagementGroupTemplateDeployment(self, "example_1",
            location="West Europe",
            management_group_id=cdktf.Token.as_string(data_azurerm_management_group_example.id),
            name="example",
            parameters_content="{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"policyDefinitionID\": {\n      \"value\": \"/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a\"\n    }\n  }\n}\n",
            template_content="{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"policyAssignmentName\": {\n      \"type\": \"string\",\n      \"defaultValue\": \"[guid(parameters('policyDefinitionID'), resourceGroup().name)]\",\n      \"metadata\": {\n        \"description\": \"Specifies the name of the policy assignment, can be used defined or an idempotent name as the defaultValue provides.\"\n      }\n    },\n    \"policyDefinitionID\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"Specifies the ID of the policy definition or policy set definition being assigned.\"\n      }\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Authorization/policyAssignments\",\n      \"name\": \"[parameters('policyAssignmentName')]\",\n      \"apiVersion\": \"2019-09-01\",\n      \"properties\": {\n        \"scope\": \"[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]\",\n        \"policyDefinitionId\": \"[parameters('policyDefinitionID')]\"\n      }\n    }\n  ]\n}\n"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_management_group_template_deployment_example.override_logical_id("example")
```

```hcl

data "azurerm_management_group" "example" {
  name = "00000000-0000-0000-0000-000000000000"
}

resource "azurerm_management_group_template_deployment" "example" {
  name                = "example"
  location            = "West Europe"
  management_group_id = data.azurerm_management_group.example.id
  template_content    = file("templates/example-deploy-template.json")
  parameters_content  = file("templates/example-deploy-params.json")
}
```

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_management_group_example =
        azurerm.data_azurerm_management_group.DataAzurermManagementGroup(self, "example",
            name="00000000-0000-0000-0000-000000000000"
        )
        data_azurerm_template_spec_version_example =
        azurerm.data_azurerm_template_spec_version.DataAzurermTemplateSpecVersion(self, "example_1",
            name="exampleTemplateForManagementGroup",
            resource_group_name="exampleResourceGroup",
            version="v1.0.9"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azurerm_template_spec_version_example.override_logical_id("example")
        azurerm_management_group_template_deployment_example =
        azurerm.management_group_template_deployment.ManagementGroupTemplateDeployment(self, "example_2",
            location="West Europe",
            management_group_id=cdktf.Token.as_string(data_azurerm_management_group_example.id),
            name="example",
            template_spec_version_id=cdktf.Token.as_string(data_azurerm_template_spec_version_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_management_group_template_deployment_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `location` - (Required) The Azure Region where the Template should exist. Changing this forces a new Template to be created.

* `management_group_id` - (Required) The ID of the Management Group to apply the Deployment Template to. Changing this forces a new resource to be created.

* `name` - (Required) The name which should be used for this Template Deployment. Changing this forces a new Template Deployment to be created.

---

* `debug_level` - (Optional) The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.

* `parameters_content` - (Optional) The contents of the ARM Template parameters file - containing a JSON list of parameters.

* `template_content` - (Optional) The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.

* `template_spec_version_id` - (Optional) The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.

* `tags` - (Optional) A mapping of tags which should be assigned to the Template.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Management Group Template Deployment.

* `output_content` - The JSON Content of the Outputs of the ARM Template Deployment.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 3 hours) Used when creating the Management Group Template Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Management Group Template Deployment.
* `update` - (Defaults to 3 hours) Used when updating the Management Group Template Deployment.
* `delete` - (Defaults to 3 hours) Used when deleting the Management Group Template Deployment.

## Import

Management Group Template Deployments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_management_group_template_deployment.example /providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Resources/deployments/deploy1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-de7f3a902e4706124146f6bda43c7edff7ee8d15902de09c2d45605ca2c8ecd1 -->