---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_configuration_service"
description: |-
  Manages a Spring Cloud Configuration Service.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_spring_cloud_configuration_service

Manages a Spring Cloud Configuration Service.

-> **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm.provider.AzurermProvider(self, "azurerm",
            features=AzurermProviderFeatures()
        )
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example"
        )
        azurerm_spring_cloud_service_example =
        azurerm.spring_cloud_service.SpringCloudService(self, "example_2",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku_name="E0"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_service_example.override_logical_id("example")
        azurerm_spring_cloud_configuration_service_example =
        azurerm.spring_cloud_configuration_service.SpringCloudConfigurationService(self, "example_3",
            name="default",
            repository=[SpringCloudConfigurationServiceRepository(
                label="master",
                name="fake",
                password="H@Sh1CoR3!",
                patterns=["app/dev"],
                search_paths=["dir1", "dir2"],
                strict_host_key_checking=False,
                uri="https://github.com/Azure-Samples/piggymetrics",
                username="adminuser"
            )
            ],
            spring_cloud_service_id=cdktf.Token.as_string(azurerm_spring_cloud_service_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_spring_cloud_configuration_service_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `name` - (Required) The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.

* `spring_cloud_service_id` - (Required) The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.

---

* `repository` - (Optional) One or more `repository` blocks as defined below.

---

A `repository` block supports the following:

* `label` - (Required) Specifies the label of the repository.

* `name` - (Required) Specifies the name which should be used for this repository.

* `patterns` - (Required) Specifies the collection of patterns of the repository.

* `uri` - (Required) Specifies the URI of the repository.

* `host_key` - (Optional) Specifies the SSH public key of git repository.

* `host_key_algorithm` - (Optional) Specifies the SSH key algorithm of git repository.

* `password` - (Optional) Specifies the password of git repository basic auth.

* `private_key` - (Optional) Specifies the SSH private key of git repository.

* `search_paths` - (Optional) Specifies a list of searching path of the repository

* `strict_host_key_checking` - (Optional) Specifies whether enable the strict host key checking.

* `username` - (Optional) Specifies the username of git repository basic auth.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Spring Cloud Configuration Service.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Spring Cloud Configuration Service.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud Configuration Service.
* `update` - (Defaults to 30 minutes) Used when updating the Spring Cloud Configuration Service.
* `delete` - (Defaults to 30 minutes) Used when deleting the Spring Cloud Configuration Service.

## Import

Spring Cloud Configuration Services can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_spring_cloud_configuration_service.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/configurationServices/configurationService1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1fc9e94be27969e1d80593d94a0dd12f3d0d70a43b121a73ea7aeb6c6a9a0f64 -->