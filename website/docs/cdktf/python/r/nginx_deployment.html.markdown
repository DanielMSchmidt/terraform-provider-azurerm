---
subcategory: "Nginx"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_nginx_deployment"
description: |-
  Manages a Nginx Deployment.
---


<!-- Please do not edit this file, it is generated. -->
# azurerm_nginx_deployment

Manages a Nginx Deployment.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        azurerm_resource_group_example = azurerm.resource_group.ResourceGroup(self, "example",
            location="West Europe",
            name="example-rg"
        )
        azurerm_virtual_network_example =
        azurerm.virtual_network.VirtualNetwork(self, "example_1",
            address_space=["10.0.0.0/16"],
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example-vnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_virtual_network_example.override_logical_id("example")
        azurerm_public_ip_example = azurerm.public_ip.PublicIp(self, "example_2",
            allocation_method="Static",
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            name="example",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="Standard",
            tags={
                "environment": "Production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_public_ip_example.override_logical_id("example")
        azurerm_subnet_example = azurerm.subnet.Subnet(self, "example_3",
            address_prefixes=["10.0.2.0/24"],
            delegation=[SubnetDelegation(
                name="delegation",
                service_delegation=SubnetDelegationServiceDelegation(
                    actions=["Microsoft.Network/virtualNetworks/subnets/join/action"],
                    name="NGINX.NGINXPLUS/nginxDeployments"
                )
            )
            ],
            name="example-subnet",
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            virtual_network_name=cdktf.Token.as_string(azurerm_virtual_network_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_subnet_example.override_logical_id("example")
        azurerm_nginx_deployment_example =
        azurerm.nginx_deployment.NginxDeployment(self, "example_4",
            diagnose_support_enabled=True,
            frontend_public=NginxDeploymentFrontendPublic(
                ip_address=[cdktf.Token.as_string(azurerm_public_ip_example.id)]
            ),
            location=cdktf.Token.as_string(azurerm_resource_group_example.location),
            managed_resource_group="example",
            name="example-nginx",
            network_interface=[NginxDeploymentNetworkInterface(
                subnet_id=cdktf.Token.as_string(azurerm_subnet_example.id)
            )
            ],
            resource_group_name=cdktf.Token.as_string(azurerm_resource_group_example.name),
            sku="publicpreview_Monthly_gmz7xq9ge3py"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_nginx_deployment_example.override_logical_id("example")
```

## Arguments Reference

The following arguments are supported:

* `resource_group_name` - (Required) The name of the Resource Group where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.

* `name` - (Required) The name which should be used for this Nginx Deployment. Changing this forces a new Nginx Deployment to be created.

* `location` - (Required) The Azure Region where the Nginx Deployment should exist. Changing this forces a new Nginx Deployment to be created.

* `sku` - (Required) Specify the Name of Nginx deployment SKU. The possible value are `publicpreview_Monthly_gmz7xq9ge3py` and `standard_Monthly`.

* `managed_resource_group` - (Optional) Specify the managed resource group to deploy VNet injection related network resources. Changing this forces a new Nginx Deployment to be created.

---

* `diagnose_support_enabled` - (Optional) Should the diagnosis support be enabled?

* `identity` - (Optional) An `identity` block as defined below.

* `frontend_private` - (Optional) One or more `frontend_private` blocks as defined below. Changing this forces a new Nginx Deployment to be created.

* `frontend_public` - (Optional) A `frontend_public` block as defined below. Changing this forces a new Nginx Deployment to be created.

* `logging_storage_account` - (Optional) One or more `logging_storage_account` blocks as defined below.

* `network_interface` - (Optional) One or more `network_interface` blocks as defined below. Changing this forces a new Nginx Deployment to be created.

* `tags` - (Optional) A mapping of tags which should be assigned to the Nginx Deployment.

---

A `identity` block supports the following:

* `type` - (Required) Specifies the identity type of the Nginx Deployment. Possible values is `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field.

* `identity_ids` - (Optional) Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.

---

A `frontend_private` block supports the following:

* `allocation_method` - (Required) Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.

* `ip_address` - (Required) Specify the IP Address of this private IP.

* `subnet_id` - (Required) Specify the SubNet Resource ID to this Nginx Deployment.

---

A `frontend_public` block supports the following:

* `ip_address` - (Optional) Specifies a list of Public IP Resouce ID to this Nginx Deployment.

---

A `logging_storage_account` block supports the following:

* `container_name` - (Optional) Specify the container name of Stoage Account for logging.

* `name` - (Optional) The account name of the StorageAccount for Nginx Logging.

---

A `network_interface` block supports the following:

* `subnet_id` - (Required) Specify The SubNet Resource ID to this Nginx Deployment.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

* `id` - The ID of the Nginx Deployment.

* `ip_address` - The IP address of the deployment.

* `nginx_version` - The version of deployed nginx.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Nginx Deployment.
* `read` - (Defaults to 5 minutes) Used when retrieving the Nginx Deployment.
* `update` - (Defaults to 30 minutes) Used when updating the Nginx Deployment.
* `delete` - (Defaults to 30 minutes) Used when deleting the Nginx Deployment.

## Import

Nginx Deployments can be imported using the `resource id`, e.g.

```shell
terraform import azurerm_nginx_deployment.example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-38220c2cf016043f92b002e47874f843423c5f69899abd2a1427bdcc61dd8b14 -->