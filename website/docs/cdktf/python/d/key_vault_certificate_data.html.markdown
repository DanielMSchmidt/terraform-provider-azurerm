---
subcategory: "Key Vault"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_key_vault_certificate_data"
description: |-
  Gets data contained in an existing Key Vault Certificate.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: azurerm_key_vault_certificate_data

Use this data source to access data stored in an existing Key Vault Certificate.

~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
[Read more about sensitive data in state](/docs/state/sensitive-data.html).

~> **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_key_vault_example =
        azurerm.data_azurerm_key_vault.DataAzurermKeyVault(self, "example",
            name="examplekv",
            resource_group_name="some-resource-group"
        )
        data_azurerm_key_vault_certificate_data_example =
        azurerm.data_azurerm_key_vault_certificate_data.DataAzurermKeyVaultCertificateData(self, "example_1",
            key_vault_id=cdktf.Token.as_string(data_azurerm_key_vault_example.id),
            name="secret-sauce"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azurerm_key_vault_certificate_data_example.override_logical_id("example")
        cdktf.TerraformOutput(self, "example_pem",
            value=data_azurerm_key_vault_certificate_data_example.pem
        )
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Specifies the name of the Key Vault Secret.

* `key_vault_id` - (Required) Specifies the ID of the Key Vault instance where the Secret resides, available on the `azurerm_key_vault` Data Source / Resource.

* `version` - (Optional) Specifies the version of the certificate to look up.  (Defaults to latest)

~> **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.

## Attributes Reference

The following attributes are exported:

* `certificates_count` - Amount of certificates in the chain in case Key Vault Certificate is a bundle (e.g. has an intermediate certificate).

* `hex` - The raw Key Vault Certificate data represented as a hexadecimal string.

* `pem` - The Key Vault Certificate in PEM format.

* `key` - The Key Vault Certificate Key.

* `expires` - Expiry date of certificate in RFC3339 format.

* `not_before` - Not Before date of certificate in RFC3339 format.

* `tags` - A mapping of tags to assign to the resource.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `read` - (Defaults to 5 minutes) Used when retrieving the Key Vault Certificate.

<!-- cache-key: cdktf-0.17.0-pre.15 input-88ce8d892b00b19e88214e2fa09b82c8966ad53decefb5f84ffada177c25288c -->