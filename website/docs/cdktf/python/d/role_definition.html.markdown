---
subcategory: "Authorization"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_role_definition"
description: |-
  Get information about an existing Role Definition.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: azurerm_role_definition

Use this data source to access information about an existing Role Definition.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.azurerm as azurerm
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_azurerm_role_definition_builtin =
        azurerm.data_azurerm_role_definition.DataAzurermRoleDefinition(self, "builtin",
            name="Contributor"
        )
        data_azurerm_subscription_primary =
        azurerm.data_azurerm_subscription.DataAzurermSubscription(self, "primary")
        cdktf.TerraformOutput(self, "contributor_role_definition_id",
            value=data_azurerm_role_definition_builtin.id
        )
        azurerm_role_definition_custom =
        azurerm.role_definition.RoleDefinition(self, "custom",
            name="CustomRoleDef",
            role_definition_id="00000000-0000-0000-0000-000000000000",
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        data_azurerm_role_definition_custom =
        azurerm.data_azurerm_role_definition.DataAzurermRoleDefinition(self, "custom_4",
            role_definition_id=cdktf.Token.as_string(azurerm_role_definition_custom.role_definition_id),
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_azurerm_role_definition_custom.override_logical_id("custom")
        azurerm.data_azurerm_role_definition.DataAzurermRoleDefinition(self, "custom-byname",
            name=cdktf.Token.as_string(azurerm_role_definition_custom.name),
            scope=cdktf.Token.as_string(data_azurerm_subscription_primary.id)
        )
        cdktf.TerraformOutput(self, "custom_role_definition_id",
            value=data_azurerm_role_definition_custom.id
        )
```

## Argument Reference

* `name` - (Optional) Specifies the Name of either a built-in or custom Role Definition.

-> You can also use this for built-in roles such as `Contributor`, `Owner`, `Reader` and `Virtual Machine Contributor`

* `role_definition_id` - (Optional) Specifies the ID of the Role Definition as a UUID/GUID.
* `scope` - (Optional) Specifies the Scope at which the Custom Role Definition exists.

~> **Note:** One of `name` or `role_definition_id` must be specified.

## Attributes Reference

* `id` - the ID of the built-in Role Definition.
* `description` - the Description of the built-in Role.
* `type` - the Type of the Role.
* `permissions` - a `permissions` block as documented below.
* `assignable_scopes` - One or more assignable scopes for this Role Definition, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`.

A `permissions` block contains:

* `actions` - a list of actions supported by this role
* `not_actions` - a list of actions which are denied by this role

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `read` - (Defaults to 5 minutes) Used when retrieving the Role Definition.

<!-- cache-key: cdktf-0.17.0-pre.15 input-e856c3b83d5c34c5d1112aa9f854a75afff60de8b595fe83118977c1ced0acba -->